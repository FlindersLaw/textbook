"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[9587],{9505:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>r,default:()=>m,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"textbook/chapter_02/00-30","title":"Hello World 3 - Buttons and More Markdown","description":"Time to start getting a little more sophisticated.  We\'re going to modify our","source":"@site/docs/textbook/chapter_02/00-30.mdx","sourceDirName":"textbook/chapter_02","slug":"/textbook/chapter_02/00-30","permalink":"/textbook/docs/textbook/chapter_02/00-30","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Hello World 3 - Buttons and More Markdown"},"sidebar":"textbookSidebar","previous":{"title":"Hello World 2 - Introducing Markdown and Mako","permalink":"/textbook/docs/textbook/chapter_02/00-20"},"next":{"title":"Hello World 4 - More Mako, Multiple Questions, Tables","permalink":"/textbook/docs/textbook/chapter_02/00-42"}}');var l=t(4848),i=t(8453),o=t(8958),a=t(1428);const d={title:"Hello World 3 - Buttons and More Markdown"},r=void 0,h={},c=[{value:"Create a new file",id:"create-a-new-file",level:2},{value:"Review the Code",id:"review-the-code",level:2},{value:"Markdown",id:"markdown",level:3},{value:"Line 7",id:"line-7",level:4},{value:"Lists",id:"lists",level:3},{value:"Lines 9 to 13",id:"lines-9-to-13",level:4},{value:"Terminating the list",id:"terminating-the-list",level:4},{value:"Buttons",id:"buttons",level:3},{value:"Line 16",id:"line-16",level:4},{value:"Line 17",id:"line-17",level:4},{value:"Line 18",id:"line-18",level:4},{value:"Line 19",id:"line-19",level:4},{value:"The Second Question Block",id:"the-second-question-block",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return a||x("Components",!1),a.DisplayDAButtons||x("Components.DisplayDAButtons",!0),a.DisplayImage||x("Components.DisplayImage",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["Time to start getting a little more sophisticated.  We're going to modify our\n",(0,l.jsx)(n.a,{href:"00-20",children:"Hello World"})," program and:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"add some buttons on the final screen;"}),"\n",(0,l.jsx)(n.li,{children:"use a bit more Markdown; and"}),"\n",(0,l.jsx)(n.li,{children:"re-format our question so it's a little easier to read."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Let's get started!"}),"\n",(0,l.jsx)(n.h2,{id:"create-a-new-file",children:"Create a new file"}),"\n",(0,l.jsxs)(n.p,{children:["Just like ",(0,l.jsx)(n.a,{href:"00-20#create-a-new-file",children:"before"})," we should copy our code from\nthe ",(0,l.jsx)(n.code,{children:"hello_world2.yml"})," we created into a new file called ",(0,l.jsx)(n.code,{children:"hello_world3.yml"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"Once you've copied the file across, modify it and make it look like this:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",metastring:"title='hello_world3.yml' showLineNumbers",children:"# Hello world\n---\n# My first Docassemble program\nmandatory: True\nquestion: Hello World!\nsubquestion: |\n  #### Welcome to my first ever Docassemble interview\n\n  Today I learnt:\n\n  - what a mandatory code block is;\n  - how to use a variable; and\n  - a *little bit* of Markdown\n\n  I, **${ MJFname }**, am pretty happy with myself!\nbuttons:\n  - I'm done: exit\n    url: https://flinders.edu.au\n  - Do it again: restart\n---\nquestion: Name\nsubquestion: |\n  Please enter your full name, including your middle name if you have one\nfields:\n  - no label: MJFname\n---\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"caution",children:(0,l.jsxs)(n.p,{children:["Once again, make sure all your ",(0,l.jsx)(n.a,{href:"00-15",children:"spaces, indents, dashes (hyphens)"}),"\nand ",(0,l.jsx)(n.a,{href:"00-20#mako",children:"brackets and braces"})," are properly formatted and aligned."]})}),"\n",(0,l.jsx)(n.h2,{id:"review-the-code",children:"Review the Code"}),"\n",(0,l.jsx)(n.p,{children:"OK, now let's review the changes we've made."}),"\n",(0,l.jsx)(n.h3,{id:"markdown",children:"Markdown"}),"\n",(0,l.jsxs)(n.p,{children:["We touched on Markdown ",(0,l.jsx)(n.a,{href:"00-20#markdown",children:"before"}),".  Lines 7 to 15 demonstrate\na other things we can do with Markdown."]}),"\n",(0,l.jsx)(n.h4,{id:"line-7",children:"Line 7"}),"\n",(0,l.jsxs)(n.p,{children:["Line 7 is a ",(0,l.jsx)(n.strong,{children:"heading"}),".  The hash characters (",(0,l.jsx)(n.code,{children:"#"}),") that precede the text indicate\nwhat level heading it is.  In our case we have a level 4 heading as we have\nfour hashes.  A level 1 heading would have had one hash, a level 2 two hashes\nand so-on."]}),"\n",(0,l.jsx)(n.h3,{id:"lists",children:"Lists"}),"\n",(0,l.jsx)(n.h4,{id:"lines-9-to-13",children:"Lines 9 to 13"}),"\n",(0,l.jsx)(n.p,{children:"These lines lay out a bullet list."}),"\n",(0,l.jsx)(n.p,{children:"Lines 9 and 10 introduce the list:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"  Today I learnt:\n\n"})}),"\n",(0,l.jsx)(n.p,{children:"There must be a blank line between the text that precedes a list (line 9) and\nthe list items themselves (lines 11 to 13)."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"  - what a mandatory code block is;\n  - how to use a variable; and\n  - a *little bit* of Markdown\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Making a bullet list is simple.  Start each line off with a dash (",(0,l.jsx)(n.code,{children:"-"}),"), as\nwe have here or a star (",(0,l.jsx)(n.code,{children:"*"}),").  Both work the same way."]}),"\n",(0,l.jsxs)(n.p,{children:["You can make a numbered list by replacing the dashes with numbers (eg: ",(0,l.jsx)(n.code,{children:"1."}),").\nSo, we could have displayed our list as a numbered list if we'd done this:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"  1. what a mandatory code block is;\n  2. how to use a variable; and\n  3. a *little bit* of Markdown\n"})}),"\n",(0,l.jsx)(n.p,{children:"or even this:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"  1. what a mandatory code block is;\n  1. how to use a variable; and\n  1. a *little bit* of Markdown\n"})}),"\n",(0,l.jsx)(n.p,{children:"Docassemble will see the number and will number the list consecutively for us."}),"\n",(0,l.jsx)(n.h4,{id:"terminating-the-list",children:"Terminating the list"}),"\n",(0,l.jsx)(n.p,{children:"A bullet or numbered list has to be terminated by a blank line.  If you don't\nterminate a list with a blank line the line that follows the list will simply\nrun into the last item of the list, like this:"}),"\n",(0,l.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_02/hello_world3-1.png"}),"\n",(0,l.jsx)(n.h3,{id:"buttons",children:"Buttons"}),"\n",(0,l.jsx)(n.p,{children:"Lines 16 to 19 are how we set up buttons on our final screen.  Let's work\nthis line by line."}),"\n",(0,l.jsx)(n.h4,{id:"line-16",children:"Line 16"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"buttons:\n"})}),"\n",(0,l.jsx)(n.p,{children:"Tells Docassemble that what's coming next is going to be one or more buttons.\nNote that line 16 starts at the left margin of the code and the buttons that\nfollow are all indented."}),"\n",(0,l.jsx)(n.h4,{id:"line-17",children:"Line 17"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"  - I'm done: exit\n"})}),"\n",(0,l.jsx)(n.p,{children:"Line 17 consists of three parts:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["A dash (",(0,l.jsx)(n.code,{children:"-"}),").  This tells Docassemble that line 17 is the first item in\na list of buttons."]}),"\n",(0,l.jsxs)(n.li,{children:["Some text between the dash and a colon (",(0,l.jsx)(n.code,{children:":"}),").  This is the text that will\nbe displayed on the button; and"]}),"\n",(0,l.jsx)(n.li,{children:"a command after the colon.  This tells the button what to do."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"So, line 17 tells docassemble to display a button containing the text\n'I'm done', and when the button is pressed, the app should exit."}),"\n",(0,l.jsxs)(n.p,{children:["The button should look like this: ",(0,l.jsx)(a.DisplayDAButtons,{button:o.Yj,button_text:"I'm done"})]}),"\n",(0,l.jsx)(n.h4,{id:"line-18",children:"Line 18"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"    url: https://flinders.edu.au\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Note how line 18 is indented so that ",(0,l.jsx)(n.code,{children:"url:"})," is left-aligned with ",(0,l.jsx)(n.code,{children:"I'm done"})," and,\nimportantly, not with the dash on line 17.  This tells Docasemble that line 18\nprovides more information to whatever exists above it.  In this case, line 18\nis relates to the button on line 17 and is telling that button that, when\nit exits, it should display the Flinders University\nwebsite (",(0,l.jsx)(n.code,{children:"https://flinders.edu.au"}),")."]}),"\n",(0,l.jsx)(n.h4,{id:"line-19",children:"Line 19"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"  - Do it again: restart\n"})}),"\n",(0,l.jsx)(n.p,{children:"We're experts at buttons now, so we know that:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"this is a new button (because of the dash at the front);"}),"\n",(0,l.jsx)(n.li,{children:"the text of the button will be 'Do it again'; and"}),"\n",(0,l.jsxs)(n.li,{children:["when pressed, the button will execute the ",(0,l.jsx)(n.code,{children:"restart"})," command.  ",(0,l.jsx)(n.code,{children:"restart"}),"\nwill clear out all the program data and start the program again."]}),"\n"]}),"\n",(0,l.jsxs)(n.admonition,{title:"The Free Continue Button",type:"note",children:[(0,l.jsxs)(n.p,{children:["You'll notice that the second\nquestion block, the one that asks for the value for ",(0,l.jsx)(n.code,{children:"MJFname"})," displays\na ",(0,l.jsx)(a.DisplayDAButtons,{button:o.K1,button_text:"Continue"}),"\nbutton, but we never asked it to.  There is no ",(0,l.jsx)(n.code,{children:"buttons:"})," tag in the\nsecond question block.  Why does it display a Continue button even though\nwe haven't asked for one?"]}),(0,l.jsxs)(n.p,{children:["When Docasemble sees that a question block contains ",(0,l.jsx)(n.code,{children:"fields:"})," it assumes that\nthe user must continue past that screen to the rest of the program.  So,\nDocassemble adds the Continue button automatically for us."]})]}),"\n",(0,l.jsx)(n.h3,{id:"the-second-question-block",children:"The Second Question Block"}),"\n",(0,l.jsxs)(n.p,{children:["This second question block looks a bit different to our ",(0,l.jsx)(n.code,{children:"hello_world2"})," example.\nLet's look into it."]}),"\n",(0,l.jsxs)(n.p,{children:["First we have a new ",(0,l.jsx)(n.code,{children:"subquestion"})," tag on line 22.\nWe've ",(0,l.jsx)(n.a,{href:"./00-10#lines-4-and-5",children:"seen this before"}),".\nUse use ",(0,l.jsx)(n.code,{children:"subquestion"})," tags to put more detailed information in our screen."]}),"\n",(0,l.jsxs)(n.p,{children:["Line 25 is new though, or at least this ",(0,l.jsx)(n.code,{children:"no label"})," is.  In ",(0,l.jsx)(n.code,{children:"hello_world2"}),"\nwe had the question label (",(0,l.jsx)(n.code,{children:"What is your name?"}),") here.  By replacing this\nlabel with ",(0,l.jsx)(n.code,{children:"no label"})," we tell Docassemble not to display a label in front\nof the question field.  This is useful in this example as the contents of\nthe ",(0,l.jsx)(n.code,{children:"subquestion"})," already contain instructions as to what to put in the field.\nOur label would have been redundant, so we use ",(0,l.jsx)(n.code,{children:"no label"})," to remove it."]}),"\n",(0,l.jsxs)(n.admonition,{title:"Let's talk about fields (baby)",type:"note",children:[(0,l.jsxs)(n.p,{children:["Using ",(0,l.jsx)(n.code,{children:"no label"})," is only one of many ways to customise a field.  Docassemble\ncomes with many different ",(0,l.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#fields%20options",children:"field options"}),"  Here are some\nother examples:"]}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Make a field ",(0,l.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#required",children:"optional"})]}),"\n",(0,l.jsxs)(n.li,{children:["Embed ",(0,l.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#hint",children:"helfpul hints"}),"\nin a field or ",(0,l.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#help",children:"in its label"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#show%20if",children:"Show"})," and\n",(0,l.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#hide%20if",children:"hide"})," fields dynamically"]}),"\n"]}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html",children:"Setting Variables"})," part of the\n",(0,l.jsx)(n.a,{href:"https://docassemble.org/docs.html",children:"Docassemble Manual"})," is your friend."]}),(0,l.jsx)(n.p,{children:"Also, don't forget to check the Example Blocks at the bottom of your Playground."}),(0,l.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_02/hello_world3-2.png"})]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);