"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[6378],{2012:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>f,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var n=t(5893),i=t(1151),a=t(9853),o=(t(6214),t(9245));const l={title:"Coding - List of Services"},r=void 0,d={id:"textbook/chapter_06/filtering/00-40",title:"Coding - List of Services",description:"The next part of our design is to set up the data and evaluate it.  This is a rather",source:"@site/docs/textbook/chapter_06/filtering/00-40.mdx",sourceDirName:"textbook/chapter_06/filtering",slug:"/textbook/chapter_06/filtering/00-40",permalink:"/textbook/docs/textbook/chapter_06/filtering/00-40",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Coding - List of Services"},sidebar:"textbookSidebar",previous:{title:"Coding - User questions",permalink:"/textbook/docs/textbook/chapter_06/filtering/00-30"},next:{title:"Coding - Evaluate against criteria",permalink:"/textbook/docs/textbook/chapter_06/filtering/00-50"}},c={},h=[{value:"The database",id:"the-database",level:2},{value:"Testing",id:"testing",level:2},{value:"About Table Blocks",id:"about-table-blocks",level:2},{value:"<code>row_item</code>",id:"row_item",level:3},{value:"The Age Range row",id:"the-age-range-row",level:3},{value:"The list data (Gender, Location and Family)",id:"the-list-data-gender-location-and-family",level:3}];function m(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return o||u("Tables",!1),o.ServiceTable||u("Tables.ServiceTable",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["The next part of our ",(0,n.jsx)(s.a,{href:"00-10",children:"design"})," is to set up the data and evaluate it.  This is a rather\nhefty part of our app and we will break this up into mulitple parts, as we did in the design."]}),"\n",(0,n.jsxs)(s.p,{children:["In this part we will set out the ",(0,n.jsx)(s.code,{children:"MJFservices"})," database."]}),"\n",(0,n.jsx)(s.h2,{id:"the-database",children:"The database"}),"\n",(0,n.jsxs)(s.p,{children:["In our design we made decisions on our ",(0,n.jsx)(s.a,{href:"00-10#define-a-list-of-services",children:"database structure"})," and even\nstarted writing code for ",(0,n.jsx)(s.code,{children:"MJFservices"}),".  Let's fill out ",(0,n.jsx)(s.code,{children:"MJFservices"})," with all the data in our table."]}),"\n",(0,n.jsx)(s.p,{children:"Let's keep our table handy for reference:"}),"\n",(0,n.jsx)(o.ServiceTable,{}),"\n",(0,n.jsxs)(s.p,{children:["Now, let's build out our code.  As per our ",(0,n.jsx)(s.a,{href:"00-20",children:"introduction"})," we are going to store our database in\n",(0,n.jsx)(s.code,{children:"services.yml"})]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yml",metastring:'title="services.yml" showLineNumbers',children:'---\nvariable name: MJFservices\nuse objects: True\ndata:\n  - name: ABC Services\n    website: https://abcsvc.org.au\n    min_age: 18\n    max_age: 65\n    gender:\n      - Male\n      - Female\n    location:\n      - North\n      - East\n    family:\n      - family\n      - single\n  - name: WH Youth\n    website: https://whyouth.org.au\n    min_age: 12\n    max_age: 17\n    gender:\n      - Male\n      - Female\n      - Other\n    location:\n      - South\n    family:\n      - single\n  - name: "St Mary\'s Shelter"\n    website: https://stmarys.org.au\n    min_age: 12\n    max_age: 999\n    gender:\n      - Female\n      - Other\n    location:\n      - North\n    family:\n      - single\n  - name: "MHI Men\'s Health"\n    website: https://mhimh.org.au\n    min_age: 18\n    max_age: 999\n    gender:\n      - Male\n    location:\n      - North\n      - West\n    family:\n      - single\n  - name: DE Family Shelter\n    website: https://defsupport.org.au\n    min_age: 18\n    max_age: 65\n    gender:\n      - Male\n      - Female\n    location:\n      - North\n      - East\n      - West\n      - South\n    family:\n      - family\n---\n'})}),"\n",(0,n.jsx)(s.h2,{id:"testing",children:"Testing"}),"\n",(0,n.jsxs)(s.p,{children:["As we did with our question variables we'd like to display our services data in our ",(0,n.jsx)(s.code,{children:"final_screen"}),"\nto make sure we have set our database out correctly.  We'll display the services in a table format\nas doing so makes it easier to check against the table ABC gave us."]}),"\n",(0,n.jsxs)(s.p,{children:["We have discussed ",(0,n.jsx)(s.a,{href:"/docs/textbook/chapter_02/00-42#displaying-output-in-a-table",children:"Markdown tables"})," previously.\nMarkdown tables are useful for displaying table output but, as we have our data in a\n",(0,n.jsx)(a.DisplayGlossaryItem,{item:"datablock"})," we can make use of a ",(0,n.jsxs)(s.a,{href:"https://docassemble.org/docs/initial.html#table",children:[(0,n.jsx)(s.code,{children:"table"})," block"]}),"\nwhich is simpler to create and less cluttered than a Markdown table."]}),"\n",(0,n.jsxs)(s.p,{children:["To summarise the Docassemble manual, a ",(0,n.jsx)(s.code,{children:"table"})," block allows us to set out the columns we'd like in our\ntable and the table's data source, and the table block will render the table for us."]}),"\n",(0,n.jsx)(s.p,{children:"So let's set up our table block first:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yml",metastring:'title="tests.yml" showLineNumbers',children:"---\ntable: services_test_table\nrows: MJFservices\ncolumns:\n  - Name: row_item['name']\n  - Website: row_item['website']\n  - Age Range: |\n      \"{} to {}\".format(row_item['min_age'], row_item['max_age'])\n  - Gender: row_item['gender']\n  - Locations: row_item['location']\n  - Family: row_item['family']\n---\n"})}),"\n",(0,n.jsxs)(s.p,{children:["And then we can call our ",(0,n.jsx)(s.code,{children:"services_test_table"})," from our ",(0,n.jsx)(s.code,{children:"final_screen"})]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yml",metastring:"showLineNumbers {15}",children:"---\n# This is our final screen\nevent: final_screen\nquestion: Final Screen\nsubquestion: |\n  Eventually the list of services will be displayed here\n\n  Our variables:\n\n  * ${MJFage}\n  * ${MJFgender}\n  * ${MJFlocation}\n  * ${MJFfamily}\n\n  ${services_test_table}\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n"})}),"\n",(0,n.jsxs)(s.p,{children:["We will also need to include ",(0,n.jsx)(s.code,{children:"services.yml"})," and ",(0,n.jsx)(s.code,{children:"tests.yml"})," in our ",(0,n.jsx)(s.code,{children:"include"})," block in ",(0,n.jsx)(s.code,{children:"main.yml"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yml",children:"---\ninclude:\n  - questions.yml\n  - services.yml\n  - tests.yml\n---\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Make these changes and run the app.  If you didn't delete the questions from ",(0,n.jsx)(s.code,{children:"final_screen"})," the app will\nask you the four user questions again.  It should then display the question values and the table:"]}),"\n",(0,n.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding4.png"}),"\n",(0,n.jsx)(s.p,{children:"The table doesn't look pretty (we'll sort that later) but it does the job."}),"\n",(0,n.jsx)(s.h2,{id:"about-table-blocks",children:"About Table Blocks"}),"\n",(0,n.jsxs)(s.p,{children:["We want to draw out a few properties of table blocks.  These are discussed in the ",(0,n.jsx)(s.a,{href:"https://docassemble.org/docs/initial.html#table",children:"manual"}),"\nbut it's worth discussing them in the context of our app."]}),"\n",(0,n.jsx)(s.h3,{id:"row_item",children:(0,n.jsx)(s.code,{children:"row_item"})}),"\n",(0,n.jsxs)(s.p,{children:["This is a special variable Docassemble creates with the table block.  Each row is placed into ",(0,n.jsx)(s.code,{children:"row_item"}),"\nas the table is rendered.  For our purposes all we need to know is that if we want to access data in\na table row we can use ",(0,n.jsx)(s.code,{children:"row_item"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Note also that each table row (ie: list item) is a dictionary, we can refer to the contents of each\nrow using dictionary keys, which is what we're doing here."}),"\n",(0,n.jsx)(s.h3,{id:"the-age-range-row",children:"The Age Range row"}),"\n",(0,n.jsxs)(s.p,{children:["In all the other rows we simply tell Docassemble to display the value of each key.  In the Age range we\nwant to display a string that says '",(0,n.jsx)(s.em,{children:"min_age"})," to ",(0,n.jsx)(s.em,{children:"max_age"}),"'.  We use a python string and\n",(0,n.jsx)(s.a,{href:"/docs/textbook/chapter_03/00-20#using-format",children:(0,n.jsx)(s.code,{children:"format()"})})," to join the two age values and display\nthem in our string."]}),"\n",(0,n.jsx)(s.h3,{id:"the-list-data-gender-location-and-family",children:"The list data (Gender, Location and Family)"}),"\n",(0,n.jsxs)(s.p,{children:["If you have run the app already you'll notice that the list data, such as gender, is displayed\nso that it reads as a sentence, with each item separated by commas and the last item separated\nby an 'and' eg: 'Male, Female and Other'.  This is one of the benefits of the ",(0,n.jsx)(s.code,{children:"use objects: True"}),"\nline we included in our ",(0,n.jsx)(a.DisplayGlossaryItem,{item:"datablock"}),".  Setting ",(0,n.jsx)(s.code,{children:"use objects"})," to\n",(0,n.jsx)(s.code,{children:"True"})," means that our lists are stored as ",(0,n.jsxs)(s.a,{href:"https://docassemble.org/docs/objects.html#DAList",children:[(0,n.jsx)(s.code,{children:"DAList"}),"s"]}),"\nand our dictionaries as ",(0,n.jsxs)(s.a,{href:"https://docassemble.org/docs/objects.html#DADict",children:[(0,n.jsx)(s.code,{children:"DADict"}),"s"]}),".  ",(0,n.jsx)(s.code,{children:"DAList"})," and\n",(0,n.jsx)(s.code,{children:"DADict"})," are Docassemble's enhanced versions of Python lists and dictionaries respectively.  They\ncome with extra functionality, one of these being to display output in a comma-separated sentence as\nwe have seen."]}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsxs)(s.p,{children:["One of the benefits of using ",(0,n.jsx)(s.code,{children:"DADict"})," is that we get to display selected locations using\nthe ",(0,n.jsx)(s.code,{children:"true_values()"})," method.  Had we been using a 'vanilla' Python dictionary we would\nhave had to write the equivalent code ourselves."]})})]})}function f(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}function u(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},6214:(e,s,t)=>{t.r(s),t.d(s,{F01:()=>o,F02:()=>r,F03:()=>c,F03a:()=>m,F04:()=>u,F05:()=>p,F05a:()=>g,F05b:()=>w,F06:()=>v,F06a:()=>k,F06b:()=>F,F07:()=>T});var n=t(5893),i=t(1151);function a(e){const s={mermaid:"mermaid",...(0,i.a)(),...e.components};return(0,n.jsx)(s.mermaid,{value:"flowchart TD\n    id1(Display a <b>list</b> of emergency<br>accommodation providers<br><b>tailored to</b> the <b>circumstances<br>of</b> each user)"})}function o(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}function l(e){const s={mermaid:"mermaid",...(0,i.a)(),...e.components};return(0,n.jsx)(s.mermaid,{value:"flowchart TD\n    id0(Ask user about their circumstances)\n    id0 --\x3e id1(Evaluate user's circumstances against list of services)\n    id1 --\x3e id2(Display list of relevant services)"})}function r(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}function d(e){const s={mermaid:"mermaid",...(0,i.a)(),...e.components};return(0,n.jsx)(s.mermaid,{value:"flowchart TD\n    id0(Ask user their age)\n    id1(Ask user their gender)\n    id2(Ask user for which locations<br>they are looking for services)\n    id3(Ask the user if they are<br>looking for accommodation for<br>themselves or their family)\n    \n    %% Invisible links so the boxes appear vertically\n    id0 ~~~ id1 ~~~ id2 ~~~ id3"})}function c(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}function h(e){const s={mermaid:"mermaid",...(0,i.a)(),...e.components};return(0,n.jsx)(s.mermaid,{value:"flowchart TD\n    id0(Ask user their age)\n    id1(Ask user their gender)\n    id2(Ask user for which locations<br>they are looking for services)\n    id3(Ask the user if they are<br>looking for accommodation for<br>themselves or their family)\n\n    co0(Name: <code>MJFage</code><br><code>datatype: integer</code>)\n    co1(Name: <code>MJFgender</code><br>Present genders as radio buttons)\n    co2(Name: <code>MJFlocation</code><br>Use checkboxes so<br>user can select<br>multiple locations)\n    co3(Name: <code>MJFfamily</code><br>Use <code>yesnoradio</code> or regular radio buttons)\n\n    \n    %% Invisible links so the boxes appear vertically\n    id0 ~~~ id1 ~~~ id2 ~~~ id3\n\n    co0 --\x3e id0\n    co1 --\x3e id1\n    co2 --\x3e id2\n    co3 --\x3e id3\n\n\n    %% Define styles for flowchart items.  We want to make comments yellow\n    %% and have a larger font size for regular items\n    classDef commentClass fill:#faffd6,text-align:left\n    classDef questionClass fill:#ffe6bc\n    classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n    classDef itemClass font-size:16pt\n    classDef leftListClass text-align:left\n\n    class co0,co1,co2,co3 commentClass\n"})}function m(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}function f(e){const s={mermaid:"mermaid",...(0,i.a)(),...e.components};return(0,n.jsx)(s.mermaid,{value:"flowchart TD\n    id0(Define a list of services)\n    id1(Evaluate user circumstances<br>against service criteria)\n\n    %% invisible links to stack vertically\n    id0 ~~~ id1"})}function u(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(f,{...e})}):f(e)}function x(e){const s={mermaid:"mermaid",...(0,i.a)(),...e.components};return(0,n.jsx)(s.mermaid,{value:"flowchart TD\n  id1(For each service in the list)\n  id1 --\x3e id2{{Does the service meet the user's circumstances?}}\n  id2 -- Yes --\x3e id3(Add the service to the display list)\n  id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function p(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(x,{...e})}):x(e)}function j(e){const s={mermaid:"mermaid",...(0,i.a)(),...e.components};return(0,n.jsx)(s.mermaid,{value:"flowchart TD\n  subgraph Loop\n    direction TB\n    id1(For each service in the list)\n    subgraph Loop_Body\n        direction TB\n        id2{{Does the service meet the user's circumstances?}}\n        id2 -- Yes --\x3e id3(Add the service to the display list)\n        id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n    end\n    id1 --\x3e Loop_Body\n  end\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function g(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(j,{...e})}):j(e)}function b(e){const s={mermaid:"mermaid",...(0,i.a)(),...e.components};return(0,n.jsx)(s.mermaid,{value:"flowchart TD\n  subgraph Loop\n    direction TB\n    id1(<code>for a_service in MJFservices:</code>)\n    subgraph Loop_Body\n        direction TB\n        id2{{Does the service meet the user's circumstances?}}\n        id2 -- Yes --\x3e id3(Add the service to the display list)\n        id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n    end\n    id1 --\x3e Loop_Body\n  end\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function w(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(b,{...e})}):b(e)}function y(e){const s={mermaid:"mermaid",...(0,i.a)(),...e.components};return(0,n.jsx)(s.mermaid,{value:"flowchart TD\n  subgraph Loop_Body\n      direction TB\n      id2{{Does the service meet the user's circumstances?}}\n      id2 -- Yes --\x3e id3(Add the service to the display list)\n      id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n  end\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function v(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(y,{...e})}):y(e)}function D(e){const s={mermaid:"mermaid",...(0,i.a)(),...e.components};return(0,n.jsx)(s.mermaid,{value:"flowchart TD\n  id1{{Is <code>MJFage</code> between the minimum and maximum age for <code>a_service</code>?}}\n  id2{{Is <code>MJFgender</code> one of the genders listed for <code>a_service</code>?}}\n  id3{{Do any of the locations in <code>MJFlocation</code> match<br>up with the list of locations in <code>a_service</code>?}}\n  id4{{Does <code>MJFfamily</code> match up with any of the<br>family list items in <code>a_service</code>?}}\n\n  id5{{Is the answer 'Yes' to all of the above questions?}}\n  id5 -- Yes --\x3e id6(Add the service to the display list)\n  id5 -- No --\x3e id7(Do not add the service<br>to the display list)\n\n  id1 ~~~ id2 ~~~ id3 ~~~ id4 ~~~ id5\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id1,id2,id3,id4,id5 questionClass"})}function k(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(D,{...e})}):D(e)}function _(e){const s={mermaid:"mermaid",...(0,i.a)(),...e.components};return(0,n.jsx)(s.mermaid,{value:"flowchart TD\n  id1(Ask the age question and store the result in <code>MJFage_ok</code>)\n  id2(Ask the gender question and store the result in <code>MJFgender_ok</code>)\n  id3(Ask the location question and store the result in <code>MJFlocation_ok</code>)\n  id4(Ask the age question and store the result in <code>MJFage_ok</code>)\n\n  id5{{Is each of <code>MJFage_ok</code>, <code>MJFgender_OK</code>, <code>MJFlocation_ok</code> and <code>MJFfamily_ok</code> equal to <code>True</code>?}}\n  id5 -- Yes --\x3e id6(Add the service to the display list)\n  id5 -- No --\x3e id7(Do not add the service<br>to the display list)\n\n  id1 ~~~ id2 ~~~ id3 ~~~ id4 ~~~ id5\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id1,id2,id3,id4,id5 questionClass"})}function F(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(_,{...e})}):_(e)}function C(e){const s={mermaid:"mermaid",...(0,i.a)(),...e.components};return(0,n.jsx)(s.mermaid,{value:"flowchart TD\n  id0(for each location selected by the user)\n  id0 --\x3e id1{{\"Is the location in <code>a_service['location']</code>?\"}}\n  id1 -- Yes --\x3e id2(Set <code>MJFlocation_ok</code> to <code>True</code>)\n  id1 -- No --\x3e id3(Set <code>MJFlocation_ok</code> to <code>False</code><br>but only if it hasn't already been set to <code>True</code>)\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id1 questionClass"})}function T(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(C,{...e})}):C(e)}},9245:(e,s,t)=>{t.r(s),t.d(s,{MappingTable:()=>r,ServiceTable:()=>o});var n=t(5893),i=t(1151);function a(e){const s={a:"a",...(0,i.a)(),...e.components};return(0,n.jsxs)("table",{className:"complexDataTableExamples",children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"Name"}),(0,n.jsx)("th",{children:"Website"}),(0,n.jsx)("th",{children:"Age limits"}),(0,n.jsx)("th",{children:"Genders"}),(0,n.jsx)("th",{children:"Locations"}),(0,n.jsx)("th",{children:"Family or Single"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"ABC Services"}),(0,n.jsx)("td",{children:(0,n.jsx)(s.a,{href:"https://abcsvc.org.au",children:"https://abcsvc.org.au"})}),(0,n.jsx)("td",{children:"18 - 65"}),(0,n.jsx)("td",{children:"Male, Female"}),(0,n.jsx)("td",{children:"North, East"}),(0,n.jsx)("td",{children:"Families, Singles"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"WH Youth"}),(0,n.jsx)("td",{children:(0,n.jsx)(s.a,{href:"https://whyouth.org.au",children:"https://whyouth.org.au"})}),(0,n.jsx)("td",{children:"12 - 17"}),(0,n.jsx)("td",{children:"Male, Female"}),(0,n.jsx)("td",{children:"South"}),(0,n.jsx)("td",{children:"Singles"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"St Mary's Shelter"}),(0,n.jsx)("td",{children:(0,n.jsx)(s.a,{href:"https://stmarys.org.au",children:"https://stmarys.org.au"})}),(0,n.jsx)("td",{children:"12 and over"}),(0,n.jsx)("td",{children:"Female"}),(0,n.jsx)("td",{children:"North"}),(0,n.jsx)("td",{children:"Singles"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"MHI Men's Health"}),(0,n.jsx)("td",{children:(0,n.jsx)(s.a,{href:"https://mhimh.org.au",children:"https://mhimh.org.au"})}),(0,n.jsx)("td",{children:"18 and over"}),(0,n.jsx)("td",{children:"Male"}),(0,n.jsx)("td",{children:"North, West"}),(0,n.jsx)("td",{children:"Singles"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"DE Family Shelter"}),(0,n.jsx)("td",{children:(0,n.jsx)(s.a,{href:"https://defsupport.org.au",children:"https://defsupport.org.au"})}),(0,n.jsx)("td",{children:"18 - 65"}),(0,n.jsx)("td",{children:"Male, Female"}),(0,n.jsx)("td",{children:"North, East, West, South"}),(0,n.jsx)("td",{children:"Families"})]})]})}function o(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}function l(e){const s={p:"p",...(0,i.a)(),...e.components};return(0,n.jsxs)("table",{className:"complexDataTableExamples",children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"Column Name"}),(0,n.jsx)("th",{children:"Key Name"}),(0,n.jsx)("th",{children:"Data type"}),(0,n.jsx)("th",{children:"Comments"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Name"}),(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"name"})}),(0,n.jsx)("td",{children:"String"}),(0,n.jsx)("td",{colspan:"2",children:"These first two keys store simple string data types"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Website"}),(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"website"})}),(0,n.jsx)("td",{children:"String"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Age limits"}),(0,n.jsxs)("td",{children:[(0,n.jsx)("code",{children:"min_age"})," and ",(0,n.jsx)("code",{children:"max_age"})]}),(0,n.jsx)("td",{children:"Integer"}),(0,n.jsx)("td",{children:(0,n.jsx)(s.p,{children:"It's easier for us to split out the age limit into minimum and\nmaximum age variables and test that the user's age falls inside\nthe min and max ages. We will need additional code to cope with\nthe 'and over' requirements in some of the data.  We will deal\nwith this when we code the age test."})})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Genders"}),(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"gender"})}),(0,n.jsxs)("td",{children:[(0,n.jsx)(s.p,{children:"A list of strings representing genders.  At a minimum we should\nhave"}),(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"Female"}),(0,n.jsx)("li",{children:"Male"}),(0,n.jsx)("li",{children:"Other"})]}),(0,n.jsx)(s.p,{children:"This will be driven by the data given to us by ABC."})]}),(0,n.jsx)("td",{children:(0,n.jsx)(s.p,{children:"A user will only be allowed to select one gender as a response."})})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Locations"}),(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"location"})}),(0,n.jsxs)("td",{children:[(0,n.jsx)(s.p,{children:"A list of locations."}),(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"North"}),(0,n.jsx)("li",{children:"South"}),(0,n.jsx)("li",{children:"East"}),(0,n.jsx)("li",{children:"West"})]})]}),(0,n.jsx)("td",{children:"It appears from the ABC data that this is suitable for their purposes"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Family or Single"}),(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"family"})}),(0,n.jsxs)("td",{children:[(0,n.jsx)(s.p,{children:"A list consisting of one or all of"}),(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"Family"}),(0,n.jsx)("li",{children:"Single"})]})]}),(0,n.jsx)("td",{children:(0,n.jsx)(s.p,{children:"Agencies that cater for all clients (ie: those looking for\naccommodation for themselves and those looking for accommodation\nfor themselves and their family) should have both items in their\ndata entry.  Otherwise, the appropriate list item is specified\nie: the data type will be a list containing one item."})})]})]})}function r(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);