"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[1534],{665:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var t=s(4848),i=s(8453),o=s(5901),a=s(2487);const l={title:"Vital Statistics - A More Sophisticated Example"},r=void 0,c={id:"textbook/chapter_02/00-60",title:"Vital Statistics - A More Sophisticated Example",description:"We've learnt lots of things over this chapter.  We can write code!  We can also:",source:"@site/docs/textbook/chapter_02/00-60.mdx",sourceDirName:"textbook/chapter_02",slug:"/textbook/chapter_02/00-60",permalink:"/textbook/docs/textbook/chapter_02/00-60",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Vital Statistics - A More Sophisticated Example"},sidebar:"textbookSidebar",previous:{title:"Hello World 5 - Introducing Jinja",permalink:"/textbook/docs/textbook/chapter_02/00-50"},next:{title:"Chapter 3. Variables, Logic and Code Blocks",permalink:"/textbook/docs/textbook/chapter_03/"}},d={},h=[{value:"The Code",id:"the-code",level:2},{value:"Lines 30 to 33",id:"lines-30-to-33",level:3},{value:"Lines 37 to 41",id:"lines-37-to-41",level:3},{value:"Lines 42 to 46",id:"lines-42-to-46",level:3},{value:"Line 43",id:"line-43",level:4},{value:"Line 44",id:"line-44",level:4},{value:"Line 45",id:"line-45",level:4},{value:"Line 46",id:"line-46",level:4},{value:"Lines 42 and 47 to 49",id:"lines-42-and-47-to-49",level:3},{value:"Lines 55 to 63",id:"lines-55-to-63",level:3},{value:"Line 13",id:"line-13",level:3},{value:"Line 14",id:"line-14",level:3},{value:"A Note About The Question Blocks",id:"a-note-about-the-question-blocks",level:2},{value:"Fixing the Bug",id:"fixing-the-bug",level:2}];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return a||m("Components",!1),a.DisplayChapter||m("Components.DisplayChapter",!0),a.DisplayDAButtons||m("Components.DisplayDAButtons",!0),a.DisplayGlossaryItem||m("Components.DisplayGlossaryItem",!0),a.DisplayImage||m("Components.DisplayImage",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"We've learnt lots of things over this chapter.  We can write code!  We can also:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ask questions;"}),"\n",(0,t.jsxs)(n.li,{children:["use ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"markdown",upper:!0})," to format and\ndisplay text;"]}),"\n",(0,t.jsxs)(n.li,{children:["we know the difference between ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"mandatoryblock",plural:!0}),"\nand regular ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"questionblock",plural:!0}),";"]}),"\n",(0,t.jsx)(n.li,{children:"We can use tables to set out our final screens;"}),"\n",(0,t.jsx)(n.li,{children:"We can present choices in a drop-down; and"}),"\n",(0,t.jsx)(n.li,{children:"We can create custom word and PDF documents based on the answers we receive."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The code below is for an app called 'Vital Statistics'.  It presents some important\ninformation about the user and in the process makes more use of what we have\nlearnt so far.  The code uses a lot of what we have learnt over the course of\nthis chapter and also introduces a few new concepts.  Let's work through it."}),"\n",(0,t.jsx)(n.h2,{id:"the-code",children:"The Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="C1_06_vital_statistics.yml" showLineNumbers',children:"---\nmandatory: True\nquestion: Vital Statistics\nsubquestion: |\n  Thanks for completing the Vital Statistics Survey.\n  We have collected this data from you\n  \n  Information|Your Input\n  -----------|----------\n  Your name             | ${ MJFsalutation } ${ MJFfirstname } ${ MJFlastname }\n  Your age              | ${ MJFage }\n  Are you employed?     | ${ MJFisemployed }\n  Your annual income    | ${ currency(MJFannualincome) }\n  Your favourite hobbies| ${ MJFhobbies.true_values() }\nbuttons:\n  - I'm done: exit\n  - Do it again!: restart\n---\nquestion: What is your name?\nfields:\n  - Salutation: MJFsalutation\n    choices:\n      - Dr\n      - Mr\n      - Mrs\n      - Ms\n  - First Name: MJFfirstname\n  - Last Name: MJFlastname\n---\nquestion: How old are you?\nfields:\n  - no label: MJFage\n    datatype: integer\n---\nquestion: Employment and Income\nfields:\n  - Are you employed?: MJFisemployed\n    datatype: radio\n    choices:\n      - Yes\n      - No\n  - What is your {income}?: MJFannualincome\n    datatype: currency\n    show if: \n      variable: MJFisemployed\n      is: 'Yes'\nterms:\n  income: |\n    Your income should be your gross (ie: before tax) income\n---\nquestion: Hobbies\nsubquestion: |\n  Please select all of your favourite hobbies.\nfields:\n  - no label: MJFhobbies\n    datatype: checkboxes\n    choices:\n      - Flying\n      - Running\n      - Playing music\n      - Writing code\n      - Studying (Yes, really!)\n      - Socialising\n---\n"})}),"\n",(0,t.jsx)(n.h3,{id:"lines-30-to-33",children:"Lines 30 to 33"}),"\n",(0,t.jsxs)(n.p,{children:["We're starting at line 30 because this is where some of the new concepts are.\nIf you read through lines 1 to 29 you'll see a mandatory question block that\nlooks very similar to our ",(0,t.jsx)(n.a,{href:"./00-50",children:"Hello World 5"})," example.  The table has\ndifferent information (and we'll come back to that) but otherwise this code\nis very similar to ",(0,t.jsx)(n.code,{children:"hello_world5.yml"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Let's look at lines 30 to 33"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"question: How old are you?\nfields:\n  - no label: MJFage\n    datatype: integer\n"})}),"\n",(0,t.jsxs)(n.p,{children:["First, we have ",(0,t.jsxs)(n.a,{href:"./00-30#the-second-question-block",children:["seen ",(0,t.jsx)(n.code,{children:"no label"})," before"]}),".\nWhat we haven't seen however is line 30:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"    dataype: integer\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Firstly, we can see that the word ",(0,t.jsx)(n.code,{children:"datatype"})," is aligned with ",(0,t.jsx)(n.code,{children:"no label"}),".  You'll\nrecall that line 29 has the dash-label-variable format that we have seen\n",(0,t.jsx)(n.a,{href:"./00-42#presenting-choices-in-a-question",children:"before"})," and which 'declares' a\nvariable.  That is, line 29 is telling Docassemble how to ask a question so\nwe can get a value for a variable, ",(0,t.jsx)(n.code,{children:"MJFage"})," in this case."]}),"\n",(0,t.jsxs)(n.p,{children:["Line 30, because of the alignment and the lack of a dash, is tied to line 29.\nLine 30 is giving us more information about variable declared at line 29.\nWe say that line 30 ",(0,t.jsx)(n.em,{children:"describes"}),", or ",(0,t.jsx)(n.em,{children:"modifies"}),",\nthe variable declaration at line 29."]}),"\n",(0,t.jsxs)(n.p,{children:["Line 30 is sets the 'data type' of the variable ",(0,t.jsx)(n.code,{children:"MJFage"})," to be an integer."]}),"\n",(0,t.jsxs)(n.admonition,{title:"What is a Data Type?",type:"info",children:[(0,t.jsxs)(n.p,{children:["As we said ",(0,t.jsx)(n.a,{href:"./00-20#variables",children:"early on"}),", ",(0,t.jsx)(n.code,{children:"MJFage"})," is a variable and we\ncan 'put stuff in' a variable.  By stuff we mean data.  ",(0,t.jsx)(n.strong,{children:"We store data\nin a variable"}),"."]}),(0,t.jsxs)(n.p,{children:["We can have different types of data.  Up until now we have been storing text,\nor ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"string",plural:!0})," in our variables.\nStrings are the default data type.  There are also other data types, as we'll\nsee as we work our way through this textbook."]}),(0,t.jsxs)(n.p,{children:["Line 30 sets the data type to be an ",(0,t.jsx)(n.strong,{children:"integer"}),".\nAn ",(0,t.jsxs)(n.a,{href:"https://docassemble.org/docs/fields.html#numbers",children:[(0,t.jsx)(n.strong,{children:"integer"})," data type"]}),"\nallows us to store whole numbers only (ie: 1, 2,\n3, 4 etc).  We can't store a string in an integer data type.  If we do we'll\nget an error:"]}),(0,t.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_02/vitalstatistics-1.png"}),(0,t.jsxs)(n.p,{children:["Using a data type can be useful to control, or ",(0,t.jsx)(n.em,{children:"validate"})," the input a user\nenters.  In our case, we are forcing the user to enter a number and not words\ninto this text box.  This could come in handy later if we, say, wanted to\ncheck the number was bigger or smaller than another number.  For example, we\nmight want to check the age to make sure a user is over 18 years old and\ntherefore an adult."]})]}),"\n",(0,t.jsx)(n.h3,{id:"lines-37-to-41",children:"Lines 37 to 41"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"  - Are you employed?: MJFisemployed\n    datatype: radio\n    choices:\n      - Yes\n      - No\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here we again see a variable declaration at line 37, with a ",(0,t.jsx)(n.code,{children:"datatype"})," modifier\nat line 38.  This time, the data type is ",(0,t.jsx)(n.code,{children:"radio"}),".\nA ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#radio",children:"radio data type"})," presents\na list of choices to the user and requires them to select only one choice."]}),"\n",(0,t.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_02/vitalstatistics-2.png"}),"\n",(0,t.jsxs)(n.p,{children:["This means only the values ",(0,t.jsx)(n.code,{children:"Yes"})," or ",(0,t.jsx)(n.code,{children:"No"})," can be placed into ",(0,t.jsx)(n.code,{children:"MJFisemployed"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Yes"})," and ",(0,t.jsx)(n.code,{children:"No"})," are ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"string"})," values.\nAs we'll see further in this text book, when we want to ask a 'yes or no'\nquestion, a better way to do so is to use a ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"boolean"}),"\ndata type."]})}),"\n",(0,t.jsx)(n.h3,{id:"lines-42-to-46",children:"Lines 42 to 46"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"  - What is your {income}?: MJFannualincome\n    datatype: currency\n    show if: \n      variable: MJFisemployed\n      is: 'Yes'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We will discuss the braces (",(0,t.jsx)(n.code,{children:"{}"}),") in line 42 in the next section."]}),"\n",(0,t.jsx)(n.h4,{id:"line-43",children:"Line 43"}),"\n",(0,t.jsxs)(n.p,{children:["We've seen two different ",(0,t.jsx)(n.code,{children:"datatype"}),"s so far and line 43 introduces a third:\n",(0,t.jsx)(n.code,{children:"currency"}),".  The ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#currency",children:"currency"}),"\ndata type is used, unsurprisingly, to display money amounts.  It forces the\nuser to enter a number with two or more digits after the decimal point.  If\nmore than two digits are entered, they are rounded up to two digits, so that\nthis:"]}),"\n",(0,t.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_02/vitalstatistics-4.png"}),"\n",(0,t.jsx)(n.p,{children:"Is rounded to this:"}),"\n",(0,t.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_02/vitalstatistics-5.png"}),"\n",(0,t.jsxs)(n.p,{children:["Just like the ",(0,t.jsx)(n.code,{children:"integer"})," data type, it is not possible to enter non-integer\nvalues, such as characters:"]}),"\n",(0,t.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_02/vitalstatistics-6.png"}),"\n",(0,t.jsx)(n.p,{children:"or even the dollar sign!"}),"\n",(0,t.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_02/vitalstatistics-7.png"}),"\n",(0,t.jsx)(n.h4,{id:"line-44",children:"Line 44"}),"\n",(0,t.jsxs)(n.p,{children:["Line 44, like line 43 above it, are aligned with the label on line 42.  As\n",(0,t.jsx)(n.a,{href:"./00-60#lines-30-to-33",children:"already discussed"}),", this means that line 44 modifies\nline 42.  In this case, the ",(0,t.jsxs)(n.a,{href:"https://docassemble.org/docs/fields.html#show%20if",children:[(0,t.jsx)(n.code,{children:"show if"})," statement"]}),"\ntells Docassemble only to\ndisplay Line 42 if the criteria set out on lines 45 and 46 are met."]}),"\n",(0,t.jsx)(n.h4,{id:"line-45",children:"Line 45"}),"\n",(0,t.jsxs)(n.p,{children:["This is the first part of the criterion.  The ",(0,t.jsx)(n.code,{children:"variable:"})," tag tells Docassemble\nthat it must check the value of the variable (in this case ",(0,t.jsx)(n.code,{children:"MJFisemployed"}),")."]}),"\n",(0,t.jsx)(n.h4,{id:"line-46",children:"Line 46"}),"\n",(0,t.jsxs)(n.p,{children:["This tells Docassemble what the value of the variable specified in line 45 should\ncontain.  Line 46 is saying that value should be ",(0,t.jsx)(n.code,{children:"Yes"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Therefore, lines 44, 45 and 46 together tell Docassemble that the variable set\nout on line 42 should only be displayed if the value of ",(0,t.jsx)(n.code,{children:"MJFisemployed"})," is set\nto ",(0,t.jsx)(n.code,{children:"Yes"}),".  If we select the ",(0,t.jsx)(n.code,{children:"Yes"})," radio button, we can see that the question\nis automatically displayed:"]}),"\n",(0,t.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_02/vitalstatistics-8.png"}),"\n",(0,t.jsxs)(n.p,{children:["and if we select ",(0,t.jsx)(n.code,{children:"No"})," for ",(0,t.jsx)(n.code,{children:"MJFisemployed"})," then the question is hidden:"]}),"\n",(0,t.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_02/vitalstatistics-9.png"}),"\n",(0,t.jsx)(n.p,{children:"This is a good way of displaying to a user only the relevant questions in an\napplication."}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"show if"})," is a great way to control what information is displayed to\na user.  In this app if the user is not employed and so there is no point asking\nthem for their income. Using ",(0,t.jsx)(n.code,{children:"show if"})," is an effective way of hiding the income\nquestion in a context where it would be redundant."]}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"However"}),", what happens if, in your final screen, you decide to display a\nvalue for ",(0,t.jsx)(n.code,{children:"MJFannualincome"})," if a user says they are not employed?"]}),(0,t.jsx)(n.p,{children:"Copy the code into your playground, run it and see what happens.  We'll cover\nthis issue further down this page."})]}),"\n",(0,t.jsx)(n.h3,{id:"lines-42-and-47-to-49",children:"Lines 42 and 47 to 49"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"  - What is your {income}?: MJFannualincome\n...\nterms:\n  income: |\n    Your income should be your gross (ie: before tax) income\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The braces (",(0,t.jsx)(n.code,{children:"{}"}),") surrounding the word ",(0,t.jsx)(n.code,{children:"income"})," tell Docassemble to look for\na ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/modifiers.html#terms",children:"term"}),".  Terms are used\nto display pop-up text when the word is clicked on:"]}),"\n",(0,t.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_02/vitalstatistics-3.png"}),"\n",(0,t.jsx)(n.p,{children:"Terms are a great way to display pop-up help text."}),"\n",(0,t.jsx)(n.h3,{id:"lines-55-to-63",children:"Lines 55 to 63"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"  - no label: MJFhobbies\n    datatype: checkboxes\n    choices:\n      - Flying\n      - Running\n      - Playing music\n      - Writing code\n      - Studying (Yes, really!)\n      - Socialising\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Line 55 is yet another variable declaration.  It's followed by a ",(0,t.jsx)(n.code,{children:"datatype"}),"\nmodifier in line ",(0,t.jsx)(n.strong,{children:"56"}),".  This time, the data type is ",(0,t.jsx)(n.code,{children:"checkboxes"}),".  The\n",(0,t.jsxs)(n.a,{href:"https://docassemble.org/docs/fields.html#fields%20checkboxes",children:[(0,t.jsx)(n.code,{children:"checkboxes"})," datatype"]}),"\ndisplays a list wich checkboxes.  A user can tick multiple boxes and which values\nhave been ticked (and not ticked) are stored in ",(0,t.jsx)(n.code,{children:"MJFhobbies"})," (in this case)."]}),"\n",(0,t.jsxs)(n.p,{children:["We have seen the ",(0,t.jsx)(n.code,{children:"choices"})," line that is line ",(0,t.jsx)(n.strong,{children:"57"})," a few times before, for\ndisplaying a ",(0,t.jsx)(n.a,{href:"./00-42#lines-35-to-38",children:"drop-down menu"})," and also for the\n",(0,t.jsx)(n.a,{href:"./00-60#lines-37-to-41",children:"radio buttons"})," we discussed above.  As our data type\nis ",(0,t.jsx)(n.code,{children:"checkboxes"}),", the ",(0,t.jsx)(n.code,{children:"choices"})," to be displayed will be the items that make up\nthe checkbox list."]}),"\n",(0,t.jsxs)(n.p,{children:["And, finally, we can see these items in lines ",(0,t.jsx)(n.strong,{children:"58 to 63"}),"."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["We're getting a little ahead of ourselves here.  You'll notice that this is\nthe first time you'll have come across a variable (",(0,t.jsx)(n.code,{children:"MJFhobbies"}),") that will\nhave stored in it ",(0,t.jsx)(n.em,{children:"multiple"})," data. In this case we are storing a\nthe list of choices along\nwith information about whether they have been selected or not."]}),(0,t.jsxs)(n.p,{children:["It ",(0,t.jsx)(n.em,{children:"is"})," possible to store more than one thing in a variable. We will cover\nhow and why we do this in ",(0,t.jsx)(a.DisplayChapter,{chapter:"chapter_05"})]})]}),"\n",(0,t.jsx)(n.h3,{id:"line-13",children:"Line 13"}),"\n",(0,t.jsx)(n.p,{children:"Yes, we're skipping back up to the top of our code."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"  Your annual income    | ${ currency(MJFannualincome) }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This line displays a row of data in the ",(0,t.jsx)(n.a,{href:"./00-42#displaying-output-in-a-table",children:"table"}),"\nwhich starts in line 8.  The first column has text (",(0,t.jsx)(n.code,{children:"Your annual income"}),") and the\nsecond column contains some Mako (",(0,t.jsx)(n.code,{children:"${ ... }"}),").  The interesting part of line\n13 is this ",(0,t.jsx)(n.code,{children:"currency"})," and parentheses that surround our ",(0,t.jsx)(n.code,{children:"MJFannualincome"}),"\nvariable.  This is a ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"function"}),".\nIt's called, unsurprisingly, the 'currency function', or the\n'currency() function'. The currency function takes a number (ie: an\n",(0,t.jsx)(n.code,{children:"integer"})," datatype or a ",(0,t.jsx)(n.code,{children:"currency"})," datatype) and displays that number as\na currency, ie: with a ",(0,t.jsx)(n.code,{children:"$"})," sign and the number printed to two decimal places."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Try removing the ",(0,t.jsx)(n.code,{children:"currency("})," and the ",(0,t.jsx)(n.code,{children:")"})," that surround ",(0,t.jsx)(n.code,{children:"MJFannualincome"}),"\nin line 13 and run the code.  See what happens."]})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["By placing parentheses (",(0,t.jsx)(n.code,{children:"()"}),") after the word\n'currency' we're differentiating the function from the regular word but\nalso from the datatype.  It is very common practice in IT to append function\nnames with ",(0,t.jsx)(n.code,{children:"()"}),"."]})}),"\n",(0,t.jsx)(n.admonition,{title:"What's a Function?",type:"info",children:(0,t.jsxs)(n.p,{children:["For the purpose of this textbook we will consider functions to be bits of\ncode that we can use to manipulate our variables.  For example, we can use\nfunctions to ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/functions.html#currency",children:"display a number as a currency"}),",\nto ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/functions.html#format_date",children:"format dates"})," and\nmany other things.  Docassemble has an\n",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/functions.html",children:"extensive library"})," of functions\nthat we can use to manipluate our data."]})}),"\n",(0,t.jsx)(n.h3,{id:"line-14",children:"Line 14"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"  Your favourite hobbies| ${ MJFhobbies.true_values() }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Again, we have something we haven't seen before in our Mako.  In this case\nwe have ",(0,t.jsx)(n.code,{children:".true_values()"})," appended to ",(0,t.jsx)(n.code,{children:"MJFhobbies"}),".",(0,t.jsx)(n.br,{}),"\n","This is called a ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"method"}),".  It's a bit\nlike a functionn, in that it helps us manipulate variable, but a method is\nattached to a variable.  In this case, the ",(0,t.jsx)(n.code,{children:"true_values()"})," method will display\nthe values in our checkbox list that have been selected as a nice\ncomma-separated list."]}),"\n",(0,t.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_02/vitalstatistics-10.png"}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.p,{children:"The difference between functions and methods and their syntax is something\nthat is beyond the scope of this textbook.  All you need to know is that\nfunctions look like this:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"function(variable)\n"})}),(0,t.jsx)(n.p,{children:"and methods look like this:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"variable.method()\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"a-note-about-the-question-blocks",children:"A Note About The Question Blocks"}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.p,{children:"Up to now we have looked at code examples with only one or two question\nblocks in them.  Our example above has five question blocks.  The first\nis a mandatory block and the other four are regular question blocks."}),(0,t.jsxs)(n.p,{children:["Have a look through our ",(0,t.jsx)(n.a,{href:"./00-20#execution-order",children:"previous discussion"})," about\nthe order in which Docassemble executes code and try to apply that logic to\nthis Vital Statistics code."]})]}),"\n",(0,t.jsx)(n.h2,{id:"fixing-the-bug",children:"Fixing the Bug"}),"\n",(0,t.jsxs)(n.p,{children:["As alluded to ",(0,t.jsx)(n.a,{href:"./00-60#line-13",children:"earlier"})," there's a bug in this code."]}),"\n",(0,t.jsxs)(n.p,{children:["The code runs fine (I hope you've tried it!) but if you select 'No' to\nthe 'Are you employed' question and\npress ",(0,t.jsx)(a.DisplayDAButtons,{button:o.K1,button_text:"Continue"}),"\nnothing happens.  Why is this?"]}),"\n",(0,t.jsx)(n.p,{children:"Let's go back to the code and look at the mandatory block."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nmandatory: True\nquestion: Vital Statistics\nsubquestion: |\n  Thanks for completing the Vital Statistics Survey.\n  We have collected this data from you\n  \n  Information|Your Input\n  -----------|----------\n  Your name             | ${ MJFsalutation } ${ MJFfirstname } ${ MJFlastname }\n  Your age              | ${ MJFage }\n  Are you employed?     | ${ MJFisemployed }\n  Your annual income    | ${ currency(MJFannualincome) }\n  Your favourite hobbies| ${ MJFhobbies.true_values() }\nbuttons:\n  - I'm done: exit\n  - Do it again!: restart\n---\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As we know, Docassemble works its way through the mandatory block line by line, top to bottom.\nAs it sees ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"mako",upper:!0})," blocks it processes the necessary\n",(0,t.jsx)(a.DisplayGlossaryItem,{item:"questionblock",plural:!0})," to get the values it needs to display the\noutput."]}),"\n",(0,t.jsxs)(n.p,{children:["In our example, Docassemble will come across ",(0,t.jsx)(n.code,{children:"MJFsalutation"})," first.  It needs a value for that\nvariable, so it finds and processes the question block at line 19.  In the process it also\ncollects answers to ",(0,t.jsx)(n.code,{children:"MJFfirstname"})," and ",(0,t.jsx)(n.code,{children:"MJFlastname"})," as both of these are in the same question\nblock."]}),"\n",(0,t.jsxs)(n.p,{children:["The next Mako blocks contain ",(0,t.jsx)(n.code,{children:"MJFfirstname"})," and ",(0,t.jsx)(n.code,{children:"MJFlastname"}),".  Docassemble already has these\n(as per above!) and doesn't ask the question block on line 19 again."]}),"\n",(0,t.jsxs)(n.p,{children:["Now we go to the next line.  Docassemble sees a Mako for ",(0,t.jsx)(n.code,{children:"MJFage"}),".  It then finds and processes\nthe question block on line 30 to get the user's age.  Next line it sees ",(0,t.jsx)(n.code,{children:"MJFisemployed"}),", so it\nprocesses the question block on line 35.  Now our problems start."]}),"\n",(0,t.jsxs)(n.p,{children:["If we answer ",(0,t.jsx)(n.code,{children:"Yes"})," to the employment question the program runs fine.  If we answer ",(0,t.jsx)(n.code,{children:"No"})," then\nthe program stops here.  Why?  Well, it's because the ",(0,t.jsx)(n.em,{children:"next"})," line in the mandatory block contains\nMako requring a value for ",(0,t.jsx)(n.code,{children:"MJFannualincome"}),".  But, if we say we're not employed the question for\n",(0,t.jsx)(n.code,{children:"MJFannualincome"})," (on lines 42 to 46) is never asked.  This is because the ",(0,t.jsx)(n.code,{children:"show if"})," only displays\nthis question if ",(0,t.jsx)(n.code,{children:"MJFisemployed"})," is set to ",(0,t.jsx)(n.code,{children:"Yes"}),".  Here's our problem.  We can never move past\nthis point when we're not employed."]}),"\n",(0,t.jsxs)(n.p,{children:["When we use ",(0,t.jsx)(n.code,{children:"show if"})," and other conditional displays we need to make sure we account for the\ncase where the variable is never populated.  There are a number of ways to do this but for now\nwhat we'll do is hide line 13 if we're not employed."]}),"\n",(0,t.jsxs)(n.p,{children:["We hide line 13 by wrapping it in an ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"ifstatement"}),".  That is,\nwe'll tell Docassemble that ",(0,t.jsx)(n.em,{children:"if"})," we are employed ",(0,t.jsx)(n.em,{children:"then"})," display line 13, and by implication\nif we're not employed then line 13 will be skipped.  Our new code will look something like\nthis:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nmandatory: True\nquestion: Vital Statistics\nsubquestion: |\n  Thanks for completing the Vital Statistics Survey.\n  We have collected this data from you\n  \n  Information|Your Input\n  -----------|----------\n  Your name             | ${ MJFsalutation } ${ MJFfirstname } ${ MJFlastname }\n  Your age              | ${ MJFage }\n  Are you employed?     | ${ MJFisemployed }\n  // highlight-next-line\n  %if MJFisemployed == 'Yes': \n  Your annual income    | ${ currency(MJFannualincome) }\n  // highlight-next-line\n  %endif\n  Your favourite hobbies| ${ MJFhobbies.true_values() }\nbuttons:\n  - I'm done: exit\n  - Do it again!: restart\n---\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Our line 13 is now line 14.  It is wrapped with a ",(0,t.jsx)(n.code,{children:"%if"})," statement.  That statements says\nthat if the value of ",(0,t.jsx)(n.code,{children:"MJFisemployed"})," is equal to ",(0,t.jsx)(n.code,{children:"Yes"})," then carry out the instructions between\nthe ",(0,t.jsx)(n.code,{children:"%if"})," and ",(0,t.jsx)(n.code,{children:"%endif"})," lines.  In this case, the instructions are to display the\n",(0,t.jsx)(n.code,{children:"MJFannualincome"})," line."]}),"\n",(0,t.jsxs)(n.p,{children:["Try updating your code and insert the ",(0,t.jsx)(n.code,{children:"%if"}),"/",(0,t.jsx)(n.code,{children:"%endif"})," statements as per above.  Run your application\nand this time say that you are not employed.  The application should now run to completion."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["We cover ",(0,t.jsx)(n.code,{children:"%if"})," statements in more detail in ",(0,t.jsx)(a.DisplayChapter,{chapter:"chapter_04"}),".  If you're\nconfused as to why we use ",(0,t.jsx)(n.code,{children:"=="})," instead of ",(0,t.jsx)(n.code,{children:"="})," to check if ",(0,t.jsx)(n.code,{children:"MJFisemployed"})," is equal to ",(0,t.jsx)(n.code,{children:"Yes"})," then\ncheck out ",(0,t.jsx)(n.a,{href:"/docs/textbook/chapter_03/00-30",children:"Testing Variables"}),"."]})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);