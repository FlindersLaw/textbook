"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[6078],{9657:(e,n,t)=>{t.d(n,{ZP:()=>h,TN:()=>l,d$:()=>d,Rk:()=>c});var s=t(5893),i=t(1151),o=t(9853);function a(e){const n={a:"a",li:"li",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(o.DisplayChapter,{chapter:"chapter_05",pinpoint:"00-40",text:"Dictionaries"}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/recipes/templates",children:"Templates"})}),"\n"]})}const l="Exercise 4c",c=(0,s.jsx)((function(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}),{}),d=[{value:"Background",id:"background",level:2},{value:"Your Task",id:"your-task",level:2},{value:"Code",id:"code",level:2}];function r(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,s.jsxs)(n.p,{children:["In this exercise we're going to start looking at how to deal with ",(0,s.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#fields%20checkboxes",children:"checkboxes"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Checkboxes are Dictionaries (or ",(0,s.jsxs)(n.a,{href:"https://docassemble.org/docs/objects.html#DADict",children:[(0,s.jsx)(n.code,{children:"DADict"}),"s"]})," to be\nmore precise).  The key for each dictionary item is usually the text displayed to the user,\nand the value being either ",(0,s.jsx)(n.code,{children:"True"})," or ",(0,s.jsx)(n.code,{children:"False"})," depending on whether the checkbox item has been\nselected or not."]}),"\n",(0,s.jsxs)(n.p,{children:["Like lists, we can ",(0,s.jsx)(n.a,{href:"/docs/textbook/chapter_05/00-40#iteration",children:"iterate over dictionaries"}),", which is what\nwe'll do in this exercise."]}),"\n",(0,s.jsxs)(n.p,{children:["Because our dictionaries actually are the ",(0,s.jsx)(n.code,{children:"DADict"})," datatype we get some extra features over 'vanilla'\nPython dictionaries.  Specifically, we get a ",(0,s.jsx)(n.code,{children:"true_values()"})," method that we can use to generate a list\nof the selected dictionary items."]}),"\n",(0,s.jsxs)(n.p,{children:["In the example code below we've introduced a new question  block which displays the checkboxes and\nstores the results in ",(0,s.jsx)(n.code,{children:"CWpeople"}),".  The ",(0,s.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#choices",children:"choices"}),"\nfor the ",(0,s.jsx)(n.code,{children:"CWpeople"})," are supplied by a ",(0,s.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#code",children:(0,s.jsx)(n.code,{children:"code"})}),"\nspecifier which pull in our ",(0,s.jsx)(n.code,{children:"display_list"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"your-task",children:"Your Task"}),"\n",(0,s.jsx)(n.p,{children:"You need to complete these three parts to complete your task:"}),"\n",(0,s.jsx)(n.p,{children:"Modify the example code and:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["create a ",(0,s.jsx)(n.code,{children:"template"})," block that will display a list of all the ",(0,s.jsx)(n.em,{children:"selected"})," names as a bullet list;"]}),"\n",(0,s.jsxs)(n.li,{children:["create another ",(0,s.jsx)(n.code,{children:"template"})," that will display text if no names are selected; and"]}),"\n",(0,s.jsx)(n.li,{children:"modify the code to call the relevant template depending on whether any names are selected."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["You can include ",(0,s.jsx)(n.code,{children:"%for"})," loops and ",(0,s.jsx)(n.code,{children:"%if"})," statements in templates.  Templates work in a similar\nway to content in a ",(0,s.jsx)(n.code,{children:"subquestion"})," part of a ",(0,s.jsx)(o.DisplayGlossaryItem,{item:"questionblock"}),"."]})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Your code is starting to get more sophisticated.  You might want to consider\n",(0,s.jsx)(n.a,{href:"/docs/recipes/structuring_code",children:"structuring your code"})," to help you stay organised."]})}),"\n",(0,s.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,s.jsx)(n.p,{children:"Copy and paste this example code into your Playground and modify it to complete your task."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"# Coding Exercise 4c\n#\n# Iteration and Checkboxes\n---\nobjects:\n  - display_list: DAList.using(auto_gather=False)\n---\nmandatory: True\nquestion: Coding Workshop 4c\nsubquestion: |\n  1. Display the selected names in `CWpeople` as`\n  a bullet list. \n  2. Display a special screen if no names are selected.\n\n  ${CWpeople}\n\nbuttons:\n  - Exit: exit\n---\nquestion: Select people\nfields:\n  - Select any number of people: CWpeople\n    datatype: checkboxes\n    choices:\n      code: |\n        display_list\n---\n# This code block defines the list with the \n# items to display\ncode: |\n  # Always clear our the list before you start work\n  # on it in a code block\n  display_list.clear()\n\n  # Add the data\n  display_list.append('Ida Noe')\n  display_list.append('Hugo First'),\n  display_list.append('Moda Lawn'),\n  display_list.append('Kate Jupp'),\n  display_list.append('Ayfor Gott'),\n  display_list.append('Justin Thyme'),\n  display_list.append('Ray Member'),\n  display_list.append('Studie Harde'),\n  display_list.append('Slacke Hearse')\n\n  # Finish by setting gathered to True\n  display_list.gathered = True\n---\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},1480:(e,n,t)=>{t.d(n,{ZP:()=>p,TN:()=>c,d$:()=>r,Rk:()=>d});var s=t(5893),i=t(1151),o=t(9853),a=t(9657);function l(e){const n={li:"li",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(o.DisplayChapter,{chapter:"chapter_05",pinpoint:"00-20#list-length",text:"List Length"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(o.DisplayChapter,{chapter:"chapter_02",pinpoint:"00-42#displaying-output-in-a-table",text:"Markdown tables"}),"\n"]}),"\n"]})}const c="Exercise 4d",d=(0,s.jsx)((function(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}),{}),r=[{value:"Ex4d",id:"ex4d",level:2},{value:"Background",id:"background",level:2},{value:"Task",id:"task",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"ex4d",children:"Ex4d"}),"\n",(0,s.jsx)(n.p,{children:"Modify 4d to display:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A line stating how many items are selected and how many are not selected"}),"\n",(0,s.jsxs)(n.li,{children:["All items displayed in a table, along with whether they have been selected or not","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["a challenge would be to replace ",(0,s.jsx)(n.code,{children:"True"})," and ",(0,s.jsx)(n.code,{children:"False"})," with meaningful words"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"If no items are selected then display text stating as much"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,s.jsx)(n.p,{children:"In this exercise we'll start getting a little more sophisticated as to how\nwe display our results."}),"\n",(0,s.jsxs)(n.p,{children:["This exercise is based on your code from ",(0,s.jsx)(n.a,{href:"cw4c",children:a.TN}),".  You must have completed\n",a.TN," before you start this exercise."]}),"\n",(0,s.jsx)(n.h2,{id:"task",children:"Task"}),"\n",(0,s.jsx)(n.p,{children:"Your app should be modified to behave as follows:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The final screen should display a line summarising how many names\nwere selected and how many were not."}),"\n",(0,s.jsx)(n.li,{children:"The final screen should also display the list of names in a table,\nwith the first column being the name and the second being the selection\nstatus."}),"\n",(0,s.jsxs)(n.li,{children:["If no names are selected then a message stating no names were selectd should be\ndisplayed (much like ",a.TN,")."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Your output should look something like this:"}),"\n",(0,s.jsx)(o.DisplayImage,{imageURL:"/img/coding_exercises/cw4d-1.png"}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{}),(0,s.jsxs)(n.p,{children:["You already have a template for displaying the list output that you made\nin ",a.TN,".  Use this same template but replace the list with a\nMarkdown table.  You'll need to create the table headers yourself and the\n",(0,s.jsx)(n.code,{children:"%for"})," loop should now display the two table columns.  The first column\nwill contain the key and the second column will display the value\nassociated with that key."]}),(0,s.jsxs)(n.p,{children:["Python has a ",(0,s.jsx)(n.code,{children:"len()"})," function that will tell you how many elements there are\nin a list. Use this against ",(0,s.jsx)(n.code,{children:"CWpeople.true_values()"})," to see how many names\nhave been selected.  If ",(0,s.jsx)(n.code,{children:"len(CWpeople.true_values())"})," is zero then you know\nno names were selected."]})]}),"\n",(0,s.jsx)(n.admonition,{title:"challenge",type:"tip",children:(0,s.jsx)(n.p,{children:"Displaying 'True' and 'False' in the right-hand column isn't that intuitive\nto lay people that are not the programming geniuses that you now are. It would\nbe better to display 'Selected' and 'Not selected' instead.  See if you\ncan implement this."})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},4762:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>y,frontMatter:()=>h,metadata:()=>u,toc:()=>x});var s=t(5893),i=t(1151),o=t(9853),a=t(1480);function l(e){const n={li:"li",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(o.DisplayChapter,{chapter:"chapter_08"}),"\n"]}),"\n"]})}const c=(0,s.jsx)((function(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}),{});function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"ex4e",children:"Ex4e"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Modify 4d to display results in an attachment as well as screen\nHints:"}),"\n",(0,s.jsxs)(n.li,{children:["use ",(0,s.jsx)(n.code,{children:"attachments"})," as a block on its own (show example in manual)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["remember to give it a ",(0,s.jsx)(n.code,{children:"variable name"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["use ",(0,s.jsx)(n.code,{children:"attachment code"})," in the main question block"]}),"\n",(0,s.jsxs)(n.li,{children:["pass a 'list' of attachments to ",(0,s.jsx)(n.code,{children:"attachment code"}),". Create a code block\nthat creates a list with a single item (ie: the attachemnt) if anyone has\nbeen selected, and an empty list if nobody has been selected."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,s.jsxs)(n.p,{children:["In this exercises we'll work on our code ",a.TN," and create a PDF attachment\nfor the user to download or email to themselves."]}),"\n",(0,s.jsx)(n.h2,{id:"task",children:"Task"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["You must have completed ",(0,s.jsx)(n.a,{href:"cw4d",children:a.TN})," before commencing this exercise."]})}),"\n",(0,s.jsxs)(n.p,{children:["Modify your code so that if any names are selected, the same table as in\n",a.TN," is displayed but also a PDF is made available for download.  However,\nif no names are selected then no attachment should be created."]}),"\n",(0,s.jsx)(n.h2,{id:"task-notes",children:"Task notes"}),"\n",(0,s.jsxs)(n.p,{children:["The first thing to do is to create the Word document template.  We suggest that\nyou display the selected names in a ",(0,s.jsx)(n.a,{href:"https://docassemble.org/docs/documents.html#docx%20tables",children:"Word table"}),"\nusing Jinja code."]}),"\n",(0,s.jsxs)(n.p,{children:["Once the you've created your attachment you can add an\n",(0,s.jsx)(n.a,{href:"https://docassemble.org/docs/documents.html#attachment",children:"attachment specifier"})," to your final screen\nto display the attachment and make sure it works.  You'll only need to test your\nattachment for the use case where at least one name is selected.  You don't need\nto test for the no names selected use case."]}),"\n",(0,s.jsxs)(n.p,{children:["Once we've got the attachment sorted we need to find a way to display the attachment on our final\nscreen ",(0,s.jsx)(n.em,{children:"only if"})," more than one name is selected.  For this we'll use\n",(0,s.jsx)(n.a,{href:"https://docassemble.org/docs/documents.html#attachment%20code",children:(0,s.jsx)(n.code,{children:"attachment code"})}),".\n",(0,s.jsx)(n.code,{children:"attachment code"})," allows us to provide a list of attachments to display.  Importantly, if the\nlist is empty then no attachment will be displayed!  Therefore, what we can do is\ncreate a list with a single attachment in it if one or more names is selected, and create\nan empty list if no names are selected.  We should do this in a\n",(0,s.jsx)(o.DisplayGlossaryItem,{item:"codeblock"}),".  Let's get back to that later."]}),"\n",(0,s.jsxs)(n.p,{children:["As we're using ",(0,s.jsx)(n.code,{children:"attachment code"})," we need to remove our ",(0,s.jsx)(n.code,{children:"attachment"})," from the final screen\nand set it up ",(0,s.jsx)(n.a,{href:"https://docassemble.org/docs/documents.html#variable%20name",children:"as its own block"})," and\nassign it a variable name. Then we can reference that variable name in our list-making code block."]}),"\n",(0,s.jsx)(n.p,{children:"Overall, our code should look something like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"---\nobjects:\n  - display_names: DAList.using(auto_gather=False)\n---\nmandatory: True\nquestion: Coding Workshop 4e\nsubquestion: |\n  Final screen text and code goes here\n  ...\nattachment code: CWdoc_list\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\nother code blocks from Ex4d go here\n---\nattachment:\n  set up our attachment here\n  remember to assign it a variable name\n---\ncode: |\n  set the value of CWdoc_list depending on whether\n  any names were checked.\n  Hint: use an if statement\n---\n"})})]})}function r(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}const h={title:"Exercise 4e"},p=void 0,u={id:"coding_exercises/coding_workshop_4/cw4e",title:"Exercise 4e",description:"",source:"@site/docs/coding_exercises/coding_workshop_4/cw4e.mdx",sourceDirName:"coding_exercises/coding_workshop_4",slug:"/coding_exercises/coding_workshop_4/cw4e",permalink:"/textbook/docs/coding_exercises/coding_workshop_4/cw4e",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Exercise 4e"},sidebar:"codingExercisesSidebar",previous:{title:"Exercise 4d",permalink:"/textbook/docs/coding_exercises/coding_workshop_4/cw4d"},next:{title:"Coding Workshop 5",permalink:"/textbook/docs/coding_exercises/coding_workshop_5/"}},m={},x=[{value:"Ex4e",id:"ex4e",level:2},{value:"Background",id:"background",level:2},{value:"Task",id:"task",level:2},{value:"Task notes",id:"task-notes",level:2}];function j(e){return(0,s.jsx)(o.DisplayInlineExercise,{video:c,children:(0,s.jsx)(r,{})})}function y(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(j,{...e})}):j()}}}]);