"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[2519],{4911:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>d,metadata:()=>a,toc:()=>c});var s=t(5893),i=t(1151),r=t(9853);const d={title:"Lists"},o=void 0,a={id:"textbook/chapter_05/00-20",title:"Lists",description:"Introducing Lists",source:"@site/docs/textbook/chapter_05/00-20.mdx",sourceDirName:"textbook/chapter_05",slug:"/textbook/chapter_05/00-20",permalink:"/textbook/docs/textbook/chapter_05/00-20",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Lists"},sidebar:"textbookSidebar",previous:{title:"Complex Data Concepts",permalink:"/textbook/docs/textbook/chapter_05/00-10"},next:{title:"Introducing Iteration",permalink:"/textbook/docs/textbook/chapter_05/00-30"}},l={},c=[{value:"Introducing Lists",id:"introducing-lists",level:2},{value:"Python List Properties",id:"python-list-properties",level:2},{value:"Accessing (or &#39;Referencing&#39;) Items in a List",id:"referencing",level:2},{value:"More List properties",id:"more-list-properties",level:2},{value:"List length",id:"list-length",level:3},{value:"Adding and deleting items",id:"adding-and-deleting-items",level:3},{value:"Adding",id:"adding",level:4},{value:"Deleting",id:"deleting",level:4},{value:"List membership",id:"list-membership",level:2},{value:"Next",id:"next",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"introducing-lists",children:"Introducing Lists"}),"\n",(0,s.jsxs)(n.p,{children:["Let's define a ",(0,s.jsx)(n.strong,{children:"list"})," to mean this:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The list must have a name"}),"\n",(0,s.jsx)(n.li,{children:"The list must have items"}),"\n",(0,s.jsx)(n.li,{children:"We can refer to an item by its position in the list (ie: first item, second item, last item)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Let's re-visit that table of names we had before:"}),"\n",(0,s.jsxs)("table",{className:"complexDataTableExamples",children:[(0,s.jsx)("tr",{children:(0,s.jsx)("th",{children:"Student Names"})}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{children:"Ida Noe"})}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{children:"Hugo First"})}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{children:"Moda Lawn"})}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{children:"Kate Jupp"})}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{children:"Ayfor Gott"})}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{children:"Justin Thyme"})}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{children:"Ray Member"})}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{children:"Studie Harde"})}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{children:"Slacke Harse"})})]}),"\n",(0,s.jsx)(n.p,{children:"From this table we can see that:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["it has a name (which happens to be ",(0,s.jsx)(n.strong,{children:"Student Names"}),");"]}),"\n",(0,s.jsx)(n.li,{children:"it has items - nine items to be precise; and"}),"\n",(0,s.jsx)(n.li,{children:"the only way to refer to items is by their order (eg: 'Ayfor Gott' is the fifth item in the list)."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["That makes our table a ",(0,s.jsx)(n.strong,{children:"list"}),", as it has all three properties of a list."]}),"\n",(0,s.jsx)(n.h2,{id:"python-list-properties",children:"Python List Properties"}),"\n",(0,s.jsx)(n.p,{children:"We can express our list in Python like so:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"student_names = [\n    'Ida Noe',\n    'Hugo First',\n    'Moda Lawn',\n    'Kate Jupp',\n    'Ayfor Gott',\n    'Justin Thyme',\n    'Ray Member',\n    'Studie Harde',\n    'Slacke Hearse'\n]\n"})}),"\n",(0,s.jsx)(n.p,{children:"A Python list consists of the following:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"a variable name, to which the list is assigned (the name of the list);"}),"\n",(0,s.jsxs)(n.li,{children:["items separated by commas (",(0,s.jsx)(n.code,{children:","}),");"]}),"\n",(0,s.jsxs)(n.li,{children:["square brackets (",(0,s.jsx)(n.code,{children:"["})," and ",(0,s.jsx)(n.code,{children:"]"}),") which indicate the start and the end of the list respectively; and\n1 (as we shall see), each item is accessed by referring to its position in the list."]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Each item in a list does not need to be on a separate line.  It's the commas (",(0,s.jsx)(n.code,{children:","}),") that separate\none item from another.  We could have expressed our ",(0,s.jsx)(n.code,{children:"Name"})," list as follows:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"student_names = [ 'Ida Noe', 'Hugo First', 'Moda Lawn', 'Kate Jupp', 'Ayfor Gott', 'Justin Thyme', 'Ray Member', 'Studie Harde', 'Slacke Hearse' ]\n"})}),(0,s.jsx)(n.p,{children:"This is also valid syntax but it's much harder to read (not to mention on small screens it\nrequires a bit of scrolling)."})]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Variables can't have spaces in their names.  Conseuently, we could not call our list variable\n",(0,s.jsx)(n.code,{children:"Student Names"})," to match the name on the table.  As a convention, we usually do two things:"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Express variable names in lower case (unless using an anagram or initials); and"}),"\n",(0,s.jsxs)(n.li,{children:["replace spaces with underscores (",(0,s.jsx)(n.code,{children:"_"}),")."]}),"\n"]}),(0,s.jsxs)(n.p,{children:["That results in 'Student Names' becoming ",(0,s.jsx)(n.code,{children:"student_names"})," in Python."]})]}),"\n",(0,s.jsxs)(r.Quizlet,{children:[(0,s.jsx)(n.p,{children:"Which of the following is a Python list?"}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"shopping_list = 'apples, pears and oranges'\n"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"to_do_list [ \n    'study hard'\n    'go on a holiday'\n    'study some more'\n    'graduate'\n]\n"})})}),(0,s.jsx)(r.Answer,{isCorrect:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"family_I_like = [\n    'Mum',\n    'Dad',\n    'Uncle Kenny',\n    'Aunt Jemima'\n]\n"})})}),(0,s.jsxs)(r.Explanation,{correctAnswer:!0,children:[(0,s.jsx)(n.p,{children:"Correct!"}),(0,s.jsx)(n.p,{children:"All three answers have a variable name, but only this answer has:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"square brackets that open and close the list; and"}),"\n",(0,s.jsx)(n.li,{children:"list items seprated by commas."}),"\n"]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"referencing",children:"Accessing (or 'Referencing') Items in a List"}),"\n",(0,s.jsx)(n.p,{children:"As we've already said, one of the properties of a list is that the items it contains are\nreferred to by their position in the list.  Ida is the first item, Ayfor is fifth and\nSlacke is last."}),"\n",(0,s.jsx)(n.p,{children:"We could also say that Ida is at position number 1, Ayfor at position 5 and Slacke at\nposition 9."}),"\n",(0,s.jsxs)(n.p,{children:["In Python we use a number to indicate position ",(0,s.jsx)(n.strong,{children:"with one important caveat"}),".  Python starts\ncounting from zero.  Consequently, according to Python, Ida is at position 0, Ayfor at position 4\nand Slacke at position 8."]}),"\n",(0,s.jsxs)("table",{className:"complexDataTableExamples",children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Student Names"}),(0,s.jsx)("td",{children:"What we say"}),(0,s.jsx)("td",{children:"What Python thinks"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Ida Noe"}),(0,s.jsx)("td",{children:"First item"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"student_names[0]"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Hugo First"}),(0,s.jsx)("td",{children:"Second item"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"student_names[1]"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Moda Lawn"}),(0,s.jsx)("td",{children:"Third item"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"student_names[2]"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Kate Jupp"}),(0,s.jsx)("td",{children:"Fourth item"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"student_names[3]"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Ayfor Gott"}),(0,s.jsx)("td",{children:"Fifth item"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"student_names[4]"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Justin Thyme"}),(0,s.jsx)("td",{children:"Sixth item"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"student_names[5]"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Ray Member"}),(0,s.jsx)("td",{children:"Seventh item"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"student_names[6]"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Studie Harde"}),(0,s.jsx)("td",{children:"Eigth item"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"student_names[7]"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Slacke Hearse"}),(0,s.jsx)("td",{children:"Ninth item"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"student_names[8]"})})]})]}),"\n",(0,s.jsxs)(n.p,{children:["You can see from the table above that they way we access an item in a list, or ",(0,s.jsx)(n.strong,{children:"reference"}),"\nan item in a list, is by using the list's name with brackets and a position indicator, or ",(0,s.jsx)(n.strong,{children:"index"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"student_names[1]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The above example accesses the second item in the list called ",(0,s.jsx)(n.code,{children:"Name"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Almost all programming languages count their list items starting from zero."})}),"\n",(0,s.jsxs)(r.Quizlet,{children:[(0,s.jsx)(n.p,{children:"Here is a list:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"shopping = [ 'apples', 'pears', 'bananas', 'chips', 'oats']\n"})}),(0,s.jsxs)(n.p,{children:["Which of the below is the correct way to reference ",(0,s.jsx)(n.code,{children:"bananas"})," in this list?"]}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"shopping[3]"})})}),(0,s.jsx)(r.Answer,{isCorrect:!0,children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"shopping[2]"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"shopping['bananas']"})})})]}),"\n",(0,s.jsxs)(r.Quizlet,{children:[(0,s.jsx)(n.p,{children:"Here is a list:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"bread_types = [\n    'sourdough',\n    'croissant',\n    'tip top',\n    'artisan',\n    'chocolate'\n]\n"})}),(0,s.jsxs)(n.p,{children:["What is the value of ",(0,s.jsx)(n.code,{children:"bread_types[3]"}),"?"]}),(0,s.jsx)(r.Answer,{isCorrect:!0,children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"'artisan'"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"'tip top'"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"'tip'"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"'top'"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"more-list-properties",children:"More List properties"}),"\n",(0,s.jsx)(n.p,{children:"We hae already learnt that:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Python lists have a name, which is the variable name the list is assigned to;"}),"\n",(0,s.jsxs)(n.li,{children:["lists have items, which are enclosed in square brackets (",(0,s.jsx)(n.code,{children:"[]"}),"); and"]}),"\n",(0,s.jsx)(n.li,{children:"we reference an item by its position in the list, but starting from zero."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Lists have a number of other properties as well.  We will cover some of them here."}),"\n",(0,s.jsx)(n.h3,{id:"list-length",children:"List length"}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"len()"})," Python ",(0,s.jsx)(r.DisplayGlossaryItem,{item:"function"}),"\nto query how long a list is.  You do this by\ninserting the list name into ",(0,s.jsx)(n.code,{children:"len()"}),".  For example, ",(0,s.jsx)(n.code,{children:"len(student_names)"})," gives us the length\nof ",(0,s.jsx)(n.code,{children:"student_names"}),".  If we were interested in keeping the length for future use,\nwe'd assign it to a variable like so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"list_length = len(student_names)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The value of ",(0,s.jsx)(n.code,{children:"list_length"}),", given our list above, would be ",(0,s.jsx)(n.strong,{children:"9"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["You'll find that you'll use ",(0,s.jsx)(n.code,{children:"len()"})," quite a bit, especially when iterating over a list.  We\nwill cover ",(0,s.jsx)(r.DisplayGlossaryItem,{item:"iteration"})," in\n",(0,s.jsx)(r.DisplayChapter,{chapter:"chapter_06"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"adding-and-deleting-items",children:"Adding and deleting items"}),"\n",(0,s.jsx)(n.p,{children:"Just like a spreadsheet (or a bucket!), we can add items to a list and we can also delete items\nfrom a list."}),"\n",(0,s.jsx)(n.h4,{id:"adding",children:"Adding"}),"\n",(0,s.jsxs)(n.p,{children:["To add an item to the list we use the ",(0,s.jsx)(n.code,{children:"append()"})," ",(0,s.jsx)(r.DisplayGlossaryItem,{item:"method"}),".  For\nexample, let's add a new student, Stew Penous, to our ",(0,s.jsx)(n.code,{children:"student_names"})," list:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"student_names.append('Stew Pendous')\n"})}),"\n",(0,s.jsx)(n.p,{children:"After running this command, Stew is added to the end (or 'appended') to our list.  It now\nlooks like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"student_names = [\n    'Ida Noe',\n    'Hugo First',\n    'Moda Lawn',\n    'Kate Jupp',\n    'Ayfor Gott',\n    'Justin Thyme',\n    'Ray Member',\n    'Studie Harde',\n    'Slacke Hearse',\n    'Stew Pendous'\n]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"len(student_names)"})," would now return ",(0,s.jsx)(n.strong,{children:"10"})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.p,{children:"Try this example code"})}),(0,s.jsxs)(n.p,{children:["This code demonstrates adding an item to ",(0,s.jsx)(n.code,{children:"student_names"}),".\nCopy and paste this code into your Docassemble playground and feel free to experiment with it."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\n# Opening screen. Displays our list \n# as it currently exists.\n# Note: we use iteration (that's the % for loop)\n# in this code.  We cover iteration later in this chapter\nmandatory: True\nquestion: Current List\nsubquestion: |\n  Here are the current items in the `student_names` list:\n  \n  %for list_item in student_names:\n  * ${list_item}\n  %endfor\n  \n  The length of `student_names` is: **${len(student_names)}**\nbuttons:\n  - Continue: continue\n---\n# This code block drives our app.  It's good practice to \n# have no more than two mandatory blocks in your app - a\n# mandatory question block to display the opening screen and\n# a mandatory code block to drive the logic in your app.\nmandatory: True\ncode: |\n  # Append a new item to the list\n  student_names.append(new_item)\n  # And then display the screen with the new item.\n  finish_screen\n---\n\n# This code block is where we declare our list.  Our first mandatory\n# question block (above) needs student_names in order to work. That\n# mandatory question block will call this code block\ncode: |\n  student_names = [\n    'Ida Noe',\n    'Hugo First',\n    'Moda Lawn',\n    'Kate Jupp',\n    'Ayfor Gott',\n    'Justin Thyme',\n    'Ray Member',\n    'Studie Harde',\n    'Slacke Hearse'\n  ]\n---\n# This question block asks the user what they want to store in new_item\nquestion: Add another item\nsubquestion: |\n  Enter a name to append to `student_names`\nfields:\n  - no label: new_item\n---\n# This displays another screen which prints out the list again, this time with the \n# additional item appended.\n# Note: we use an if statement to highlight the last item in bold\nevent: finish_screen\nquestion: Updated list\nsubquestion: |\n  Here is `student_names` with `${new_item}` appended to it.\n  \n  %for list_item in student_names:\n  %if list_item == student_names[-1]:\n  * **${list_item}**\n  %else:\n  * ${list_item}\n  %endif\n  %endfor\n  \n  The length of `student_names` is: **${len(student_names)}**\n\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n"})})]}),"\n",(0,s.jsx)(n.h4,{id:"deleting",children:"Deleting"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"del()"})," Python function deletes list items.  We delete an item by referencing it inside\nthe ",(0,s.jsx)(n.code,{children:"del()"})," function.  For example, if we wanted to delete Ray from the list we'd run this\ncommand:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"del(student_names[6])  # Ray is the 7th item in the list\n"})}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.p,{children:"Try this example code"})}),(0,s.jsxs)(n.p,{children:["This code allows the user to select an  item from ",(0,s.jsx)(n.code,{children:"student_names"})," to delete and deletes it.\nIt then shows the truncated list to the user."]}),(0,s.jsx)(n.p,{children:"Feel free to copy this code into your Playground and experiment with it."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"# This code displays the items in a list and allows the user to \n# select an item to delete. It then deletes the item and re-displays\n# the list\n---\nmandatory: True\nquestion: Select item to delete\nsubquestion: |\n  Select an item from `student_names` to delete.\n  \n  Currently, the number of items in `student_names` (or the *length* of `student_names`) is:\n  **${len(student_names)}**\nfields:\n  - no label: item_to_delete\n    input type: radio\n    choices:\n      code: |\n        first_screen_radio_choices\n---\n# Mandatory code block that drives our app\nmandatory: True\ncode: |\n  # Here's a trap for new players. When a user selects an item to delete,\n  # the index (ie: the position in the list) is stored in our item_to_delete\n  # variable - **as a string**.  Consequently, we can't just call \n  # del(student_names[item_to_delete]) to delete the array item. What we need\n  # to do is convert (or **cast**) item_to_delete from a string to an integer.\n  # Luckily there's a function for that - int().  So, what we'll do is wrap\n  # item_to_delete in int() and put that into our del() function.\n  del(student_names[int(item_to_delete)])\n  \n  # Whew! That was complicated!  Lucky this last line is easy peasy.  Just\n  # call the final screen.\n  final_screen\n---\n# We define student_names in this code block\ncode: |\n  student_names = [\n    'Ida Noe',\n    'Hugo First',\n    'Moda Lawn',\n    'Kate Jupp',\n    'Ayfor Gott',\n    'Justin Thyme',\n    'Ray Member',\n    'Studie Harde',\n    'Slacke Hearse'\n  ]\n---\n# When the user selects an item in the radio buttons\n# to delete, we need to record the position of that item and\n# not the value of the item itself.  That's because, unlike \n# append(), del() takes an reference to a list item's position\n# instead of a value. Eg: to delete the third item in student_names\n# we need to call del(student_names[2]) and not del(student_names['Moda Lawn'])\n# This code block is used by the first screen to match up each value (which the user sees)\n# with its index, which we will then pass to the del() command in the \n# second mandatory block\ncode: |\n  first_screen_radio_choices = []\n  # Once again, we use iteration to examine every list item in turn\n  # This 'for loop' starts by setting the value of i to 0 and increments\n  # it by 1 each time it runs until it gets to one less than\n  # the number of items in student_names.  That's useful for us because if\n  # student_names has 9 items in it, we want i to run from 0 to 8.\n  for i in range(0,len(student_names)):\n    first_screen_radio_choices.append({ i : student_names[i] })\n---\n# Displays our list with the item deleted\nevent: final_screen\nquestion: Updated list\nsubquestion: |\n  The length of `student_names` is now **${len(student_names)}**\n  \n  Here are the items:\n  \n  %for list_item in student_names:\n  * ${list_item}\n  %endfor\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n"})})]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"In practice we append items to lists more often than we delete items.  In fact, a common\nway to define a list is to start out with an empty list eg:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"bread_types = []\n"})}),(0,s.jsx)(n.p,{children:"and then append items to it one by one eg:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"bread_types.append('sourdough',)\nbread_types.append('croissant',)\nbread_types.append('tip top',)\nbread_types.append('artisan',)\nbread_types.append('chocolate')\n"})}),(0,s.jsxs)(n.p,{children:["or, as in the example code, use ",(0,s.jsx)(r.DisplayGlossaryItem,{item:"iteration"})," to do the\nsame thing."]})]}),"\n",(0,s.jsxs)(r.Quizlet,{children:[(0,s.jsx)(n.p,{children:"Sticking with the bread theme, let's define this list:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"bread_types = [\n    'sourdough',\n    'croissant',\n    'tip top',\n    'artisan',\n    'chocolate'\n]\n"})}),(0,s.jsx)(n.p,{children:"As lovers of raisin bread, we want to add 'raisin' to end of this list."}),(0,s.jsx)(n.p,{children:"What command do we use to do this?"}),(0,s.jsx)(r.Answer,{isCorrect:!0,children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"bread_types.append('raisin')"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"append(bread_types, 'raisin')"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"bread_types + 'raisin'"})})}),(0,s.jsxs)(r.Explanation,{correctAnswer:!0,children:[(0,s.jsx)(n.p,{children:"Correct!"}),(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"#adding",children:"'Adding'"})," for more information."]})]}),(0,s.jsxs)(r.Explanation,{children:[(0,s.jsx)(n.p,{children:"Incorrect."}),(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"#adding",children:"'Adding'"})," for more information."]})]})]}),"\n",(0,s.jsxs)(r.Quizlet,{children:[(0,s.jsxs)(n.p,{children:["As bread lovers, looking at the ",(0,s.jsx)(n.code,{children:"bread_types"})," list in the previous Quizlet,\nwe are somewhat shocked (actually, very shocked!) to see ",(0,s.jsx)(n.code,{children:"tip top"})," in that list.\nWhat sacrilege!!  We must delete ",(0,s.jsx)(n.code,{children:"tip top"})," post haste!  How do we do that?"]}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"delete 'tip top'"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"del('tip top')"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"del(bread_types['tip top'])"})})}),(0,s.jsx)(r.Answer,{isCorrect:!0,children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"del(bread_types[2])"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"del(bread_types[3])"})})}),(0,s.jsxs)(r.Explanation,{children:[(0,s.jsx)(n.p,{children:"Incorrect."}),(0,s.jsxs)(n.p,{children:["Refer to '",(0,s.jsx)(n.a,{href:"#deleting",children:"Deleting"}),"' above for more information.  You may also want to\ncheck out how to ",(0,s.jsx)(n.a,{href:"#referencing",children:"reference"})," items in a list."]})]}),(0,s.jsxs)(r.Explanation,{correctAnswer:!0,children:[(0,s.jsx)(n.p,{children:"Correct!"}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"del()"})," is the function you use to delete items from a list.  You need to specify the\nname of the list and its index inside the ",(0,s.jsx)(n.code,{children:"del()"})," function.  Counting for indices\nstarts at zero, not 1.  So, as ",(0,s.jsx)(n.code,{children:"tip top"})," is the third item, its index is ",(0,s.jsx)(n.code,{children:"2"}),"."]})]})]}),"\n",(0,s.jsxs)(r.Quizlet,{children:[(0,s.jsxs)(n.p,{children:["Which of the below is the correct way of declaring an empty list called ",(0,s.jsx)(n.code,{children:"bread_types"}),"?"]}),(0,s.jsx)(r.Answer,{isCorrect:!0,children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"bread_types = []"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"bread_types = None"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"new_list(bread_types)"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"bread_types = <Empty>"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"list-membership",children:"List membership"}),"\n",(0,s.jsxs)(n.p,{children:["Python allows you to test if an element can be found in a list.  For example,\nyou may want to check to see if Ray exists in our ",(0,s.jsx)(n.code,{children:"student_names"})," list.  To\ndo so you use Python's ",(0,s.jsx)(n.code,{children:"in"})," operator like so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'Ray Member' in student_names\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is usually used as part of an ",(0,s.jsx)(r.DisplayGlossaryItem,{item:"ifstatement"}),",\nfor example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"if 'Ray Member' in student_names:\n  congratulate_ray\nelse:\n  commiserate_with_ray\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In our example congratulations will be offered to Ray on account of his\ninclusion in our ",(0,s.jsx)(n.code,{children:"student_names"})," list."]}),"\n",(0,s.jsxs)(n.p,{children:["You can also use the ",(0,s.jsx)(n.code,{children:"not in"})," operator, which tests to see if an item\nis ",(0,s.jsx)(n.em,{children:"not"})," in the list ie:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"if 'Mark Joseph' not in student_names:\n  mark_is_jealous\nelse:\n  mark_is_delirious\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Mark, unfortunately, may need to seek help with his feelings of envy on\naccount of his exclusion from ",(0,s.jsx)(n.code,{children:"student_names"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"next",children:"Next"}),"\n",(0,s.jsxs)(n.p,{children:["Now that you've been introduced to lists, its time to move on to the one of the most powerful\nthings you can do with them - ",(0,s.jsx)(n.strong,{children:"iteration"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);