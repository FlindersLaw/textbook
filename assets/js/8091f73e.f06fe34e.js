"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[7104],{3720:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"textbook/chapter_06/filtering/00-30","title":"Coding - User questions","description":"Ask the user about their circumstances","source":"@site/docs/textbook/chapter_06/filtering/00-30.mdx","sourceDirName":"textbook/chapter_06/filtering","slug":"/textbook/chapter_06/filtering/00-30","permalink":"/textbook/docs/textbook/chapter_06/filtering/00-30","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Coding - User questions"},"sidebar":"textbookSidebar","previous":{"title":"Coding - Introduction","permalink":"/textbook/docs/textbook/chapter_06/filtering/00-20"},"next":{"title":"Coding - List of Services","permalink":"/textbook/docs/textbook/chapter_06/filtering/00-40"}}');var i=s(4848),o=s(8453),a=s(2487);s(4894),s(1012);const r={title:"Coding - User questions"},l=void 0,c={},d=[{value:"Ask the user about their circumstances",id:"ask-the-user-about-their-circumstances",level:2},{value:"<code>MJFage</code>",id:"mjfage",level:2},{value:"<code>MJFgender</code>",id:"mjfgender",level:2},{value:"<code>MJFlocation</code>",id:"mjflocation",level:2},{value:"<code>MJFfamily</code>",id:"mjffamily",level:2},{value:"Testing",id:"testing",level:2},{value:"Docassemble is Declarative",id:"docassemble-is-declarative",level:4}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"ask-the-user-about-their-circumstances",children:"Ask the user about their circumstances"}),"\n",(0,i.jsxs)(n.p,{children:["In our ",(0,i.jsx)(n.a,{href:"00-10#ask-the-user-about-their-circumstances",children:"design"})," we got to the point\nwhere we nominated four variables to store the answer to our four questions.  Let's\ncode these and put them into ",(0,i.jsx)(n.code,{children:"questions.yml"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"We could ask all four questions in a single question block.  However, ABC have told us that\nit is better to present one question at a time.  Doing so makes our app more accessible to\nusers with intellectual disabilities or other cognitive impairments."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",metastring:'title="questions.yml" showLineNumbers',children:"---\nquestion: Age\nfields:\n - Enter your age: MJFage\n   datatype: integer\n   min: 0\n---\nquestion: Gender\nfields:\n  - Select your gender: MJFgender\n    datatype: radio\n    choices:\n      - Female\n      - Male\n      - Other\n---\nquestion: Location\nsubquestion: |\n  Select the location or locations where you are looking for services.\n\n  You may select as many locations as you like\nfields:\n  - no label: MJFlocation\n    datatype: checkboxes\n    choices:\n      - North\n      - South\n      - East\n      - West\n---\nquestion: Accommodation type\nsubquestion: |\n  Are you looking or accommodation just for yourself or\n  for yourself and your family?\nfields:\n  - no label: MJFfamily\n    datatype: radio\n    choices:\n      - I am looking for accommodation for myself: single\n      - I am looking for accommodation for my family: family\n---\n"})}),"\n",(0,i.jsx)(n.h2,{id:"mjfage",children:(0,i.jsx)(n.code,{children:"MJFage"})}),"\n",(0,i.jsxs)(n.p,{children:["We want to limit the input field to integers, so that users can't input, say 'twenty-one' instead of\n'21' as an age.  We're also using the ",(0,i.jsx)(n.code,{children:"min"})," ",(0,i.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#min",children:"input validation"}),"\nto prevent our user from entering a negative number as an age."]}),"\n",(0,i.jsx)(n.h2,{id:"mjfgender",children:(0,i.jsx)(n.code,{children:"MJFgender"})}),"\n",(0,i.jsx)(n.p,{children:"As we discussed in our design, the user must select from a list of genders.  We are including only 'Female',\n'Male' and 'Other' for our app."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Our ",(0,i.jsx)(n.code,{children:"choices"})," in the ",(0,i.jsx)(n.code,{children:"MJFgender"})," question ",(0,i.jsx)(n.strong,{children:"must match"})," the strings we use for gender in ",(0,i.jsx)(n.code,{children:"MJFservices"}),".\nBe mindful that our code is ",(0,i.jsx)(n.strong,{children:"case sensitive"}),".  So, be sure to always use 'Male' and not 'male' or 'MALE'.\nOtherwise, our gender membership test will fail."]})}),"\n",(0,i.jsx)(n.h2,{id:"mjflocation",children:(0,i.jsx)(n.code,{children:"MJFlocation"})}),"\n",(0,i.jsxs)(n.p,{children:["We need to use the ",(0,i.jsx)(n.code,{children:"checkboxes"})," datatype for this question so the user can select multiple locations."]}),"\n",(0,i.jsxs)(n.p,{children:["Also, be mindful that our ",(0,i.jsx)(n.code,{children:"choices"})," must match exactly the list items in the ",(0,i.jsx)(n.code,{children:"location"})," key in ",(0,i.jsx)(n.code,{children:"MJFservices"}),",\notherwise location matches will fail (see the note in ",(0,i.jsx)(n.code,{children:"MJFgender"})," above)."]}),"\n",(0,i.jsx)(n.h2,{id:"mjffamily",children:(0,i.jsx)(n.code,{children:"MJFfamily"})}),"\n",(0,i.jsxs)(n.p,{children:["This question block is similar to the ",(0,i.jsx)(n.code,{children:"MJFgender"})," question.  However, the ",(0,i.jsx)(n.code,{children:"choices"})," items are slightly\ndifferent.  With ",(0,i.jsx)(n.code,{children:"MJFfamily"})," we want to present a more detailed explanation in the choice items but we\ndon't want to copy those lengthy explanations as our ",(0,i.jsx)(n.code,{children:"family"})," list items in ",(0,i.jsx)(n.code,{children:"MJFservices"}),".  By using\n",(0,i.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#choices",children:"key/value pairs"})," for our ",(0,i.jsx)(n.code,{children:"choices"})," we can display\ndescriptive text to the user but save a more concise value in our variable."]}),"\n",(0,i.jsxs)(n.p,{children:["Same as ",(0,i.jsx)(n.code,{children:"MJFgender"})," and ",(0,i.jsx)(n.code,{children:"MJFlocation"})," remember that variable data is case sensitive.  Unlike ",(0,i.jsx)(n.code,{children:"MJFgender"}),"\nand ",(0,i.jsx)(n.code,{children:"MJFlocation"})," we've decided that our variable data for ",(0,i.jsx)(n.code,{children:"MJFfamily"})," is all in lower case.  That's an\narbitrary choice made by us.  We just need to sure to be consistent."]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsxs)(n.p,{children:["We need to modify our ",(0,i.jsx)(n.code,{children:"main.yml"})," to make it aware of our questions.  Do this by adding this ",(0,i.jsx)(n.code,{children:"include"})," block\nat the top of ",(0,i.jsx)(n.code,{children:"main.yml"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"---\ninclude:\n  - questions.yml\n---\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Next, we need a quick way to call the questions from ",(0,i.jsx)(n.code,{children:"main.yml"}),".  We have two options."]}),"\n",(0,i.jsx)(n.p,{children:"Our first option is that we could modify our mandatory coding block to call each of the variables eg:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"mandatory: True\ncode: |\n  MJFage\n  MJFgender\n  MJFlocation\n  MJFage\n  final_screen\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The second option is to display the values of the four variables in our final screen.  This is our\npreferred option for these reasons:\nFirst, doing so has the practical benefit that we can see the values that are stored in each variable.\nSecondly though, this is the way Docassemble prefers us to do things (see\n",(0,i.jsx)(n.a,{href:"#docassemble-is-declarative",children:"below"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Let's modify our ",(0,i.jsx)(n.code,{children:"final_screen"})," to display our question variables.  That will cause them to be asked."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"---\nevent: final_screen\nquestion: Final Scren\nsubquestion: |\n  Eventually the list of services will be displayed here\n\n  Our variables:\n\n  * ${MJFage}\n  * ${MJFgender}\n  * ${MJFlocation.true_values()}\n  * ${MJFfamily}\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Our ",(0,i.jsx)(n.code,{children:"main.yml"})," should now look like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",metastring:'title="main.yml" showLineNumbers',children:"---\ninclude:\n  - questions.yml\n---\nmandatory: True\nquestion: Welcome screen\nsubquestion: |\n  Welcome screen text will go here eventually.\nbuttons:\n  - Continue: continue\n  - Exit: exit\n  - Restart: restart\n---\n# This code block drives our app\nmandatory: True\ncode: |\n  final_screen\n---\n# This is our final screen\nevent: final_screen\nquestion: Final Scren\nsubquestion: |\n  Eventually the list of services will be displayed here\n\n  Our variables:\n\n  * ${MJFage}\n  * ${MJFgender}\n  * ${MJFlocation.true_values()}\n  * ${MJFfamily}\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you run the app now you will be asked the four questions and their values will be\ndisplayed in the final screen."}),"\n",(0,i.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding3.png"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.code,{children:"MJFlocation"})," we had to use the ",(0,i.jsx)(n.code,{children:"true_values()"})," method to only display the selected locations.\nFor more information on ",(0,i.jsx)(n.code,{children:"true_values()"})," check out the ",(0,i.jsx)(n.a,{href:"https://docassemble.org/docs/objects.html#DADict",children:"Docassemble manual"}),"."]})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.h4,{id:"docassemble-is-declarative",children:"Docassemble is Declarative"}),(0,i.jsxs)(n.p,{children:["Docassemble is what's known as a ",(0,i.jsx)(n.strong,{children:"declarative language"}),".  Most programming languages are ",(0,i.jsx)(n.strong,{children:"imperative languages"}),".\nIn an imperative language you tell the computer what to do and when and how to do it.  Our first option is\nthe imperative option because we're telling Docassemble: 'first get the values of the four variables and then\ndisplay the final screen' - we're telling Docassemble what to do and the order in which to do it."]}),(0,i.jsx)(n.p,{children:"In a declarative language we write code in blocks (sound familiar?) and let the system decide which block to run\nand when.  So, in a declarative language we would write code to display a screen containing variable values\nand then we'd leave it up to the system to decide which code block to call and when."}),(0,i.jsx)(n.p,{children:"Docassemble is delcarative.  It breaks code up into blocks and calls code blocks as it needs them.\nDeclarative systems have some advantages over imperative systems.  Programmers can focus on writing\ncode that 'does stuff' instead of trying to work out the best way to bring code together.  The execution\norder of code blocks is left to the system itself which should be able to work out the most efficient way\nto execute your app.  This can result in writing less code that's easier to read."}),(0,i.jsx)(n.p,{children:"Declarative systems also have their drawbacks.  Most software\ndevelopers are trained on and work with imperative languages.  Consequently,\nadjusting to a declarative model can take some time and can be frustrating."}),(0,i.jsxs)(n.p,{children:["Finally, we should note that a declarative program must be told where to start!  That's where our\n",(0,i.jsx)(n.code,{children:"mandatory"})," blocks come in.  As much as possible we limit our mandatory blocks to two - one for\nthe welcome screen and a code block to drive the app.  However, we try to keep the logic in our\ncode block to a minimum and have our app run as declarative as possible."]}),(0,i.jsxs)(n.p,{children:["To conclude, that's why we'll place our variables into ",(0,i.jsx)(n.code,{children:"final_screen"})," for testing.  We're preserving\nthe declarative model and leaving the execution order up to Docassemble."]}),(0,i.jsx)(n.p,{children:"You will find that we will put as little as possible into the mandatory code block and most of our\napp will be driven by the display of the relevant services in our final screen."})]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},4894:(e,n,s)=>{s.r(n),s.d(n,{F01:()=>a,F02:()=>l,F03:()=>d,F03a:()=>m,F04:()=>f,F05:()=>p,F05a:()=>g,F05b:()=>y,F06:()=>w,F06a:()=>D,F06b:()=>M,F07:()=>J});var t=s(4848),i=s(8453);function o(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    id1(Display a <b>list</b> of emergency<br>accommodation providers<br><b>tailored to</b> the <b>circumstances<br>of</b> each user)"})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}function r(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    id0(Ask user about their circumstances)\n    id0 --\x3e id1(Evaluate user's circumstances against list of services)\n    id1 --\x3e id2(Display list of relevant services)"})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}function c(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    id0(Ask user their age)\n    id1(Ask user their gender)\n    id2(Ask user for which locations<br>they are looking for services)\n    id3(Ask the user if they are<br>looking for accommodation for<br>themselves or their family)\n    \n    %% Invisible links so the boxes appear vertically\n    id0 ~~~ id1 ~~~ id2 ~~~ id3"})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}function h(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    id0(Ask user their age)\n    id1(Ask user their gender)\n    id2(Ask user for which locations<br>they are looking for services)\n    id3(Ask the user if they are<br>looking for accommodation for<br>themselves or their family)\n\n    co0(Name: <code>MJFage</code><br><code>datatype: integer</code>)\n    co1(Name: <code>MJFgender</code><br>Present genders as radio buttons)\n    co2(Name: <code>MJFlocation</code><br>Use checkboxes so<br>user can select<br>multiple locations)\n    co3(Name: <code>MJFfamily</code><br>Use <code>yesnoradio</code> or regular radio buttons)\n\n    \n    %% Invisible links so the boxes appear vertically\n    id0 ~~~ id1 ~~~ id2 ~~~ id3\n\n    co0 --\x3e id0\n    co1 --\x3e id1\n    co2 --\x3e id2\n    co3 --\x3e id3\n\n\n    %% Define styles for flowchart items.  We want to make comments yellow\n    %% and have a larger font size for regular items\n    classDef commentClass fill:#faffd6,text-align:left\n    classDef questionClass fill:#ffe6bc\n    classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n    classDef itemClass font-size:16pt\n    classDef leftListClass text-align:left\n\n    class co0,co1,co2,co3 commentClass\n"})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}function u(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    id0(Define a list of services)\n    id1(Evaluate user circumstances<br>against service criteria)\n\n    %% invisible links to stack vertically\n    id0 ~~~ id1"})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}function x(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  id1(For each service in the list)\n  id1 --\x3e id2{{Does the service meet the user's circumstances?}}\n  id2 -- Yes --\x3e id3(Add the service to the display list)\n  id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(x,{...e})}):x(e)}function j(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  subgraph Loop\n    direction TB\n    id1(For each service in the list)\n    subgraph Loop_Body\n        direction TB\n        id2{{Does the service meet the user's circumstances?}}\n        id2 -- Yes --\x3e id3(Add the service to the display list)\n        id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n    end\n    id1 --\x3e Loop_Body\n  end\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(j,{...e})}):j(e)}function b(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  subgraph Loop\n    direction TB\n    id1(<code>for a_service in MJFservices:</code>)\n    subgraph Loop_Body\n        direction TB\n        id2{{Does the service meet the user's circumstances?}}\n        id2 -- Yes --\x3e id3(Add the service to the display list)\n        id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n    end\n    id1 --\x3e Loop_Body\n  end\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function y(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(b,{...e})}):b(e)}function v(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  subgraph Loop_Body\n      direction TB\n      id2{{Does the service meet the user's circumstances?}}\n      id2 -- Yes --\x3e id3(Add the service to the display list)\n      id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n  end\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function w(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(v,{...e})}):v(e)}function k(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  id1{{Is <code>MJFage</code> between the minimum and maximum age for <code>a_service</code>?}}\n  id2{{Is <code>MJFgender</code> one of the genders listed for <code>a_service</code>?}}\n  id3{{Do any of the locations in <code>MJFlocation</code> match<br>up with the list of locations in <code>a_service</code>?}}\n  id4{{Does <code>MJFfamily</code> match up with any of the<br>family list items in <code>a_service</code>?}}\n\n  id5{{Is the answer 'Yes' to all of the above questions?}}\n  id5 -- Yes --\x3e id6(Add the service to the display list)\n  id5 -- No --\x3e id7(Do not add the service<br>to the display list)\n\n  id1 ~~~ id2 ~~~ id3 ~~~ id4 ~~~ id5\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id1,id2,id3,id4,id5 questionClass"})}function D(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(k,{...e})}):k(e)}function F(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  id1(Ask the age question and store the result in <code>MJFage_ok</code>)\n  id2(Ask the gender question and store the result in <code>MJFgender_ok</code>)\n  id3(Ask the location question and store the result in <code>MJFlocation_ok</code>)\n  id4(Ask the age question and store the result in <code>MJFage_ok</code>)\n\n  id5{{Is each of <code>MJFage_ok</code>, <code>MJFgender_OK</code>, <code>MJFlocation_ok</code> and <code>MJFfamily_ok</code> equal to <code>True</code>?}}\n  id5 -- Yes --\x3e id6(Add the service to the display list)\n  id5 -- No --\x3e id7(Do not add the service<br>to the display list)\n\n  id1 ~~~ id2 ~~~ id3 ~~~ id4 ~~~ id5\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id1,id2,id3,id4,id5 questionClass"})}function M(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(F,{...e})}):F(e)}function C(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  id0(for each location selected by the user)\n  id0 --\x3e id1{{\"Is the location in <code>a_service['location']</code>?\"}}\n  id1 -- Yes --\x3e id2(Set <code>MJFlocation_ok</code> to <code>True</code>)\n  id1 -- No --\x3e id3(Set <code>MJFlocation_ok</code> to <code>False</code><br>but only if it hasn't already been set to <code>True</code>)\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id1 questionClass"})}function J(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(C,{...e})}):C(e)}},1012:(e,n,s)=>{s.r(n),s.d(n,{MappingTable:()=>l,ServiceTable:()=>a});var t=s(4848),i=s(8453);function o(e){const n={a:"a",...(0,i.R)(),...e.components};return(0,t.jsxs)("table",{className:"complexDataTableExamples",children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Name"}),(0,t.jsx)("th",{children:"Website"}),(0,t.jsx)("th",{children:"Age limits"}),(0,t.jsx)("th",{children:"Genders"}),(0,t.jsx)("th",{children:"Locations"}),(0,t.jsx)("th",{children:"Family or Single"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"ABC Services"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.a,{href:"https://abcsvc.org.au",children:"https://abcsvc.org.au"})}),(0,t.jsx)("td",{children:"18 - 65"}),(0,t.jsx)("td",{children:"Male, Female"}),(0,t.jsx)("td",{children:"North, East"}),(0,t.jsx)("td",{children:"Families, Singles"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"WH Youth"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.a,{href:"https://whyouth.org.au",children:"https://whyouth.org.au"})}),(0,t.jsx)("td",{children:"12 - 17"}),(0,t.jsx)("td",{children:"Male, Female"}),(0,t.jsx)("td",{children:"South"}),(0,t.jsx)("td",{children:"Singles"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"St Mary's Shelter"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.a,{href:"https://stmarys.org.au",children:"https://stmarys.org.au"})}),(0,t.jsx)("td",{children:"12 and over"}),(0,t.jsx)("td",{children:"Female"}),(0,t.jsx)("td",{children:"North"}),(0,t.jsx)("td",{children:"Singles"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"MHI Men's Health"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.a,{href:"https://mhimh.org.au",children:"https://mhimh.org.au"})}),(0,t.jsx)("td",{children:"18 and over"}),(0,t.jsx)("td",{children:"Male"}),(0,t.jsx)("td",{children:"North, West"}),(0,t.jsx)("td",{children:"Singles"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"DE Family Shelter"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.a,{href:"https://defsupport.org.au",children:"https://defsupport.org.au"})}),(0,t.jsx)("td",{children:"18 - 65"}),(0,t.jsx)("td",{children:"Male, Female"}),(0,t.jsx)("td",{children:"North, East, West, South"}),(0,t.jsx)("td",{children:"Families"})]})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}function r(e){const n={p:"p",...(0,i.R)(),...e.components};return(0,t.jsxs)("table",{className:"complexDataTableExamples",children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Column Name"}),(0,t.jsx)("th",{children:"Key Name"}),(0,t.jsx)("th",{children:"Data type"}),(0,t.jsx)("th",{children:"Comments"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Name"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"name"})}),(0,t.jsx)("td",{children:"String"}),(0,t.jsx)("td",{colspan:"2",children:"These first two keys store simple string data types"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Website"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"website"})}),(0,t.jsx)("td",{children:"String"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Age limits"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("code",{children:"min_age"})," and ",(0,t.jsx)("code",{children:"max_age"})]}),(0,t.jsx)("td",{children:"Integer"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"It's easier for us to split out the age limit into minimum and\nmaximum age variables and test that the user's age falls inside\nthe min and max ages. We will need additional code to cope with\nthe 'and over' requirements in some of the data.  We will deal\nwith this when we code the age test."})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Genders"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"gender"})}),(0,t.jsxs)("td",{children:[(0,t.jsx)(n.p,{children:"A list of strings representing genders.  At a minimum we should\nhave"}),(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Female"}),(0,t.jsx)("li",{children:"Male"}),(0,t.jsx)("li",{children:"Other"})]}),(0,t.jsx)(n.p,{children:"This will be driven by the data given to us by ABC."})]}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"A user will only be allowed to select one gender as a response."})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Locations"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"location"})}),(0,t.jsxs)("td",{children:[(0,t.jsx)(n.p,{children:"A list of locations."}),(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"North"}),(0,t.jsx)("li",{children:"South"}),(0,t.jsx)("li",{children:"East"}),(0,t.jsx)("li",{children:"West"})]})]}),(0,t.jsx)("td",{children:"It appears from the ABC data that this is suitable for their purposes"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Family or Single"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"family"})}),(0,t.jsxs)("td",{children:[(0,t.jsx)(n.p,{children:"A list consisting of one or all of"}),(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Family"}),(0,t.jsx)("li",{children:"Single"})]})]}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"Agencies that cater for all clients (ie: those looking for\naccommodation for themselves and those looking for accommodation\nfor themselves and their family) should have both items in their\ndata entry.  Otherwise, the appropriate list item is specified\nie: the data type will be a list containing one item."})})]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}}}]);