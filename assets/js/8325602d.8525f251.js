"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[1055],{5535:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"textbook/chapter_04/00-20","title":"If statements","description":"An Introduction to Logic","source":"@site/docs/textbook/chapter_04/00-20.mdx","sourceDirName":"textbook/chapter_04","slug":"/textbook/chapter_04/00-20","permalink":"/textbook/docs/textbook/chapter_04/00-20","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"If statements"},"sidebar":"textbookSidebar","previous":{"title":"Chapter 4. Logic and If Statements","permalink":"/textbook/docs/textbook/chapter_04/"},"next":{"title":"If-Elif-Else Statements","permalink":"/textbook/docs/textbook/chapter_04/00-30"}}');var i=s(4848),r=s(8453),o=s(1428);const a={title:"If statements"},l=void 0,h={},d=[{value:"An Introduction to Logic",id:"an-introduction-to-logic",level:2},{value:"Express logic in code using If statements",id:"express-logic-in-code-using-if-statements",level:2},{value:"If Statement Rules",id:"if-statement-rules",level:3},{value:"Implementing an If-Else Statement in Docassemble",id:"implementing-an-if-else-statement-in-docassemble",level:2},{value:"Line 7",id:"line-7",level:3},{value:"Lines 7 to 10",id:"lines-7-to-10",level:3},{value:"Flipping the Logic",id:"flipping-the-logic",level:3},{value:"Other equality operators and if statements",id:"other-equality-operators-and-if-statements",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return o||m("Components",!1),o.DisplayImage||m("Components.DisplayImage",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"an-introduction-to-logic",children:"An Introduction to Logic"}),"\n",(0,i.jsx)(t.p,{children:"In this chapter, we will talk about logic and how to control the logic of our applications. We can use logic to make our app can do one thing or another depending on the input it receives. We can direct the flow of the program depending on how the user inputs certain information. We will do this using if statements."}),"\n",(0,i.jsx)(t.p,{children:"For example, you might want your app to perform a set of initial eligibility checks before proceeding with your main analysis. You might want to check for age or residency, because your app only applies to adults who are not pensioners or South Australian residents. These kinds of preliminary questions are good to resolve early in your processing flow. Otherwise, your user might have to run through the whole app to find out they should have never run it in the first place! Therefore, we can ask the user a few preliminary questions and, based on those questions, decide which path the application should take."}),"\n",(0,i.jsx)(t.p,{children:"For a simple application, we can use logic and just one question to direct the flow of our application."}),"\n",(0,i.jsx)(t.mermaid,{value:"flowchart LR;\n    id1{{Are you over 18?}} -- Yes --\x3e id2(You are an adult.)\n    id1 -- No --\x3e id3(You are a minor)"}),"\n",(0,i.jsx)(t.p,{children:"More complex decisions might have many different answers.  For example, when deciding on the closest court in the Adelaide region, we might want to ask our user a question with multiple options."}),"\n",(0,i.jsx)(t.mermaid,{value:"flowchart LR;\n    id1{{Where do you live?}}\n    id1 -- West Adelaide --\x3e id2(Port Adelaide Magistrates Court)\n    id1 -- Northern Adelaide --\x3e id3(Elizabeth Magistrates Court)\n    id1 -- North-East Adelaide --\x3e id4(Adelaide Magistrates Court)\n    id1 -- Adelaide CBD --\x3e id4\n    id1 -- Southern Adelaide --\x3e id5(Christies Beach Magistrates Court)"}),"\n",(0,i.jsx)(t.p,{children:"Therefore, the questions that we ask will influence how we structure our decision making processes."}),"\n",(0,i.jsx)(t.h2,{id:"express-logic-in-code-using-if-statements",children:"Express logic in code using If statements"}),"\n",(0,i.jsxs)(t.p,{children:["We need a way to express this decision-making process in code.  To do so we use  ",(0,i.jsx)(o.DisplayGlossaryItem,{item:"ifstatement",plural:!0}),"."]}),"\n",(0,i.jsx)(t.p,{children:"An if statement tells a program to do something if a certain condition is met. This is the simplest type of if statement. Let's take diagram 1 above. We might express this the following way in pseudocode:"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"IF"})," ",(0,i.jsx)(t.em,{children:"user is 18 years or older"})," ",(0,i.jsx)(t.strong,{children:"THEN"})," ",(0,i.jsx)(t.em,{children:"they are an adult"})]}),"\n",(0,i.jsx)(t.p,{children:"A more complex if statement might tell a program to do something if a condition is met, and something else if that condition is not met. This is known as an if-else statement."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"IF"})," ",(0,i.jsx)(t.em,{children:"user is 18 years or older"})," ",(0,i.jsx)(t.strong,{children:"THEN"})," ",(0,i.jsx)(t.em,{children:"they are an adult"})," ",(0,i.jsx)(t.strong,{children:"ELSE"})," ",(0,i.jsx)(t.em,{children:"they are a child"})]}),"\n",(0,i.jsx)(t.h3,{id:"if-statement-rules",children:"If Statement Rules"}),"\n",(0,i.jsx)(t.p,{children:"In order to use an if statement in a code block, we need to follow three rules (otherwise Docassemble will generate a syntax error if we try to run this code):"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The if statement must be indented following the code block;"}),"\n",(0,i.jsx)(t.li,{children:"There must be one space between the 'if' and the test that we are performing; and,"}),"\n",(0,i.jsx)(t.li,{children:"The if statement must be closed with a semicolon immediately after the statement"}),"\n"]}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsxs)(t.p,{children:["Note that we do not need to add an ",(0,i.jsx)(t.code,{children:"else"})," clause when writing an if statement. However, it is good practice to do so. We use if statements in Docassemble to redirect users to different endpoints or different questions. If our user enters a value which is not covered by our if statement, Docassemble will exit with the following error screen:"]}),(0,i.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_04/docassemble_finished.png",altText:"Docassemble has finished executing and will show this screen"}),(0,i.jsxs)(t.p,{children:["In the alternative, if we are declaring a variable in our if statement (see ",(0,i.jsx)(t.a,{href:"/docs/textbook/chapter_03",children:"Chapter 3"}),"), we might encounter an error. For example, if we do not have an else statement we might get this error:"]}),(0,i.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_04/docassemble_error_no_else.png",altText:"Docassemble has finished executing and will show this screen"}),(0,i.jsx)(t.p,{children:"These are things to be mindful of when planning how you will use if statements."})]}),"\n",(0,i.jsx)(t.h2,{id:"implementing-an-if-else-statement-in-docassemble",children:"Implementing an If-Else Statement in Docassemble"}),"\n",(0,i.jsx)(t.p,{children:"Let's how we might implement the logic above using an if statement."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",metastring:'showLineNumbers title="Ch4_Age_Eligibility.yml" showLineNumbers',children:"---\nquestion: |\n  Are you 18 years or older?\nyesno: user18OrOver\n---\ncode: |\n  if user18OrOver:\n    userIsAdult = 'You are an adult!'\n  else:\n    userIsAdult = 'You are a child'\n---\nmandatory: True\nquestion: Here is your age status\nsubquestion: |\n  Thank you for completing this survey.\n\n  Here is your result: ${userIsAdult}\n\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n"})}),"\n",(0,i.jsx)(t.h3,{id:"line-7",children:"Line 7"}),"\n",(0,i.jsxs)(t.p,{children:["Note line 7 of ",(0,i.jsx)(t.code,{children:"Ch4_Age_Eligibility.yml"}),". You will see that we have included a reference to the variable ",(0,i.jsx)(t.code,{children:"user18orOver"}),", followed immediately by a semicolon. What does this mean?"]}),"\n",(0,i.jsx)(t.p,{children:"What we have used here is an equality operator. That allows us to test a particular value to drive our if statement."}),"\n",(0,i.jsx)(t.p,{children:"Let's consider how our application will execute. It will first display a button which asks the user whether they are 18 or over."}),"\n",(0,i.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_04/over_18_question_choice.png",altText:"A Docassemble application with two options - yes or no"}),"\n",(0,i.jsxs)(t.p,{children:["If the user presses ",(0,i.jsx)(t.strong,{children:"Yes"}),", that variable will contain the value True. Otherwise, if the user presses ",(0,i.jsx)(t.strong,{children:"No"}),", it will contain the value False."]}),"\n",(0,i.jsxs)(t.p,{children:["The line ",(0,i.jsx)(t.code,{children:"if user18OrOver:"})," is effectively the same as writing ",(0,i.jsx)(t.code,{children:"if user18OrOver == True:"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"lines-7-to-10",children:"Lines 7 to 10"}),"\n",(0,i.jsxs)(t.p,{children:["Lines 7 to 10 in our code block direct the flow of control of the application. If the user presses yes on the first screen (that is, ",(0,i.jsx)(t.code,{children:"user18OrOver"})," is True), the final screen will display that they are an adult."]}),"\n",(0,i.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_04/adult_endpoint_screen_if_statement.png",altText:"The endpoint displayed if the user says they are over 18"}),"\n",(0,i.jsx)(t.p,{children:"Otherwise, the application will display that they are a child."}),"\n",(0,i.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_04/child_endpoint_screen_if_statement.png",altText:"The endpoint displayed if the user says they are under 18"}),"\n",(0,i.jsx)(t.h3,{id:"flipping-the-logic",children:"Flipping the Logic"}),"\n",(0,i.jsx)(t.p,{children:"We can also flip the logic of our if statement around. In Ch4_Age_Eligibility, Line 7 tests whether the user is 18 years or older. We can reverse this logic with the following code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",metastring:'showLineNumbers title="Ch4_Age_Eligible_Reverse.yml" showLineNumbers',children:"---\nquestion: |\n  Are you 18 years or older?\nyesno: user18OrOver\n---\ncode: |\n  if not user18OrOver:\n    userIsAdult = 'You are a child'\n  else:\n    userIsAdult = 'You are an adult!'\n---\nmandatory: True\nquestion: Here is your age status\nsubquestion: |\n  Thank you for completing this survey.\n\n  Here is your result: ${userIsAdult}\n\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Writing ",(0,i.jsx)(t.code,{children:"not user18OrOver"})," on Line 7 is the same as writing ",(0,i.jsx)(t.code,{children:"userOver18OrOver < 18"}),"."]}),"\n",(0,i.jsxs)(o.Quizlet,{title:"If Statement with Radio Buttons Quiz",children:[(0,i.jsxs)(t.p,{children:["Let's say that we want to create an if statement clause to check whether the variable ",(0,i.jsx)(t.code,{children:"userResponse"})," contains 'Yes'. What if statement clause should we use?"]}),(0,i.jsx)(o.Answer,{children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"if userResponse = 'Yes':"})})}),(0,i.jsx)(o.Answer,{children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"if userResponse:"})})}),(0,i.jsx)(o.Answer,{isCorrect:!0,children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"if userResponse == 'Yes':"})})}),(0,i.jsx)(o.Explanation,{correctAnswer:!0,children:(0,i.jsxs)(t.p,{children:["That's right! Remember that we are evaluating a string variable to see whether it contains the string 'Yes'. Therefore, we need to evaluate that, and not a Boolean value. Also, you have correctly identified that the text for equality is ",(0,i.jsx)(t.code,{children:"=="})," and not ",(0,i.jsx)(t.code,{children:"="}),"."]})}),(0,i.jsxs)(o.Explanation,{incorrectAnswer:!0,children:[(0,i.jsx)(t.p,{children:"That's not quite right. Remember when constructing an if statement:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"You need to test the value of the variable you are assessing using the correct datatype; and,"}),"\n",(0,i.jsx)(t.li,{children:"You need to use the correct test for equality"}),"\n"]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"other-equality-operators-and-if-statements",children:"Other equality operators and if statements"}),"\n",(0,i.jsx)(t.p,{children:"There are multiple ways that we could evaluate whether the user is over 18. For example, we might simply ask the user whether they were over 18 or not, which might be sufficient to satisfy some statutory tests. Otherwise, we could ask the user to provide their age, and then evaluate whether this age was over 18 mathematically."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"IF"})," ",(0,i.jsx)(t.em,{children:"user's age is 18 or more"})," ",(0,i.jsx)(t.strong,{children:"THEN"})," ",(0,i.jsx)(t.em,{children:"they are an adult"})," ",(0,i.jsx)(t.strong,{children:"ELSE"})," ",(0,i.jsx)(t.em,{children:"they are a child"})]}),"\n",(0,i.jsx)(t.p,{children:"We would implement this test using the following code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",metastring:'showLineNumbers title="Ch3_Age_Eligibility_Numbers.yml" showLineNumbers',children:"---\nquestion: |\n  What is your age?\nfields:\n  - no label: userAge\n    datatype: integer\n---\ncode: |\n  if userAge >= 18:\n    userIsAdult = 'an adult'\n  else:\n    userIsAdult = 'just a child!'\n---\nmandatory: True\nquestion: Your age\nsubquestion: |\n  Thank you for completing this quiz\n  \n  You said your age was ${userAge}. Therefore, you are ${userIsAdult}\n  \nbuttons:\n  - Restart: restart\n  - Exit: exit\n---\n"})}),"\n",(0,i.jsxs)(t.p,{children:["As with ",(0,i.jsx)(t.code,{children:"Ch4_Age_Eligible_Reverse.yml"}),", we can also reverse the logic for our if statement here."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",metastring:'showLineNumbers title="Ch3_Age_Eligibility_Numbers.yml" showLineNumbers',children:"---\nquestion: |\n  What is your age?\nfields:\n  - no label: userAge\n    datatype: integer\n---\ncode: |\n  if userAge < 18:\n    userIsAdult = 'just a child!'\n  else:\n    userIsAdult = 'an adult'\n---\nmandatory: True\nquestion: Your age\nsubquestion: |\n  Thank you for completing this quiz\n  \n  You said your age was ${userAge}. Therefore, you are ${userIsAdult}\n  \nbuttons:\n  - Restart: restart\n  - Exit: exit\n---\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Now, our if statement on Line 7 is checking whether ",(0,i.jsx)(t.code,{children:"userAge"})," is less than 18. If they are, it sets the value of ",(0,i.jsx)(t.code,{children:"userIsAdult"})," to 'just a child'."]}),"\n",(0,i.jsx)(t.p,{children:"Both of these if statements work just as well as one another."}),"\n",(0,i.jsxs)(o.Quizlet,{title:"If Statement with Integers Quiz",children:[(0,i.jsxs)(t.p,{children:["We want to build a Docassemble application which will check whether ",(0,i.jsx)(t.code,{children:"userAge"})," contains a value of 65 or greater. What if statement clause should we use?"]}),(0,i.jsx)(o.Answer,{isCorrect:!0,children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"if userAge >= 65:"})})}),(0,i.jsx)(o.Answer,{children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"if userAge > 65:"})})}),(0,i.jsx)(o.Answer,{children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"if userAge > '65':"})})}),(0,i.jsx)(o.Explanation,{correctAnswer:!0,children:(0,i.jsx)(t.p,{children:"That's right! You have identified the correct test for whether a variable is equal to or greater a value. You have also recognised that you can only perform these operations on an integer, rather than a string."})}),(0,i.jsxs)(o.Explanation,{incorrectAnswer:!0,children:[(0,i.jsx)(t.p,{children:"That's not quite right. Remember:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["You have to make sure that you are testing for whether the variable contains a value ",(0,i.jsx)(t.em,{children:"equal to or greater"})," than 65; and,"]}),"\n",(0,i.jsxs)(t.li,{children:["You can only use mathematical equality operators such as ",(0,i.jsx)(t.code,{children:"<"})," and ",(0,i.jsx)(t.code,{children:">"})," on integers and floats"]}),"\n"]})]})]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}function m(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);