"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[1457],{9607:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"textbook/chapter_06/filtering/00-50","title":"Coding - Evaluate against criteria","description":"This part of our app is the most logically complex part.  It\'s going to take us some","source":"@site/docs/textbook/chapter_06/filtering/00-50.mdx","sourceDirName":"textbook/chapter_06/filtering","slug":"/textbook/chapter_06/filtering/00-50","permalink":"/textbook/docs/textbook/chapter_06/filtering/00-50","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Coding - Evaluate against criteria"},"sidebar":"textbookSidebar","previous":{"title":"Coding - List of Services","permalink":"/textbook/docs/textbook/chapter_06/filtering/00-40"},"next":{"title":"Coding - Display relevant services","permalink":"/textbook/docs/textbook/chapter_06/filtering/00-60"}}');var i=n(4848),o=n(8453),r=n(1428);n(3796),n(1472);const a={title:"Coding - Evaluate against criteria"},l=void 0,c={},d=[{value:"The parent loop",id:"the-parent-loop",level:2},{value:"The evaluation criteria",id:"the-evaluation-criteria",level:2},{value:"<code>MJFage_ok</code>",id:"mjfage_ok",level:3},{value:"<code>MJFgender_ok</code> and <code>MJFfamily_ok</code>",id:"mjfgender_ok-and-mjffamily_ok",level:3},{value:"<code>MJFlocation_ok</code>",id:"mjflocation_ok",level:3},{value:"Adding code to the relevant services list",id:"adding-code-to-the-relevant-services-list",level:3},{value:"Bringing it all together",id:"bringing-it-all-together",level:2},{value:"Testing",id:"testing",level:2},{value:"On the Importance of Design",id:"on-the-importance-of-design",level:4}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"This part of our app is the most logically complex part.  It's going to take us some\ntime to wade through it.  So, grab a coffee, grab some food, grab your therapist\nand let's get going!"}),"\n",(0,i.jsx)(t.h2,{id:"the-parent-loop",children:"The parent loop"}),"\n",(0,i.jsxs)(t.p,{children:["As we said in our ",(0,i.jsx)(t.a,{href:"00-20",children:"Introduction"})," the plan is to store all our decision-making code\nin ",(0,i.jsx)(t.code,{children:"process_data.yml"}),".  Also, in our ",(0,i.jsx)(t.a,{href:"00-10#evaluate-against-service-criteria",children:"design"})," we\nworked out pretty quickly that all our decision-making is going to be based around a\nloop that iterates over ",(0,i.jsx)(t.code,{children:"MJFservices"}),".  So, we may as well start with that:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",metastring:'title="process_data.yml" showLineNumbers',children:"---\ncode: |\n  for a_service in MJFservices:\n    # Loop body\n    # Lots of work will get done here!\n---\n"})}),"\n",(0,i.jsx)(t.h2,{id:"the-evaluation-criteria",children:"The evaluation criteria"}),"\n",(0,i.jsxs)(t.p,{children:["In our ",(0,i.jsx)(t.a,{href:"00-10#loop-body",children:"design"})," we also worked out that the loop body consisted of these components:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["determine if ",(0,i.jsx)(t.code,{children:"MJFage"})," fits in the age criteria;"]}),"\n",(0,i.jsxs)(t.li,{children:["determine if ",(0,i.jsx)(t.code,{children:"MJFgender"})," fits in the gender criteria;"]}),"\n",(0,i.jsxs)(t.li,{children:["determine if ",(0,i.jsx)(t.code,{children:"MJFlocation"})," fits in the location criteria;"]}),"\n",(0,i.jsxs)(t.li,{children:["determine if ",(0,i.jsx)(t.code,{children:"MJFfamily"})," fits in the family criteria;"]}),"\n",(0,i.jsx)(t.li,{children:"use a logical 'and' to ensure all these criteria are met;"}),"\n",(0,i.jsx)(t.li,{children:"add the service to a display list if the criteria are met."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Let's build out our loop body a bit more:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",metastring:'title="process_data.yml" showLineNumbers',children:"---\ncode: |\n  for a_service in MJFservices:\n\n    # Set MJFage_ok\n\n    # Set MJFgender_ok\n\n    # Set MJFlocation_ok\n\n    # Set MJFfamily_ok\n\n    # Test criteria and add to relevant services list\n---\n"})}),"\n",(0,i.jsx)(t.h3,{id:"mjfage_ok",children:(0,i.jsx)(t.code,{children:"MJFage_ok"})}),"\n",(0,i.jsxs)(t.p,{children:["We have ",(0,i.jsx)(t.a,{href:"00-10#the-age-question",children:"an idea"})," of how to code ",(0,i.jsx)(t.code,{children:"MJFage_ok"}),".  We need to replace\nthe numbers in our design with the actual ",(0,i.jsx)(t.code,{children:"min_age"})," and ",(0,i.jsx)(t.code,{children:"max_age"})," from the service in\n",(0,i.jsx)(t.code,{children:"a_service"}),".  Our ",(0,i.jsx)(t.code,{children:"MJFage_ok"})," test should look like this:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"MJFage_ok = a_service['min_age'] <= MJFage <= a_service['max_age']\n"})}),"\n",(0,i.jsxs)(t.h3,{id:"mjfgender_ok-and-mjffamily_ok",children:[(0,i.jsx)(t.code,{children:"MJFgender_ok"})," and ",(0,i.jsx)(t.code,{children:"MJFfamily_ok"})]}),"\n",(0,i.jsxs)(t.p,{children:["In our design we worked out that both the ",(0,i.jsx)(t.a,{href:"00-10#the-gender-question",children:"gender"}),"\nand ",(0,i.jsx)(t.a,{href:"00-10#the-family-question",children:"family"}),"  evalutaions were list membership tests.  The code\nfor both is in our design and is:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"MJFgender_ok = MJFgender in a_service['gender']\n"})}),"\n",(0,i.jsx)(t.p,{children:"and"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"MJFfamily_ok = MJFfamily in a_service['family']\n"})}),"\n",(0,i.jsx)(t.h3,{id:"mjflocation_ok",children:(0,i.jsx)(t.code,{children:"MJFlocation_ok"})}),"\n",(0,i.jsxs)(t.p,{children:["We concluded that ",(0,i.jsx)(t.a,{href:"00-10#the-location-question",children:"testing for locations"})," was a little more complex\nthan the other questions, this being because a user can select more than one location.  It follows\nthen that we must test each location the user selected against the location list in ",(0,i.jsx)(t.code,{children:"a_service"}),"\nand, if any location matches, then set ",(0,i.jsx)(t.code,{children:"MJFlocation_ok"})," to true."]}),"\n",(0,i.jsxs)(t.p,{children:["We can use iteration to solve the multiple location issue.  However, we also have a second issue.\nHow do we manage a situation where one location matches but the second does not?  How can we\nensure that ",(0,i.jsx)(t.code,{children:"MJFlocation_ok"})," remains ",(0,i.jsx)(t.code,{children:"True"})," in this context?"]}),"\n",(0,i.jsxs)(t.p,{children:["We manage this ",(0,i.jsx)(t.code,{children:"MJFlocation_ok"})," issue by setting it to ",(0,i.jsx)(t.code,{children:"False"})," ",(0,i.jsx)(t.em,{children:"before"})," we start the loop. As\nwe iterate over the locations, we change ",(0,i.jsx)(t.code,{children:"MJFlocation_ok"})," to ",(0,i.jsx)(t.code,{children:"True"})," if we find a  match\nbut if a location doesn't match we do nothing. What we're doing is starting out with\nthe assumption that we won't get any matches (ie: ",(0,i.jsx)(t.code,{children:"MJFlocation_ok == False"}),") and,\nif we find at least one match we set ",(0,i.jsx)(t.code,{children:"MJFlocation_ok"})," to ",(0,i.jsx)(t.code,{children:"True"}),".  It only\ntakes one match to permanently set ",(0,i.jsx)(t.code,{children:"MJFlocation_ok"})," to ",(0,i.jsx)(t.code,{children:"True"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Let's see this in code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:"showLineNumbers",children:"MJFlocation_ok = False\nfor a_location in MJFlocation.true_values():\n    if a_location in a_service['location']:\n        MJFlocation_ok = True\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Line 1 sets ",(0,i.jsx)(t.code,{children:"MJFlocation_ok"})," to ",(0,i.jsx)(t.code,{children:"False"})," as we just discussed.  Line 2 is the loop that iterates over\nthe user's selected locations.  Lines 3 and 4 are tbe body of this loop, that body being an if statement\nwhich sets ",(0,i.jsx)(t.code,{children:"MJFlocation_ok"})," to ",(0,i.jsx)(t.code,{children:"True"})," if a match is found but does nothing otherwise."]}),"\n",(0,i.jsx)(t.h3,{id:"adding-code-to-the-relevant-services-list",children:"Adding code to the relevant services list"}),"\n",(0,i.jsxs)(t.p,{children:["In our design we discussed how to ",(0,i.jsx)(t.a,{href:"00-10#the-decision",children:"test the four criteria together"})," and we even have\ncode ready to go.  What we don't have though is the code that does the adding to the relevant services\nlist.  For that matter, we don't have code that defines a relevant services list at all!  Maybe we need\nto start there."]}),"\n",(0,i.jsxs)(t.p,{children:["In order to add code to a relevant services list we need to define a list to begin with.  Let's call\nit ",(0,i.jsx)(t.code,{children:"MJFrelevant_services"}),".  We're going to define our list as a ",(0,i.jsx)(t.a,{href:"https://docassemble.org/docs/objects.html#DAList",children:(0,i.jsx)(t.code,{children:"DAList"})}),"\nso we can make use of some of the extra features a ",(0,i.jsx)(t.code,{children:"DAList"})," provides, in particular,\n",(0,i.jsx)(t.a,{href:"https://docassemble.org/docs/groups.html",children:"groups"})," and ",(0,i.jsx)(t.a,{href:"https://docassemble.org/docs/groups.html#details",children:"gathering"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["We use an ",(0,i.jsx)(t.a,{href:"https://docassemble.org/docs/initial.html#objects",children:(0,i.jsx)(t.code,{children:"objects"})})," block to declare our list."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",children:"---\nobjects:\n  - MJFrelevant_services: DAList.using(auto_gather=False)\n---\n"})}),"\n",(0,i.jsxs)(t.p,{children:["We'll put this ",(0,i.jsx)(t.code,{children:"objects"})," block at the top of our ",(0,i.jsx)(t.code,{children:"process_data.yml"}),".  It's good practice to put blocks\nthat declare stuff (like object blocks) before blocks that do stuff (like code blocks and question blocks)."]}),"\n",(0,i.jsx)(t.p,{children:"Now that we have a list we need to firstly initialise it:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"MJFrelevant_services.clear()\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This code will have to go as the first line of our ",(0,i.jsx)(t.a,{href:"#the-parent-loop",children:"code block"}),", before the parent loop."]}),"\n",(0,i.jsxs)(t.p,{children:["The adding part will be done by the ",(0,i.jsx)(t.code,{children:"append()"})," method."]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["The Docassemble ",(0,i.jsxs)(t.a,{href:"https://docassemble.org/docs/initial.html#DAList",children:["manual entry for ",(0,i.jsx)(t.code,{children:"DAList"})]})," discusses\nthe ",(0,i.jsx)(t.code,{children:"clear()"})," and ",(0,i.jsx)(t.code,{children:"append()"})," methods in a bit more detail."]})}),"\n",(0,i.jsxs)(t.p,{children:["Now we have enough to write the code for all our evaluation criteria.  Let's see what our ",(0,i.jsx)(t.code,{children:"process_data.yml"}),"\nshould look like."]}),"\n",(0,i.jsx)(t.h2,{id:"bringing-it-all-together",children:"Bringing it all together"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",metastring:'title="process_data.yml" showLineNumbers',children:"---\nobjects:\n  - MJFrelevant_services: DAList.using(auto_gather=False)\n---\ncode: |\n  MJFrelevant_services.clear()\n  for a_service in MJFservices:\n\n    # Set MJFage_ok\n    MJFage_ok = a_service['min_age'] <= MJFage <= a_service['max_age']\n\n    # Set MJFgender_ok\n    MJFgender_ok = MJFgender in a_service['gender']\n\n    # Set MJFlocation_ok\n    MJFlocation_ok = False\n    for a_location in MJFlocation.true_values():\n      if a_location in a_service['location']:\n        MJFlocation_ok = True\n\n    # Set MJFfamily_ok\n    MJFfamily_ok = MJFfamily in a_service['family']\n\n    # Test criteria and add to relevant services list\n    if MJFage_ok and MJFgender_ok and MJFlocation_ok and MJFfamily_ok:\n      MJFrelevant_services.append(a_service)\n\n  # How we tell Docassemble we've finished gathering relevant services\n  # into MJFrelevant_services\n  MJFrelevant_services.gathered = True\n---\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Before we move to testing let's discuss line 30 briefly.  As we already know, when\nDocassemble encounters a variable to display in question block it looks for the block\nto set a value for that variable.  A similar thing happens with ",(0,i.jsx)(t.code,{children:"DAList"}),"s but it is in\ntwo phases.  When Docassemble encounters a ",(0,i.jsx)(t.code,{children:"DAList"})," that needs to be displayed it does\ntwo things:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"it looks to define that list; and then"}),"\n",(0,i.jsx)(t.li,{children:"it tries to 'gather' the list."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["The first step is addressed by our ",(0,i.jsx)(t.code,{children:"objects"})," block.  It tells Docassemble that our\n",(0,i.jsx)(t.code,{children:"MJFrelevant_services"})," list is a DAList.  Docassemble tries to satisfy the 'gathering'\npart by looking for a ",(0,i.jsx)(t.code,{children:".gathered"})," property of our list.  We have set ",(0,i.jsx)(t.code,{children:".gathered"})," to\n",(0,i.jsx)(t.code,{children:"True"})," as the last line of our code block.  That means that Docassemble will execute\nour entire code block, thus populating ",(0,i.jsx)(t.code,{children:"MJFrelevant_services"}),", and then set\n",(0,i.jsx)(t.code,{children:"MJFrelevant_services.gathered"})," to true, telling Docassemble that ",(0,i.jsx)(t.code,{children:"MJFrelevant_services"}),"\nhas been gathered."]}),"\n",(0,i.jsx)(t.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsxs)(t.p,{children:["We can use a table block to test ",(0,i.jsx)(t.code,{children:"MJFrelevant_services"})," just like we tested ",(0,i.jsx)(t.code,{children:"MJFservices"}),"\n",(0,i.jsx)(t.a,{href:"00-40#testing",children:"previously"}),".  Let's add this table block to ",(0,i.jsx)(t.code,{children:"tests.yml"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"---\ntable: relevant_services_test_table\nrows: MJFrelevant_services\ncolumns:\n  - Name: row_item['name']\n  - Website: row_item['website']\n  - Age Range: |\n      \"{} to {}\".format(row_item['min_age'], row_item['max_age'])\n  - Gender: row_item['gender']\n  - Locations: row_item['location']\n  - Family: row_item['family']\n---\n"})}),"\n",(0,i.jsxs)(t.p,{children:["And add this line to the end of ",(0,i.jsx)(t.code,{children:"final_screen"})," in ",(0,i.jsx)(t.code,{children:"main.yml"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",children:"${ relevant_services_test_table}\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["Remember to leave a blank line between ",(0,i.jsx)(t.code,{children:"${services_test_table}"})," and ",(0,i.jsx)(t.code,{children:"${relevant_services_test_table}"}),"."]})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["Don't forget to add ",(0,i.jsx)(t.code,{children:"process_data.yml"})," to the ",(0,i.jsx)(t.code,{children:"include"})," block in ",(0,i.jsx)(t.code,{children:"main.yml"}),"!"]})}),"\n",(0,i.jsxs)(t.p,{children:["Run the program.  We should see, first, the answers to our questions, then the table of\n",(0,i.jsx)(t.code,{children:"MJFservices"})," and finally a second table showing only the relevant services filtered\naccording to the answers to our questions:"]}),"\n",(0,i.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding5.png"}),"\n",(0,i.jsx)(t.p,{children:"Our decision-making logic is now complete. It looks ugly but it's complete.\nWe now need to prepare the PDF and style our app to make it look a bit more pleasing to the eye."}),"\n",(0,i.jsxs)(t.admonition,{type:"note",children:[(0,i.jsx)(t.h4,{id:"on-the-importance-of-design",children:"On the Importance of Design"}),(0,i.jsxs)(t.p,{children:["Before we move on, the authors would like to draw your attention to the relative brevity of this\npart of the case study.  There was some reasonably somphisticated coding invovled yet it was\ndealt with relatively briefly without sacrificing clarity (in our opinion!).  The reason for this\nwas because of the effort we put into the design ",(0,i.jsx)(t.em,{children:"before"})," we started any coding.  Most of the\nbrains work was done at the design stage and not during coding.  This is evidenced by the constant\nreferences back to the design throughout this part of the chater."]}),(0,i.jsx)(t.p,{children:"Pelase keep this in mind.  It is often tempting  to skip past code design, much like it is\ntempting to skip past essay planning, and just 'smash it out'.  However, coding does not lend\nitself to smashing things out at all.  The time and effort you spend in designing your app will\nbe more than paid back to you at coding time."})]})]})}function f(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},3796:(e,t,n)=>{n.r(t),n.d(t,{F01:()=>r,F02:()=>l,F03:()=>d,F03a:()=>f,F04:()=>x,F05:()=>p,F05a:()=>j,F05b:()=>b,F06:()=>w,F06a:()=>_,F06b:()=>M,F07:()=>J});var s=n(4848),i=n(8453);function o(e){const t={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n    id1(Display a <b>list</b> of emergency<br>accommodation providers<br><b>tailored to</b> the <b>circumstances<br>of</b> each user)"})}function r(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}function a(e){const t={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n    id0(Ask user about their circumstances)\n    id0 --\x3e id1(Evaluate user's circumstances against list of services)\n    id1 --\x3e id2(Display list of relevant services)"})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}function c(e){const t={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n    id0(Ask user their age)\n    id1(Ask user their gender)\n    id2(Ask user for which locations<br>they are looking for services)\n    id3(Ask the user if they are<br>looking for accommodation for<br>themselves or their family)\n    \n    %% Invisible links so the boxes appear vertically\n    id0 ~~~ id1 ~~~ id2 ~~~ id3"})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function h(e){const t={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n    id0(Ask user their age)\n    id1(Ask user their gender)\n    id2(Ask user for which locations<br>they are looking for services)\n    id3(Ask the user if they are<br>looking for accommodation for<br>themselves or their family)\n\n    co0(Name: <code>MJFage</code><br><code>datatype: integer</code>)\n    co1(Name: <code>MJFgender</code><br>Present genders as radio buttons)\n    co2(Name: <code>MJFlocation</code><br>Use checkboxes so<br>user can select<br>multiple locations)\n    co3(Name: <code>MJFfamily</code><br>Use <code>yesnoradio</code> or regular radio buttons)\n\n    \n    %% Invisible links so the boxes appear vertically\n    id0 ~~~ id1 ~~~ id2 ~~~ id3\n\n    co0 --\x3e id0\n    co1 --\x3e id1\n    co2 --\x3e id2\n    co3 --\x3e id3\n\n\n    %% Define styles for flowchart items.  We want to make comments yellow\n    %% and have a larger font size for regular items\n    classDef commentClass fill:#faffd6,text-align:left\n    classDef questionClass fill:#ffe6bc\n    classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n    classDef itemClass font-size:16pt\n    classDef leftListClass text-align:left\n\n    class co0,co1,co2,co3 commentClass\n"})}function f(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}function m(e){const t={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n    id0(Define a list of services)\n    id1(Evaluate user circumstances<br>against service criteria)\n\n    %% invisible links to stack vertically\n    id0 ~~~ id1"})}function x(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}function u(e){const t={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n  id1(For each service in the list)\n  id1 --\x3e id2{{Does the service meet the user's circumstances?}}\n  id2 -- Yes --\x3e id3(Add the service to the display list)\n  id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}function g(e){const t={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n  subgraph Loop\n    direction TB\n    id1(For each service in the list)\n    subgraph Loop_Body\n        direction TB\n        id2{{Does the service meet the user's circumstances?}}\n        id2 -- Yes --\x3e id3(Add the service to the display list)\n        id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n    end\n    id1 --\x3e Loop_Body\n  end\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function j(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}function v(e){const t={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n  subgraph Loop\n    direction TB\n    id1(<code>for a_service in MJFservices:</code>)\n    subgraph Loop_Body\n        direction TB\n        id2{{Does the service meet the user's circumstances?}}\n        id2 -- Yes --\x3e id3(Add the service to the display list)\n        id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n    end\n    id1 --\x3e Loop_Body\n  end\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function b(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(v,{...e})}):v(e)}function y(e){const t={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n  subgraph Loop_Body\n      direction TB\n      id2{{Does the service meet the user's circumstances?}}\n      id2 -- Yes --\x3e id3(Add the service to the display list)\n      id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n  end\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function w(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(y,{...e})}):y(e)}function k(e){const t={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n  id1{{Is <code>MJFage</code> between the minimum and maximum age for <code>a_service</code>?}}\n  id2{{Is <code>MJFgender</code> one of the genders listed for <code>a_service</code>?}}\n  id3{{Do any of the locations in <code>MJFlocation</code> match<br>up with the list of locations in <code>a_service</code>?}}\n  id4{{Does <code>MJFfamily</code> match up with any of the<br>family list items in <code>a_service</code>?}}\n\n  id5{{Is the answer 'Yes' to all of the above questions?}}\n  id5 -- Yes --\x3e id6(Add the service to the display list)\n  id5 -- No --\x3e id7(Do not add the service<br>to the display list)\n\n  id1 ~~~ id2 ~~~ id3 ~~~ id4 ~~~ id5\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id1,id2,id3,id4,id5 questionClass"})}function _(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(k,{...e})}):k(e)}function F(e){const t={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n  id1(Ask the age question and store the result in <code>MJFage_ok</code>)\n  id2(Ask the gender question and store the result in <code>MJFgender_ok</code>)\n  id3(Ask the location question and store the result in <code>MJFlocation_ok</code>)\n  id4(Ask the age question and store the result in <code>MJFage_ok</code>)\n\n  id5{{Is each of <code>MJFage_ok</code>, <code>MJFgender_OK</code>, <code>MJFlocation_ok</code> and <code>MJFfamily_ok</code> equal to <code>True</code>?}}\n  id5 -- Yes --\x3e id6(Add the service to the display list)\n  id5 -- No --\x3e id7(Do not add the service<br>to the display list)\n\n  id1 ~~~ id2 ~~~ id3 ~~~ id4 ~~~ id5\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id1,id2,id3,id4,id5 questionClass"})}function M(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(F,{...e})}):F(e)}function D(e){const t={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n  id0(for each location selected by the user)\n  id0 --\x3e id1{{\"Is the location in <code>a_service['location']</code>?\"}}\n  id1 -- Yes --\x3e id2(Set <code>MJFlocation_ok</code> to <code>True</code>)\n  id1 -- No --\x3e id3(Set <code>MJFlocation_ok</code> to <code>False</code><br>but only if it hasn't already been set to <code>True</code>)\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id1 questionClass"})}function J(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(D,{...e})}):D(e)}},1472:(e,t,n)=>{n.r(t),n.d(t,{MappingTable:()=>l,ServiceTable:()=>r});var s=n(4848),i=n(8453);function o(e){const t={a:"a",...(0,i.R)(),...e.components};return(0,s.jsxs)("table",{className:"complexDataTableExamples",children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Name"}),(0,s.jsx)("th",{children:"Website"}),(0,s.jsx)("th",{children:"Age limits"}),(0,s.jsx)("th",{children:"Genders"}),(0,s.jsx)("th",{children:"Locations"}),(0,s.jsx)("th",{children:"Family or Single"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"ABC Services"}),(0,s.jsx)("td",{children:(0,s.jsx)(t.a,{href:"https://abcsvc.org.au",children:"https://abcsvc.org.au"})}),(0,s.jsx)("td",{children:"18 - 65"}),(0,s.jsx)("td",{children:"Male, Female"}),(0,s.jsx)("td",{children:"North, East"}),(0,s.jsx)("td",{children:"Families, Singles"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"WH Youth"}),(0,s.jsx)("td",{children:(0,s.jsx)(t.a,{href:"https://whyouth.org.au",children:"https://whyouth.org.au"})}),(0,s.jsx)("td",{children:"12 - 17"}),(0,s.jsx)("td",{children:"Male, Female"}),(0,s.jsx)("td",{children:"South"}),(0,s.jsx)("td",{children:"Singles"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"St Mary's Shelter"}),(0,s.jsx)("td",{children:(0,s.jsx)(t.a,{href:"https://stmarys.org.au",children:"https://stmarys.org.au"})}),(0,s.jsx)("td",{children:"12 and over"}),(0,s.jsx)("td",{children:"Female"}),(0,s.jsx)("td",{children:"North"}),(0,s.jsx)("td",{children:"Singles"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"MHI Men's Health"}),(0,s.jsx)("td",{children:(0,s.jsx)(t.a,{href:"https://mhimh.org.au",children:"https://mhimh.org.au"})}),(0,s.jsx)("td",{children:"18 and over"}),(0,s.jsx)("td",{children:"Male"}),(0,s.jsx)("td",{children:"North, West"}),(0,s.jsx)("td",{children:"Singles"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"DE Family Shelter"}),(0,s.jsx)("td",{children:(0,s.jsx)(t.a,{href:"https://defsupport.org.au",children:"https://defsupport.org.au"})}),(0,s.jsx)("td",{children:"18 - 65"}),(0,s.jsx)("td",{children:"Male, Female"}),(0,s.jsx)("td",{children:"North, East, West, South"}),(0,s.jsx)("td",{children:"Families"})]})]})}function r(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}function a(e){const t={p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)("table",{className:"complexDataTableExamples",children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Column Name"}),(0,s.jsx)("th",{children:"Key Name"}),(0,s.jsx)("th",{children:"Data type"}),(0,s.jsx)("th",{children:"Comments"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Name"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"name"})}),(0,s.jsx)("td",{children:"String"}),(0,s.jsx)("td",{colspan:"2",children:"These first two keys store simple string data types"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Website"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"website"})}),(0,s.jsx)("td",{children:"String"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Age limits"}),(0,s.jsxs)("td",{children:[(0,s.jsx)("code",{children:"min_age"})," and ",(0,s.jsx)("code",{children:"max_age"})]}),(0,s.jsx)("td",{children:"Integer"}),(0,s.jsx)("td",{children:(0,s.jsx)(t.p,{children:"It's easier for us to split out the age limit into minimum and\nmaximum age variables and test that the user's age falls inside\nthe min and max ages. We will need additional code to cope with\nthe 'and over' requirements in some of the data.  We will deal\nwith this when we code the age test."})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Genders"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"gender"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)(t.p,{children:"A list of strings representing genders.  At a minimum we should\nhave"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Female"}),(0,s.jsx)("li",{children:"Male"}),(0,s.jsx)("li",{children:"Other"})]}),(0,s.jsx)(t.p,{children:"This will be driven by the data given to us by ABC."})]}),(0,s.jsx)("td",{children:(0,s.jsx)(t.p,{children:"A user will only be allowed to select one gender as a response."})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Locations"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"location"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)(t.p,{children:"A list of locations."}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"North"}),(0,s.jsx)("li",{children:"South"}),(0,s.jsx)("li",{children:"East"}),(0,s.jsx)("li",{children:"West"})]})]}),(0,s.jsx)("td",{children:"It appears from the ABC data that this is suitable for their purposes"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Family or Single"}),(0,s.jsx)("td",{children:(0,s.jsx)("code",{children:"family"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)(t.p,{children:"A list consisting of one or all of"}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Family"}),(0,s.jsx)("li",{children:"Single"})]})]}),(0,s.jsx)("td",{children:(0,s.jsx)(t.p,{children:"Agencies that cater for all clients (ie: those looking for\naccommodation for themselves and those looking for accommodation\nfor themselves and their family) should have both items in their\ndata entry.  Otherwise, the appropriate list item is specified\nie: the data type will be a list containing one item."})})]})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);