"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[2744],{6434:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>x,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var s=t(5893),i=t(1151),r=t(9853);const o={title:"Testing Variables"},a=void 0,l={id:"textbook/chapter_03/00-30",title:"Testing Variables",description:"Now that we know about",source:"@site/docs/textbook/chapter_03/00-30.mdx",sourceDirName:"textbook/chapter_03",slug:"/textbook/chapter_03/00-30",permalink:"/textbook/docs/textbook/chapter_03/00-30",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Testing Variables"},sidebar:"textbookSidebar",previous:{title:"Data Types",permalink:"/textbook/docs/textbook/chapter_03/00-20"},next:{title:"Code Blocks",permalink:"/textbook/docs/textbook/chapter_03/00-40"}},h={},d=[{value:"Everything is True or False",id:"everything-is-true-or-false",level:2},{value:"Testing for Equality",id:"testing-for-equality",level:2},{value:"Testing for inequality",id:"testing-for-inequality",level:2},{value:"Mathematical tests",id:"mathematical-tests",level:2},{value:"String tests",id:"string-tests",level:2},{value:"Logic tests",id:"logic-tests",level:2}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h2:"h2",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Now that we know about ",(0,s.jsx)(r.DisplayChapter,{chapter:"chapter_03",target:"00-20#booleans",text:"booleans",lower:!0}),"\nit's time to put them to good use."]}),"\n",(0,s.jsx)(n.p,{children:"Testing is at the heart of driving your app's logic.  A central premise of\ncoding is testing the truth or falsity of a proposition (usually the value of a variable)\nand making logic decisions accordingly."}),"\n",(0,s.jsx)(n.h2,{id:"everything-is-true-or-false",children:"Everything is True or False"}),"\n",(0,s.jsxs)(n.p,{children:["We have ",(0,s.jsx)(r.DisplayChapter,{chapter:"chapter_03",target:"00-20#booleans",text:"slready discussed",lower:!0}),"\nthe re-expression of questions into statements that can be tested to be true or false\n(eg: 'Are you over 18?' -> 'You are over 18')."]}),"\n",(0,s.jsx)(n.p,{children:"Let's use a simple example program that determines whether a user falls in the\ncatchment are for a fictional 'Western Legal' community legal centre.  Western Legal\nhave told us they only deal with people who live in the west of Adelaide and they\nwant the app to let potential clients know whether they fall in Western's catchment\narea or not."}),"\n",(0,s.jsx)(n.p,{children:"We are going to write a simple program to deliver this.  Our program will need to make\na decision:  Is the user in the catchment area or not?  To make this decision we\nneed to know where the user lives.  So, our logic flow might be something like this:"}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart TD;\n    id0(Ask the user where they live)\n    id0 --\x3e id1{{Did the user say they<br>live in the West<br> of Adelaide?}}\n    id1 -- Yes --\x3e id2(They are in the catchment area)\n    id1 -- No --\x3e id3(They are not in the catchment area)"}),"\n",(0,s.jsxs)(n.p,{children:["Ultimately, our simple program is going to display two lines.",(0,s.jsx)(n.br,{}),"\n","the first line\nrepeats back to the user what they input, and the second states whether the user is\nin the catchment area or not."]}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_03/testing2.png"}),"\n",(0,s.jsx)(n.p,{children:"Our decision will drive what we put on the second line."}),"\n",(0,s.jsx)(n.p,{children:"As we've already learnt, we can't test questions.  We can only test the truth\n(or otherwise) of\nstatements.  If we convert that flowchart into a statement it might read something like"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"If the user lives in the west then they are in the catchment area"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Or, to put it in a more 'code-like' way:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"if the user chose 'West' then tell them they are in the catchment area."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When we ask that first question we need store the answer.  Let's store the answer\nin a variable called ",(0,s.jsx)(n.code,{children:"MJFarea"}),".\nNow we can get even more code-y and re-express our proposition as follows:"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["If the value of ",(0,s.jsx)(n.code,{children:"MJFarea"})," equals 'West' then tell them they're in the catchment area."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"One more step:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["If the statement ",(0,s.jsxs)(n.em,{children:['"The value of ',(0,s.jsx)(n.code,{children:"MJFarea"})," equals ",(0,s.jsx)(n.code,{children:"'West'"}),'"']})," is true,\nthen tell the user they're in the catchment area."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now we have something we can code, because we can test for equality."}),"\n",(0,s.jsx)(n.h2,{id:"testing-for-equality",children:"Testing for Equality"}),"\n",(0,s.jsx)(n.p,{children:"This is by far the most common test that you will use.  A lot of program logic will depend\non collecting information from a user and then checking it against known criteria,\nmuch like the example above."}),"\n",(0,s.jsxs)(n.p,{children:["Python provides an ",(0,s.jsx)(n.strong,{children:"equality operator"}),", being a 'double-equals' sign (",(0,s.jsx)(n.code,{children:"=="}),").  This\nis used much like an equals (",(0,s.jsx)(n.code,{children:"="}),") in mathmeatics in that you put what you want to\ntest on both sides of the operator eg:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"MJFarea == 'West'\n"})}),"\n",(0,s.jsxs)(n.p,{children:['This statement above is how we express "The value of ',(0,s.jsx)(n.code,{children:"MJFarea"})," is equal to ",(0,s.jsx)(n.code,{children:"'West'"}),'"\nin code.  The statment uses ',(0,s.jsx)(n.code,{children:"=="})," to\ntest if the value of ",(0,s.jsx)(n.code,{children:"MJFarea"})," is equal to ",(0,s.jsx)(n.code,{children:"West"}),".  If it is,\nthen the result of that statement is ",(0,s.jsx)(n.code,{children:"True"}),", otherwise it is ",(0,s.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Let's update our flowchart and express the decision a true/false proposition"}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart TD;\n    id0(Ask the user where they live<br>and store in <code>MJFarea</code>)\n    id0 --\x3e id1{{<code>MJFarea == 'West'</code>}}\n    id1 -- True --\x3e id2(They are in the catchment area)\n    id1 -- False --\x3e id3(They are not in the catchment area)"}),"\n",(0,s.jsx)(n.p,{children:"And now we can express this as code."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"mandatory: True\nquestion: Western Legal Catchment Area\nsubquestion: |\n  You stated that you live in the **${MJFarea}** of Adelaide\n\n  # highlight-next-line\n  % if MJFarea == 'West':\n  You are in the catchment area\n  % else:\n  You are not in the catchment area\n  % endif\n---\nquestion: Residential Location\nsubquestion: |\n  In which part of Adelaide do you live?\nfields:\n  - no label: MJFarea\n    input type: radio\n    choices:\n      - North\n      - South\n      - East\n      - West\n---\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(r.DisplayGlossaryItem,{item:"ifstatement"})," that starts on line 6 (highlighted)\ntakes our\ntrue/false proposition and evaluates it.  If the proposition returns ",(0,s.jsx)(n.code,{children:"True"})," then\nthe code on line 7 is displayed.  If the proposition returns ",(0,s.jsx)(n.code,{children:"False"})," then the code\non line 9 is displayed."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The code above uses an ",(0,s.jsx)(r.DisplayGlossaryItem,{item:"ifstatement"}),".  If statements are\ncovered in ",(0,s.jsx)(r.DisplayChapter,{chapter:"chapter_04"}),"."]})}),"\n",(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsxs)(n.mdxAdmonitionTitle,{children:["Don't confuse the equality (",(0,s.jsx)(n.code,{children:"=="}),") and assignment (",(0,s.jsx)(n.code,{children:"="}),") operators!!"]}),(0,s.jsxs)(n.p,{children:["A common trap is to accidentally use the ",(0,s.jsx)(n.code,{children:"="})," operator instead of ",(0,s.jsx)(n.code,{children:"=="}),"\nwhen testing for equality."]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Do not do this!!!"})}),(0,s.jsxs)(n.p,{children:["You must be very careful to avoid confusing ",(0,s.jsx)(n.code,{children:"=="})," and ",(0,s.jsx)(n.code,{children:"="}),".  The ",(0,s.jsx)(n.code,{children:"=="}),"\noperator is used to test if\nsomething is equal to something else.  The ",(0,s.jsx)(n.code,{children:"="})," operator is used to assign a value\nto a variable.  If you confuse the two, at best, you'll be presented with an error when\nyou debug your program, but at worst your program may run but behave unpredictably."]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Be careful!!!  This is a common trap for new coders!"})})]}),"\n",(0,s.jsxs)(r.Quizlet,{children:[(0,s.jsxs)(n.p,{children:["Which of these statements correctly expresses the true/false proposition\n'the value of ",(0,s.jsx)(n.code,{children:"MJFage"})," is 18'?"]}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"MJFage = 18"})})}),(0,s.jsx)(r.Answer,{isCorrect:!0,children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"MJFage == 18"})})}),(0,s.jsxs)(r.Explanation,{correctAnswer:!0,children:[(0,s.jsx)(n.p,{children:"Correct!"}),(0,s.jsxs)(n.p,{children:["We can't stress enough the importance of not confusing ",(0,s.jsx)(n.code,{children:"="})," and ",(0,s.jsx)(n.code,{children:"=="}),"."]}),(0,s.jsxs)(n.p,{children:["Also, note that we've used ",(0,s.jsx)(n.code,{children:"=="})," to check numbers are equal.\nThe ",(0,s.jsx)(n.code,{children:"=="})," operator can be used to test equality for almost any data type."]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"testing-for-inequality",children:"Testing for inequality"}),"\n",(0,s.jsxs)(n.p,{children:["We use the *",(0,s.jsx)(n.em,{children:"not equals"})," operator (",(0,s.jsx)(n.code,{children:"!="}),") for testing inequality.  The operator is used\nin the same was as ",(0,s.jsx)(n.code,{children:"=="})," but returns the opposite result.  So, for example, if we know\nthat the value of ",(0,s.jsx)(n.code,{children:"MJFarea"})," is ",(0,s.jsx)(n.code,{children:"'West'"}),", then this code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"MJFarea == 'West'\n"})}),"\n",(0,s.jsxs)(n.p,{children:['would return true, as we have already seen.  It follows that the true/false proposition\n"',(0,s.jsx)(n.code,{children:"MJFarea"})," ",(0,s.jsx)(n.em,{children:"does not equal"})," ",(0,s.jsx)(n.code,{children:"'West'"}),'" would be false.  Therefore, this code would\nreturn false:']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"MJFarea != 'West'\n"})}),"\n",(0,s.jsx)(n.p,{children:"Inequality tests are useful as exclusion criteria.  For example, a future version of our\napp may exclude people from contacting Western Legal if they did not live in the West\nof Adelaide."}),"\n",(0,s.jsx)(n.h2,{id:"mathematical-tests",children:"Mathematical tests"}),"\n",(0,s.jsx)(n.p,{children:"When it comes to dealing with numbers (ie: floats and integers), Python provides\na number of tests in addition to equality.  These equate to the 'greater than',\n'less than' tests you would have learnt in maths.  Excepting the 'in betwteen' test,\nthese tests function\nthe same way as the equality operator, in that the test subjects are placed on the\nleft and right.  The tests are set out in the table below"}),"\n",(0,s.jsxs)("table",{id:"mathCompTable",children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Description"}),(0,s.jsx)("th",{id:"mathCompTableCol2",children:"Operator"}),(0,s.jsx)("th",{id:"mathCompTableCol3",children:"Example Test"}),(0,s.jsx)("th",{children:"Comments"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Greater than"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:">"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"MJFage > 18"})}),(0,s.jsxs)("td",{children:["The value of ",(0,s.jsx)(n.code,{children:"MJFage"})," is 19 or more"]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Greater than or equal to"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:">="})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"MJFage >= 18"})}),(0,s.jsxs)("td",{children:["The value of ",(0,s.jsx)(n.code,{children:"MJFage"})," is 18 or more"]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Less than"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"<"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"MJFage < 18"})}),(0,s.jsxs)("td",{children:["The value of ",(0,s.jsx)(n.code,{children:"MJFage"})," is 17 or less"]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Less than or equal to"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"<="})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"MJFage <= 18"})}),(0,s.jsxs)("td",{children:["The value of ",(0,s.jsx)(n.code,{children:"MJFage"})," is 18 or less"]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{rowSpan:4,id:"mathCompInBetweenCell",children:"In between"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"...<=...<..."})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"18 <= MJFage < 65"})}),(0,s.jsxs)("td",{children:["The value of ",(0,s.jsx)(n.code,{children:"MJFage"})," is between 18 and 64"]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"...<...<=..."})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"18 < MJFage <= 65"})}),(0,s.jsxs)("td",{children:["The value of ",(0,s.jsx)(n.code,{children:"MJFage"})," is between 19 and 65"]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"...<=...<=..."})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"18 <= MJFage <= 65"})}),(0,s.jsxs)("td",{children:["The value of ",(0,s.jsx)(n.code,{children:"MJFage"})," is between 18 and 65"]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"...<...<..."})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"18 < MJFage < 65"})}),(0,s.jsxs)("td",{children:["The value of ",(0,s.jsx)(n.code,{children:"MJFage"})," is between 19 and 64"]})]})]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.p,{children:"The four 'In between' operators can be hard to decipher.  It's best to analyse them\nas two expressions from left to right.  For example, the first example:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"18 <= MJFage < 65\n"})}),(0,s.jsx)(n.p,{children:"could be read as:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["'18 is less than or equal to ",(0,s.jsx)(n.code,{children:"MJFage"}),"'; and then"]}),"\n",(0,s.jsxs)(n.li,{children:["'",(0,s.jsx)(n.code,{children:"MJFage"})," is less than 65'."]}),"\n"]}),(0,s.jsx)(n.p,{children:"If both of these statements are true then the test passes."})]}),"\n",(0,s.jsxs)(r.Quizlet,{children:[(0,s.jsxs)(n.p,{children:["Give this a go.  Which of the below statements says that ",(0,s.jsx)(n.code,{children:"MJFyearborn"})," is between\n2000 and 2010?"]}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"2000 <= MJFyearborn < 2010"})})}),(0,s.jsx)(r.Answer,{isCorrect:!0,children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"2000 <= MJFyearborn <= 2010"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"1999 < MJFyearborn < 2010"})})}),(0,s.jsxs)(r.Explanation,{correctAnswer:!0,children:[(0,s.jsx)(n.p,{children:"Correct!"}),(0,s.jsxs)(n.p,{children:["The first and third tests fail because ",(0,s.jsx)(n.code,{children:"MJFage"})," must be ",(0,s.jsx)(n.em,{children:"less than"})," and not\n",(0,s.jsx)(n.em,{children:"less than and equal to"})," 2010.  We have to include 2000 and 2010 in our in\nbetween test."]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"string-tests",children:"String tests"}),"\n",(0,s.jsx)(n.p,{children:"We've already seen how to test if strings are equal.  The mathematical tests described\nabove are not so useful for strings and so we will not discuss them in this textbook."}),"\n",(0,s.jsxs)(n.p,{children:["We will however cover the ",(0,s.jsx)(n.code,{children:"in"})," test.  The word ",(0,s.jsx)(n.code,{children:"in"})," is used as an operator to determine\nwhether one string forms a part of another.  For example, the following statement would\nreturn ",(0,s.jsx)(n.code,{children:"True"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'hell' in 'hello'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The opposite test is ",(0,s.jsx)(n.code,{children:"not in"}),".  This code would return false:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'hell' not in 'hello'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["There are a number of other tests in addition to the mathematical tests that can be\nperformed on strings. Python provides a very powerful set of tests for strings,\nincluding looking for substrings, looking for patterns, accounting for upper and\nlower case characters etc.  However, these are beyond the scope of this textbook. You\nshould find that the ",(0,s.jsx)(n.code,{children:"=="})," and ",(0,s.jsx)(n.code,{children:"in"})," operators should be enough."]}),"\n",(0,s.jsxs)(n.p,{children:["If you'd like more information on working with strings,\nconsult the ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3/",children:"Python documentation"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"logic-tests",children:"Logic tests"}),"\n",(0,s.jsx)(n.p,{children:"We have seen how to express one true/false proposition as code.  What happens when\nwe need to test more than one proposition?  For example, let's say that our Western\nLegal app needs not only to check if a user is in the correct catchment area, but also\nimpose an income threshold.  Income thresholds are a common practice with community\nlegal centres so they ensure that the most needy are provided with legal services."}),"\n",(0,s.jsxs)(n.p,{children:["Let's say that Western Legal have told that they will only accept clients if they\nare in the catchment area ",(0,s.jsx)(n.em,{children:"and"})," have earnt less than $30,000.00 in the last financial\nyear."]}),"\n",(0,s.jsx)(n.p,{children:"Our application is now an eligibility advisor.  Let's say it will display this to a\nuser:"}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_03/testing3.png"}),"\n",(0,s.jsx)(n.p,{children:"We now have two propositions to test:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"that the user lives in the west of Adelaide; and"}),"\n",(0,s.jsx)(n.li,{children:"that the user earns less than $30,000 per year."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In our previous code, we expressed our true/false proposition in this way:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"MJFarea == 'West'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["and embedded it into this ",(0,s.jsx)(r.DisplayGlossaryItem,{item:"ifstatement"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"  #highlight-next-line\n  % if MJFarea == 'West':\n  You are in the catchment area\n  % else:\n  You are not in the catchment area\n  % endif\n"})}),"\n",(0,s.jsx)(n.p,{children:"This logic is sound.  The highlighted line makes the decision, and the subsequent\nline in the if statement carry out the effects of that decision (in or not in the\ncatchment area)."}),"\n",(0,s.jsxs)(n.p,{children:["Even though we have two criteria, we still want to use the same structure ie: one\nif statement with two branches.  To do so we need to have ",(0,s.jsx)(n.em,{children:"two"})," propositions on that\n",(0,s.jsx)(n.code,{children:"% if"})," line."]}),"\n",(0,s.jsx)(n.p,{children:"We can do that."}),"\n",(0,s.jsx)(n.p,{children:"Python provides a set of logical connectors that allows us to join multiple true/false\npropositions together.  These are:"}),"\n",(0,s.jsxs)("table",{id:"mathCompTable",children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Connector"}),(0,s.jsx)("th",{children:"Description"}),(0,s.jsx)("th",{id:"logicTableCol3",children:"Example"}),(0,s.jsx)("th",{children:"Comments"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"and"})}),(0,s.jsxs)("td",{children:["Both propositions must be ",(0,s.jsx)(n.code,{children:"True"})]}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"MJFage == 18 and MJFarea == 'West'"})}),(0,s.jsxs)("td",{children:["This expression would evaluate to true only\nif both the value of ",(0,s.jsx)(n.code,{children:"MJFage"})," vaule was 18 ",(0,s.jsx)(n.em,{children:"and"}),"\nthe value of ",(0,s.jsx)(n.code,{children:"MJFarea"})," was west."]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"or"})}),(0,s.jsxs)("td",{children:["Any one of the propositions must be ",(0,s.jsx)(n.code,{children:"True"})]}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"MJFage == 18 or MJFarea == 'West'"})}),(0,s.jsxs)("td",{children:["This expression would evaluate to ",(0,s.jsx)(n.code,{children:"True"})," if any one, or both,\nof the propositions are True."]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"not"})}),(0,s.jsxs)("td",{children:["The proposition that follows ",(0,s.jsx)(n.code,{children:"not"})," is not true"]}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"MJFage == 18 and not MJFarea == 'West'"})}),(0,s.jsxs)("td",{children:["This expression would evaluate to ",(0,s.jsx)(n.code,{children:"True"})," only if ",(0,s.jsx)(n.code,{children:"MJFage"}),"\nwas 18 and ",(0,s.jsx)(n.code,{children:"MJFarea"})," was ",(0,s.jsx)(n.em,{children:"not"})," ",(0,s.jsx)(n.code,{children:"'West'"}),"."]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["It is possible to have more than one set of connectors.  The following example returns\n",(0,s.jsx)(n.code,{children:"True"})," only if ",(0,s.jsx)(n.code,{children:"MJFage"})," is 18, ",(0,s.jsx)(n.code,{children:"MJFincome"})," is less than $30,000 and ",(0,s.jsx)(n.code,{children:"MJFarea"})," is 'West'"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"MJFage == 18 and MJFincome < 30000 and MJFarea == 'West'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can also group connectors together using parentheses (",(0,s.jsx)(n.code,{children:"()"}),").  For example, the below\ncode is true if ",(0,s.jsx)(n.code,{children:"MJFage"})," is greater than or equal to 18 and ",(0,s.jsx)(n.code,{children:"MJFarea"})," is either ",(0,s.jsx)(n.code,{children:"'West'"}),"\nor ",(0,s.jsx)(n.code,{children:"'South'"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"MJFage >= 18 and (MJFarea == 'West' or MJFarea == 'South')\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Let's return back to our instructions.  We've been asked to tell users they are\neligible for Western Legal services only if they live in the west of Adelaide and\nthey earn less than $30,000.  Clearly we now need to collect two pieces of information.\nOne, we already have in ",(0,s.jsx)(n.code,{children:"MJFarea"}),".  Let's say we'll collect the user's income in\na new variable called ",(0,s.jsx)(n.code,{children:"MJFincome"}),".  Once we have both, we can modify that ",(0,s.jsx)(n.code,{children:"% if"}),"\nstatement using an ",(0,s.jsx)(n.code,{children:"and"})," connector to ensure that both conditions are true in order\nfor a user to be eligible:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"  % if MJFarea == 'West' and MJFincome <= 30000:\n"})}),"\n",(0,s.jsx)(n.p,{children:"That should do it!"}),"\n",(0,s.jsx)(n.p,{children:"Here is example code that implements our modified app.  Feel free to copy it into your\nplayground, run it and modify it."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nmandatory: True\nquestion: Western Legal Triage\nsubquestion: |\n  You stated that you live in the **${MJFarea}** of Adelaide\n  and that last financial year you earnt **${currency(MJFincome)}**.\n  \n  % if MJFarea == 'West' and MJFincome <= 30000:\n  You **are** eligible for our services.\n  % else:\n  You **are not** eligible for our services.\n  % endif\n---\nquestion: Residential Locations\nsubquestion: |\n  In which part of Adelaide do you live?\nfields:\n  - no label: MJFarea\n    input type: radio\n    choices:\n      - North\n      - South\n      - East\n      - West\n---\nquestion: Income threshold\nsubquestion: |\n  How much did you earn last financial year?\nfields:\n  - no label: MJFincome\n    datatype: currency\n---\n"})}),"\n",(0,s.jsxs)(r.Quizlet,{children:[(0,s.jsx)(n.p,{children:"Which of these correctly expresses the phrase 'the user lives in SA or NSW'?"}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"MJFstate == 'SA'"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"MJFstate = 'SA' or 'NSW'"})})}),(0,s.jsx)(r.Answer,{isCorrect:!0,children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"MJFstate == 'SA' or MJFstate == 'NSW'"})})}),(0,s.jsx)(r.Answer,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"MJFstate == 'SA' or 'NSW'"})})}),(0,s.jsxs)(r.Explanation,{correctAnswer:!0,children:[(0,s.jsx)(n.p,{children:"Correct!"}),(0,s.jsxs)(n.p,{children:["First, you must use ",(0,s.jsx)(n.code,{children:"=="})," and not ",(0,s.jsx)(n.code,{children:"="})," when testing for equality.  Second, because\nwe are testing for two conditions (whether the user lives in SA or whether the\nuser lives in NSW) we must have two equality tests.  Syntax such as ",(0,s.jsx)(n.code,{children:"MJFstate == 'SA' or 'NSW'"}),"\nwould, at best, cause an error and at worst would cause your program to behave\nunpredictably."]})]})]})]})}function x(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);