"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[5073],{2431:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>S,contentTitle:()=>P,default:()=>A,frontMatter:()=>_,metadata:()=>D,toc:()=>E});var t=n(5893),i=n(1151),a=n(9853);const r=[];function o(e){return(0,t.jsxs)("table",{className:"complexDataTableExamples",children:[(0,t.jsx)("tr",{children:(0,t.jsx)("th",{children:"Student Names"})}),(0,t.jsx)("tr",{children:(0,t.jsx)("td",{children:"Ida Noe"})}),(0,t.jsx)("tr",{children:(0,t.jsx)("td",{children:"Hugo First"})}),(0,t.jsx)("tr",{children:(0,t.jsx)("td",{children:"Moda Lawn"})}),(0,t.jsx)("tr",{children:(0,t.jsx)("td",{children:"Kate Jupp"})}),(0,t.jsx)("tr",{children:(0,t.jsx)("td",{children:"Ayfor Gott"})}),(0,t.jsx)("tr",{children:(0,t.jsx)("td",{children:"Justin Thyme"})}),(0,t.jsx)("tr",{children:(0,t.jsx)("td",{children:"Ray Member"})}),(0,t.jsx)("tr",{children:(0,t.jsx)("td",{children:"Studie Harde"})}),(0,t.jsx)("tr",{children:(0,t.jsx)("td",{children:"Slacke Hearse"})})]})}function l(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o()}function d(e){const s={a:"a",...(0,i.a)(),...e.components};return(0,t.jsxs)("table",{className:"complexDataTableExamples cdtLeft",children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"First Name"}),(0,t.jsx)("td",{children:"Mark"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Last Name"}),(0,t.jsx)("td",{children:"Ferraretto"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Email"}),(0,t.jsx)("td",{children:(0,t.jsx)(s.a,{href:"mailto:mark@f.com",children:"mark@f.com"})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Phone"}),(0,t.jsx)("td",{children:"08 1234 5678"})]})]})}function c(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}const h=[];function m(e){const s={a:"a",...(0,i.a)(),...e.components};return(0,t.jsxs)("table",{className:"complexDataTableExamples",children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"First Name"}),(0,t.jsx)("th",{children:"Last Name"}),(0,t.jsx)("th",{children:"Email"}),(0,t.jsx)("th",{children:"Phone"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Ida"}),(0,t.jsx)("td",{children:"Noe"}),(0,t.jsx)("td",{children:(0,t.jsx)(s.a,{href:"mailto:ida.noe@findme.com",children:"ida.noe@findme.com"})}),(0,t.jsx)("td",{children:"08 2839 2823"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Hugo"}),(0,t.jsx)("td",{children:"First"}),(0,t.jsx)("td",{children:(0,t.jsx)(s.a,{href:"mailto:hugo.first@noway.com",children:"hugo.first@noway.com"})}),(0,t.jsx)("td",{children:"08 3829 3822"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Moda"}),(0,t.jsx)("td",{children:"Lawn"}),(0,t.jsx)("td",{children:(0,t.jsx)(s.a,{href:"mailto:moda.lawn@jims.com.au",children:"moda.lawn@jims.com.au"})}),(0,t.jsx)("td",{children:"08 7392 5555"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Kate"}),(0,t.jsx)("td",{children:"Jupp"}),(0,t.jsx)("td",{children:(0,t.jsx)(s.a,{href:"mailto:tomato@sauce.com.au",children:"tomato@sauce.com.au"})}),(0,t.jsx)("td",{children:"08 8853 9322"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Ayfor"}),(0,t.jsx)("td",{children:"Gott"}),(0,t.jsx)("td",{children:"Not yet supplied"}),(0,t.jsx)("td",{children:"Not yet supplied"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Justin"}),(0,t.jsx)("td",{children:"Thyme"}),(0,t.jsx)("td",{children:(0,t.jsx)(s.a,{href:"mailto:imlate@4avipdate.com.au",children:"imlate@4avipdate.com.au"})}),(0,t.jsx)("td",{children:"08 3922 8892"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Ray"}),(0,t.jsx)("td",{children:"Member"}),(0,t.jsx)("td",{children:(0,t.jsx)(s.a,{href:"mailto:never@forget.com.au",children:"never@forget.com.au"})}),(0,t.jsx)("td",{children:"08 9382 3912"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Studie"}),(0,t.jsx)("td",{children:"Harde"}),(0,t.jsx)("td",{children:(0,t.jsx)(s.a,{href:"mailto:work@hard.com.au",children:"work@hard.com.au"})}),(0,t.jsx)("td",{children:"08 9382 1142"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Slacke"}),(0,t.jsx)("td",{children:"Hearse"}),(0,t.jsx)("td",{children:(0,t.jsx)(s.a,{href:"mailto:work@harder.com.au",children:"work@harder.com.au"})}),(0,t.jsx)("td",{children:"08 7932 1135"})]})]})}function u(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}const x=[];function p(e){const s={code:"code",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\ncode: |\n    student_details [\n        {'First Name' : 'Ida',    'Last Name' : 'Noe',    'Email' : 'ida.noe@findme.com',    'Phone' : '08 2839 2823'},\n        {'First Name' : 'Hugo',   'Last Name' : 'First',  'Email' : 'hugo.first@noway.com',  'Phone' : '08 3829 2822'},\n        {'First Name' : 'Moda',   'Last Name' : 'Lawn',   'Email' : 'moda.lawn@jims.com.au', 'Phone' : '08 7392 5555'},\n        {'First Name' : 'Kate',   'Last Name' : 'Jupp',   'Email' : 'tomato@sauce.com.au',   'Phone' : '08 8853 9322'},\n        {'First Name' : 'Ayfor',  'Last Name' : 'Gott',   'Email' : 'Not yet supplied',      'Phone' : 'Not yet supplied'},\n        {'First Name' : 'Justin', 'Last Name' : 'Thyme',  'Email' : 'imlate@ravipdate.com.au', 'Phone' : '08 3922 8892'},\n        {'First Name' : 'Ray',    'Last Name' : 'Member', 'Email' : 'never@forget.com.au',   'Phone' : '08 9382 3912'},\n        {'First Name' : 'Studie', 'Last Name' : 'Harde',  'Email' : 'work@hard.com.au',      'Phone' : '08 9382 1142'},\n        {'First Name' : 'Slacke', 'Last Name' : 'Hearse', 'Email' : 'work@harder.com.au',    'Phone' : '08 7932 1135'},\n    ]\n---\n"})})}function j(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}function f(e){const s={code:"code",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nvariable name: student_details\nuse objects: True\ndata:\n  - First Name: Ida\n    Last Name: Noe\n    Email: ida.noe@findme.com\n    Phone: 08 2839 2823\n  - First Name: Hugo\n    Last Name: First\n    Email: hugo.first@noway.com\n    Phone: 08 3829 2822\n  - First Name: Moda\n    Last Name: Lawn\n    Email: moda.lawn@jims.com.au\n    Phone: 08 7392 5555\n  - First Name: Kate\n    Last Name: Jupp\n    Email: tomato@sauce.com.au\n    Phone: 08 8853 9322\n  - First Name: Ayfor\n    Last Name: Gott\n    Email: Not yet supplied\n    Phone: Not yet supplied\n  - First Name: Justin\n    Last Name: Thyme\n    Email: imlate@ravipdate.com.au\n    Phone: 08 3922 8892\n  - First Name: Ray\n    Last Name: Member\n    Email: never@forget.com.au\n    Phone: 08 9382 3912\n  - First Name: Studie\n    Last Name: Harde\n    Email: work@hard.com.au\n    Phone: 08 9382 1142\n  - First Name: Slacke\n    Last Name: Hearse\n    Email: work@harder.com.au\n    Phone: 08 7932 1135\n--- \n"})})}function y(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}function w(e){const s={h5:"h5",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h5,{id:"example-irefer-table-data---two-dimensions-only",children:"Example iRefer table data - two dimensions only"}),"\n",(0,t.jsxs)("table",{className:"complexDataTableExamples",children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Service"}),(0,t.jsx)("th",{children:"Service Provider"}),(0,t.jsx)("th",{children:"Phone"}),(0,t.jsx)("th",{children:"Cost"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Mindful Awareness Parenting Group Proggram"}),(0,t.jsx)("td",{children:"Anglicare SA"}),(0,t.jsx)("td",{children:"08 8186 8900"}),(0,t.jsx)("td",{children:"Free for parents with a child under 12 years"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Who's in Charge"}),(0,t.jsx)("td",{children:"Junction"}),(0,t.jsx)("td",{children:"08 8392 3000"}),(0,t.jsx)("td",{children:"Free"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Circle of Security"}),(0,t.jsx)("td",{children:"Aboriginal Family Support Services"}),(0,t.jsx)("td",{children:"8641 0907 or 8683 1909"}),(0,t.jsx)("td",{children:"TBA"})]})]})]})}function b(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(w,{...e})}):w(e)}function v(e){const s={h5:"h5",li:"li",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h5,{id:"example-irefer-table---with-locations-and-services",children:"Example iRefer table - with locations and services"}),"\n",(0,t.jsxs)("table",{className:"complexDataTableExamples",children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Service"}),(0,t.jsx)("th",{children:"Service Provider"}),(0,t.jsx)("th",{children:"Phone"}),(0,t.jsx)("th",{children:"Cost"}),(0,t.jsx)("th",{children:"Location"}),(0,t.jsx)("th",{children:"Caters For"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Mindful Awareness Parenting Group Proggram"}),(0,t.jsx)("td",{children:"Anglicare SA"}),(0,t.jsx)("td",{children:"08 8186 8900"}),(0,t.jsx)("td",{children:"Free for parents with a child under 12 years"}),(0,t.jsx)("td",{children:(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"South"}),"\n"]})}),(0,t.jsx)("td",{children:(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Parental services"}),"\n",(0,t.jsx)(s.li,{children:"Child services"}),"\n",(0,t.jsx)(s.li,{children:"Courses"}),"\n",(0,t.jsx)(s.li,{children:"Pre-separation services"}),"\n"]})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Who's in Charge"}),(0,t.jsx)("td",{children:"Junction"}),(0,t.jsx)("td",{children:"08 8392 3000"}),(0,t.jsx)("td",{children:"Free"}),(0,t.jsx)("td",{children:(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"South"}),"\n"]})}),(0,t.jsx)("td",{children:(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Parental services"}),"\n",(0,t.jsx)(s.li,{children:"Child services"}),"\n",(0,t.jsx)(s.li,{children:"Behaviour management services"}),"\n"]})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Circle of Security"}),(0,t.jsx)("td",{children:"Aboriginal Family Support Services"}),(0,t.jsx)("td",{children:"8641 0907 or 8683 1909"}),(0,t.jsx)("td",{children:"TBA"}),(0,t.jsx)("td",{children:(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Outer regional"}),"\n",(0,t.jsx)(s.li,{children:"North West"}),"\n"]})}),(0,t.jsx)("td",{children:(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Parental services"}),"\n",(0,t.jsx)(s.li,{children:"Child services"}),"\n",(0,t.jsx)(s.li,{children:"Behaviour management services"}),"\n",(0,t.jsx)(s.li,{children:"Indigenous services"}),"\n"]})})]})]})]})}function g(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(v,{...e})}):v(e)}function k(e){const s={code:"code",p:"p",pre:"pre",...(0,i.a)(),...e.components},{Details:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)(s.p,{children:"Example iRefer table as data block"})}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yml",children:'---\nvariable name: FLPN_services\nuse objects: True\ndata:\n  - service: Mindful Awareness Parenting Group Program\n    service_provider: Anglicare SA\n    phone: 08 8186 8900\n    cost: Free for parents with a child under 12 years\n  - service: "Who\'s in Charge"\n    service_provider: Junction\n    phone: 08 8392 3000\n    cost: Free\n  - service: Circle of Security\n    service_provider: Aboriginal Family Support Services\n    phone: 08 8641 0907 or 08 8683 1909\n    cost: TBA\n---\n'})})]})}function N(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(k,{...e})}):k(e)}function F(e){const s={code:"code",p:"p",pre:"pre",...(0,i.a)(),...e.components},{Details:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)(s.p,{children:"Example iRefer table with locations and services - as data block"})}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yml",children:'---\nvariable name: FLPN_services\nuse objects: True\ndata:\n  - service: Mindful Awareness Parenting Group Program\n    service_provider: Anglicare SA\n    phone: 08 8186 8900\n    cost: Free for parents with a child under 12 years\n    location:\n      - South\n    caters_for:\n      - Parental services\n      - Child services\n      - Courses\n      - Pre-separation services\n  - service: "Who\'s in Charge"\n    service_provider: Junction\n    phone: 08 8392 3000\n    cost: Free\n    location:\n      - South\n    caters_for:\n      - Parental services\n      - Child services\n      - Behaviour management services\n  - service: Circle of Security\n    service_provider: Aboriginal Family Support Services\n    phone: 08 8641 0907 or 08 8683 1909\n    cost: TBA\n    location:\n      - Outer regional\n      - South\n    caters_for:\n      - Parental services\n      - Child services\n      - Behaviour management services\n      - Indigenous services\n---\n'})})]})}function L(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(F,{...e})}):F(e)}const _={title:"Complex Data and Data Storage"},P=void 0,D={id:"textbook/chapter_05/00-50",title:"Complex Data and Data Storage",description:"Lists Reprisal",source:"@site/docs/textbook/chapter_05/00-50.mdx",sourceDirName:"textbook/chapter_05",slug:"/textbook/chapter_05/00-50",permalink:"/textbook/docs/textbook/chapter_05/00-50",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Complex Data and Data Storage"},sidebar:"textbookSidebar",previous:{title:"Dictionaries",permalink:"/textbook/docs/textbook/chapter_05/00-40"},next:{title:"Complex Data Recap",permalink:"/textbook/docs/textbook/chapter_05/00-60"}},S={},E=[{value:"Lists Reprisal",id:"lists-reprisal",level:2},{value:"Lists of Dictionaries",id:"lists-of-dictionaries",level:2},...r,...h,...x,{value:"Databases",id:"databases",level:2},{value:"Data blocks",id:"data-blocks",level:2},...x,{value:"Multidimensional Data",id:"multidimensional-data",level:2},...r,...h,{value:"Example iRefer table data - two dimensions only",id:"example-irefer-table-data---two-dimensions-only",level:5},{value:"Example iRefer table - with locations and services",id:"example-irefer-table---with-locations-and-services",level:5},{value:"Multidimensional data and filtering",id:"multidimensional-data-and-filtering",level:2}];function T(e){const s={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{Details:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"lists-reprisal",children:"Lists Reprisal"}),"\n",(0,t.jsx)(s.p,{children:"Let's get back into lists again."}),"\n",(0,t.jsxs)(s.p,{children:["So far, we've been working with lists with ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"string"})," elements, like our ",(0,t.jsx)(s.code,{children:"bread_types"})," list:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"bread_types = [\n    'sourdough',\n    'croissant',\n    'tip top',\n    'artisan',\n    'chocolate'\n]\n"})}),"\n",(0,t.jsx)(s.p,{children:"We've been using strings because that's what you'll encounter the most in a legal technology context.  However,\nlists aren't limited to storing only strings.  We can store numbers:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"bread_types_sold = [523, 100, 382, 33, 56]\n"})}),"\n",(0,t.jsx)(s.p,{children:"and we can even mix and match data types"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"mixed_list = [\n    1,\n    'a string',\n    335.53,\n    7392,\n    True,\n    'another string'\n]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Not sure why we'd want to do that but it is possible.  The point is, we can store any data type as a list item.\nAnd by 'any type', we also mean complex data types.  That is, a list item could be another list, or a dictionary,\nor any combination of both:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"complex_confusing_list = [\n    ['this', 'is', 'a', 'list'],\n    ['this', 'is', 'another', 'list'],\n    'add a string as the third item, just for fun',\n    {'key1' : 'this is a dictionary', 'key2' : 'with two keys'}\n]\n"})}),"\n",(0,t.jsx)(s.p,{children:"This is getting messy but it's getting messy to draw out these three points:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"you can have any data type as a list item;"}),"\n",(0,t.jsxs)(s.li,{children:["list items can be lists (also called ",(0,t.jsx)(s.strong,{children:"nested lists"}),");"]}),"\n",(0,t.jsxs)(s.li,{children:["list items can be dictionaries (also called ",(0,t.jsx)(s.strong,{children:"lists of dictionaries"})," or ",(0,t.jsx)(s.strong,{children:"tables"}),")"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"We're going to cover lists of dictionaries as they're a very useful way to store and access data."}),"\n",(0,t.jsx)(s.h2,{id:"lists-of-dictionaries",children:"Lists of Dictionaries"}),"\n",(0,t.jsx)(s.p,{children:"Why are lists of dictionaries useful?  Because they're a great way to represent spreadsheet data, or tables,\nas code.  Let's look at an example.  Let's go back to our list of students:"}),"\n",(0,t.jsx)(l,{}),"\n",(0,t.jsxs)(s.p,{children:["Let's also say that, for each of the students, we want to display information about them, much like the table we\nlooked at when we looked at ",(0,t.jsx)(s.a,{href:"00-40",children:"Dictionaries"})," earlier in this chapter:"]}),"\n",(0,t.jsx)(c,{}),"\n",(0,t.jsx)(s.p,{children:"It would make sense for us to lay this out in a table, much like below:"}),"\n",(0,t.jsx)(u,{}),"\n",(0,t.jsx)(s.p,{children:"You can see we still have a list.  Whereas before we had a list of student names, now we have a list of\nmore detailed student information."}),"\n",(0,t.jsx)(a.DisplayImage,{imageURL:"/img/textbook/chapter_05/listofdict2.png"}),"\n",(0,t.jsxs)(s.p,{children:["You can see also how the 'Information' categories across the top of the table correlate to the dictionary keys\nwe looked at ",(0,t.jsx)(s.a,{href:"00-40",children:"previously"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"It follows then that we could implement this as  a list of dictionaries.  The list would have nine items in it,\none for each row in our table.  Each item would a dictionary that set out the keys (ie: the column headings) and the\nvalues associated with each key."}),"\n",(0,t.jsx)(s.p,{children:"In Python our list of dictionaries would look something like this:"}),"\n",(0,t.jsx)(j,{}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)(s.p,{children:"A note about readability"})}),(0,t.jsxs)(s.admonition,{type:"note",children:[(0,t.jsx)(s.p,{children:"A couple of things to note with the code code above."}),(0,t.jsx)(s.p,{children:"First, we have displayed each dictionary on a single line.  We could have displayed the data like this:"}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"student_details [\n    {\n        'First Name' : 'Ida',\n        'Last Name' : 'Noe',\n        'Email' : 'ida.noe@findme.com',\n        'Phone' : '08 2839 2823'\n    },\n    {\n        'First Name' : 'Hugo',\n        'Last Name' : 'First',\n        'Email' : 'hugo.first@noway.com',\n        'Phone' : '08 3829 2822'\n    },\n    ...\n]\n"})}),(0,t.jsx)(s.p,{children:"but you can see that our code block gets very big very fast, so much so that it becomes difficult to read.\nHaving a dictionary on a single line when its a list item can make the code easier to read and understand."}),(0,t.jsxs)(s.p,{children:["Secondly, you'll notice that we padded out each dictionary element with spaces so that all the '",(0,t.jsx)(s.code,{children:"Last Name"}),"' keys\nappeared one underneath the other. This was done to make the code more readable and easier to understand."]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"databases",children:"Databases"}),"\n",(0,t.jsx)(s.p,{children:"What we can see from this chapter so far is that we can use complex data types to store complex information.\nWe're not limited to a single-dimensional list of names or a single dictionary setting out keys and values.  We\ncan combine complex data structures to form a way of storing more complex information in a structured way."}),"\n",(0,t.jsxs)(s.p,{children:["According to ",(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Database",children:"Wikipedia"})," a database is 'an organised collection of data'.",(0,t.jsx)(s.br,{}),"\n","That's what we have.  A set of data organised, or structured, in a specific way.  At a very basic level we are\ninteracting with a database."]}),"\n",(0,t.jsxs)(s.p,{children:["Our interactivity is at a very basic level.  Our ",(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Database",children:"'database management system'"}),"\nis nothing more than our list of dictionaries or, as we shall see below, a\nDocassemble ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"datablock"}),".  Nonetheless, we are interacting with structured data\nand so we will use the term 'database' extensively throughout this textbook when referring to such structured data\nand particularly to data in a dat block."]}),"\n",(0,t.jsx)(s.h2,{id:"data-blocks",children:"Data blocks"}),"\n",(0,t.jsxs)(s.p,{children:["Up to now we have been displaying our data structures as Python code in a ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"codeblock"}),"."]}),"\n",(0,t.jsx)(j,{}),"\n",(0,t.jsxs)(s.p,{children:["Docassemble provides another means for us to store this data in Docassemble code, called\n",(0,t.jsx)(s.a,{href:"https://docassemble.org/docs/initial.html#data",children:"data blocks"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"Data blocks do more or less the same thing as our list of dictionaries, but it's displayed natively in Docassemble.\nData blocks become very useful when we start dealing with even more complex data structures (which we will discuss\nbelow)."}),"\n",(0,t.jsxs)(s.p,{children:["Let's have a look at an example data block.  This example is a simplified version of ",(0,t.jsx)(s.code,{children:"student_details"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nvariable name: student_details_simplified\nuse objects: True\ndata:\n  - First Name: Ida\n    Last Name: Noe\n  - First Name: Hugo\n    Last Name: First\n  - First Name: Moda\n    Last Name: Lawn\n---\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Line 2"}),", as the line itself indicates, gives our data block a variable name.  In our example we've\ndecided to use the variable name ",(0,t.jsx)(s.code,{children:"student_details_simplified"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Line 3"})," tells Docassemble to use ",(0,t.jsx)(s.a,{href:"https://docassemble.org/docs/initial.html#use%20objects",children:"Docassemble's enhanced lists and dictionaries"}),".\nWe won't go into much details about these enhancements now but it's a good idea to always include this ",(0,t.jsx)(s.code,{children:"use objects:"}),"\nline in any data blocks we use."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Line 4"})," tells Docassemble that what follows until the end of the block are the data rows for this data block, and\n",(0,t.jsx)(s.strong,{children:"lines 5 to 10"})," contain our data."]}),"\n",(0,t.jsxs)(s.p,{children:["Remember that our data is a list of dictionaries.  Docassemble represents the start of each list with an indented\ndash (",(0,t.jsx)(s.code,{children:"-"}),") character.  Each time the dash appears Docassemble knows that a new list item is commenced.  So, you\ncan see that our list items start on lines 5, 7 and 9 in our example."]}),"\n",(0,t.jsxs)(s.p,{children:["You can also see the two dictionary keys in each list item - ",(0,t.jsx)(s.code,{children:"First Name"})," and ",(0,t.jsx)(s.code,{children:"Last Name"}),".  Docassemble knows that\nthese are dictionary keys as, like in our Python code, there is a colon (",(0,t.jsx)(s.code,{children:":"}),") after the key name."]}),"\n",(0,t.jsxs)(s.p,{children:["Therefore, we can see that our data block consists of three list items, each of which has two dictionary keys -\n",(0,t.jsx)(s.code,{children:"First Name"})," and ",(0,t.jsx)(s.code,{children:"Last Name"}),"."]}),"\n",(0,t.jsxs)(s.admonition,{type:"info",children:[(0,t.jsxs)(s.p,{children:["For completeness here is the entire ",(0,t.jsx)(s.code,{children:"student_details"})," complex data structure rendered as a data block:"]}),(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"student_details"})," data block"]})}),(0,t.jsx)(y,{})]})]}),"\n",(0,t.jsx)(s.p,{children:"Let's draw attention to some of the syntax of data blocks:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["as we've already discussed, list elements are denoted by dash (",(0,t.jsx)(s.code,{children:"-"}),") characters;"]}),"\n",(0,t.jsxs)(s.li,{children:["also as discussed, dictionary keys are simply the key name followed by a colon (",(0,t.jsx)(s.code,{children:":"}),");"]}),"\n",(0,t.jsx)(s.li,{children:"as always in Docassemble indentation is important.  Note that the dashes are all two spaces in and the keys\nstart another two spaces in.  Each set of two spaces is a 'level'.  The list is at the top level of our data\nstructure and the dictionaries are the next level down (so four spaces in).  If we had more levels we'd keep\non indenting by two spaces (this is covered below);"}),"\n",(0,t.jsx)(s.li,{children:"unlike Python code, we don't need to enclose our key names or our values in quotes.  Docassemble knows enough\nto detect the data type of the keys and the values we enter;"}),"\n",(0,t.jsx)(s.li,{children:"The lack of quotes makes the data a bit more readable.  Having said that, we have just converted 14 lines of\nPython code to 42 lines of data block code!  However, this format really comes  into its own when we start looking\nat multidimensional data structures below."}),"\n"]}),"\n",(0,t.jsxs)(s.admonition,{type:"note",children:[(0,t.jsx)(s.p,{children:"While we don't use quotes generally in a data block we will use them if the data itself contains a quote.  For\nexample, if we had an entry for Fred D'Angelo, we' have to wrap \"D'Angelo\" in double quotes.  For example:"}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yml",children:'---\nvariable name: just_freddy\nuse objects: True\ndata:\n  - First Name: Fred\n    Last Name: "D\'Angelo"\n...\n---\n'})})]}),"\n",(0,t.jsxs)(s.admonition,{type:"info",children:[(0,t.jsx)(s.p,{children:"Some of you may have realised that the data block syntax is very similar to Docassemble syntax generally.  For\nexample, when we specify buttons at the end of a question block:"}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yml",metastring:"showLineNumbers",children:"event: final_screen\nquestion: Final Screen\nsubquestion: |\n  ...\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n"})}),(0,t.jsxs)(s.p,{children:["we are supplying a list of buttons, each with a single key/value pair.  In fact, if you look at this example code\nyou'll see that it itself is a complex data structure.  At the top level are a set of keys (",(0,t.jsx)(s.code,{children:"event"}),", ",(0,t.jsx)(s.code,{children:"question"}),",\n",(0,t.jsx)(s.code,{children:"subquestion"})," and ",(0,t.jsx)(s.code,{children:"buttons"}),"), each assigned a value.  Some values are simple data types, such as ",(0,t.jsx)(s.code,{children:"final_screen"}),"\nwhich is the value for ",(0,t.jsx)(s.code,{children:"event"}),",\nand some are complex data types, such as the list that is the value for the ",(0,t.jsx)(s.code,{children:"buttons"})," key."]}),(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"subquestion"})," key is a little different as it is proceeded by a ",(0,t.jsx)(s.code,{children:": |"}),".  The colon indicates that ",(0,t.jsx)(s.code,{children:"subquestion"}),"\nis a key and what follows on the other side is its value.  The vertical bar (",(0,t.jsx)(s.code,{children:"|"}),") tells Docassemble that the value\nfor this particular key will span more than one line."]})})]}),"\n",(0,t.jsx)(s.p,{children:":::"}),"\n",(0,t.jsx)(s.h2,{id:"multidimensional-data",children:"Multidimensional Data"}),"\n",(0,t.jsx)(s.p,{children:"We've already dealt with one-dimensional data and two dimensional data so let's start there."}),"\n",(0,t.jsx)(s.p,{children:"A list is an example of one-dimensional data.  It has only one 'dimension' ie: its length:"}),"\n",(0,t.jsx)(l,{}),"\n",(0,t.jsx)(s.p,{children:"Spredsheets and/or tables are two-dimensional.  They have a length, like a list, but also have a width, being\nthe number of columns (or dictionary keys):"}),"\n",(0,t.jsx)(u,{}),"\n",(0,t.jsx)(s.p,{children:"Most of us have encountered two-dimensional data as that's how spreadsheets work."}),"\n",(0,t.jsx)(s.p,{children:"You can also see that the dimensions of a data structure reflect the nesting of complex data structures inside it.\nSo, our one-dimensional list is a simple list (ie: each list element is a simple data type).  Our two-dimensional\ntable is a list with dictionaries as list elements."}),"\n",(0,t.jsx)(s.p,{children:"Multidimensional data is when we nest complex data structures more than two levels deep.  Let's use a real-world\nexample to illustrate this."}),"\n",(0,t.jsxs)(s.p,{children:["In 2020 Flinders Law students developed an app called ",(0,t.jsx)(s.a,{href:"https://docassemble.flinders.edu.au/interview?i=docassemble.LLAW33012020S1P02:data/questions/main_code2.yml#page1",children:"iRefer"}),"\nfor the ",(0,t.jsx)(s.a,{href:"https://pathwaysnetworksa.com.au/",children:"Family Law Pathways Network"})," (",(0,t.jsx)(s.strong,{children:"FLPN"}),").  iRefer automated what used to be a paper\ndirectory of services available to FLPN's clients.  The directory was only accessible by attending FLPN's kiosk at the\nFederal Court building in Adelaide.  By migrating the directory online the students\nallowed FLPN to make the directory available 24x7 and also accessible by remote and regional clients."]}),"\n",(0,t.jsx)(s.p,{children:"The app asks its users certain questions, such as where they live, their gender, and what services they are looking for.\nThe app then constructs a list of relevant services depending on those answers and presents that list to the user."}),"\n",(0,t.jsxs)(s.p,{children:["The app is built around a list of agencies which is stored in a data block.  Each item in the list has keys for\ninformation such as the agency's name, its address and contact details.  So far, this describes a list of dictionaries,\nsimilar to the ",(0,t.jsx)(s.code,{children:"student_details"})," we have discussed in this section, albeit with different data."]}),"\n",(0,t.jsx)(b,{}),"\n",(0,t.jsx)(N,{}),"\n",(0,t.jsx)(s.p,{children:"However, in order to be useful, each agency in the database must also contain a list of locations that it services\nand a list of services that it provides.  As a table, this might look as follows:"}),"\n",(0,t.jsx)(g,{}),"\n",(0,t.jsx)(L,{}),"\n",(0,t.jsxs)(s.p,{children:["The data type of the data in the 'Location' and 'Caters For' columns is a complex data type, namely a list.  This\nextends our existing list of dictionaries to be a list of dictionaries, with some dictionary values being a list\n(of strings in this case).  That is, we have introduced a ",(0,t.jsx)(s.em,{children:"third dimension"})," into our data structure.  We now have:"]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"a list;"}),"\n",(0,t.jsx)(s.li,{children:"of dictionaries;"}),"\n",(0,t.jsx)(s.li,{children:"with some dictionary values as lists."}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["By doing this we make available to ourselves all the advantages of lists inside our database.\nFor example, to see if a service provides, say, Child services, we could use the list ",(0,t.jsx)(s.code,{children:"in"}),"\noperator to test for ",(0,t.jsx)(s.a,{href:"./00-20#list-membership",children:"membership"}),".  For example, we could check the\nfirst item in the database as follows:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"'Child services' in FLPN_services[0]['caters_for']\n"})}),"\n",(0,t.jsx)(s.p,{children:"Note that:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"FLPN_services"})," is the name of our data block;"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"FLPN_services[0]"})," is the first list item in our data block; and"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"FLPN_services[0]['caters_for']"})," access the list in the ",(0,t.jsx)(s.code,{children:"caters_for"})," key in our first list item."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"multidimensional-data-and-filtering",children:"Multidimensional data and filtering"}),"\n",(0,t.jsx)(s.p,{children:"A Central part of the iRefer app was to filter out services based on a user's selection.  For\nexample, a user may select 'Behaviour management services' from the list of available services.\nThe app would then want to display only those agencies that provide behaviour management services.\nIn our example, we would want only 'Who's in Charge' and 'Circle of Security' to be returned."}),"\n",(0,t.jsxs)(s.p,{children:["Once we have data stored in this structured way it becomes relatively simple to filter out\nunwanted records.  We usually do this by iterating over the data block and copying the records\nwe ",(0,t.jsx)(s.em,{children:"do"})," want into a new list.  For example, here is a code block that will copy only the two agencies\nthat provide behaviour management services into a new filtered list:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",metastring:"showLineNumbers",children:"---\ncode: |\n  filtered_list = []    # Start with an empty list\n  filter_category = 'Behaviour management services'  # We put our service category into a\n                                                     # variable.  It's good practice not to embed\n                                                     # strings in loops and if statements.\n                                                     # In the 'real' version of this app we would\n                                                     # have asked the user for the filter_category.\n\n  for list_item in FLPN_services:                    # Iterate over our data block\n    if filter_category in list_item['caters_for']:   # Does our list item contain our category?\n        filtered_list.append(list_item)              # if so, then add it to our filtered list\n---\n"})}),"\n",(0,t.jsx)(s.p,{children:"We could then display our filtered list in a table in our final screen:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nevent: final_screen\nquestion: final_screen\nsubquestion: |\n  Here is a list of service providers that match your criteria\n\n  Provider|Phone|Cost\n  ---|---|---\n  %for list_item in FLPN_services:\n  %if 'Behavioural management services' in list_item['caters_for']:\n  ${list_item['service']}|${list_item['phone']}|${list_item['cost']}\n  %endif\n  %endfor\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n"})}),"\n",(0,t.jsxs)(s.admonition,{type:"note",children:[(0,t.jsx)(s.p,{children:"Both of the example blocks above have the string 'Behaviour management services' embedded\nin their code.  This is obviously inefficient.  In the 'real world' we'd want to ask the user\na which category of services they would like.  We'd use a question block like this:"}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yml",children:"---\nquestion: Select services\nfields:\n    - Select which service you would like: filter_category\n      datatype: radio\n      choices:\n        - Behaviour managemenet services\n        - Child services\n        - Courses\n        - Indigenous services\n        - Parental services\n        - Pre-separation material\n---\n"})}),(0,t.jsx)(s.p,{children:"It is not good practice to embed string literals into code as we have done in the blocks above."})]})]})}function A(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(T,{...e})}):T(e)}}}]);