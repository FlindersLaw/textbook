"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[1152],{932:(e,n,s)=>{s.d(n,{Ay:()=>h,DD:()=>a,RM:()=>c,Ki:()=>d});var t=s(4848),i=s(8453),o=s(2487);function l(e){const n={a:"a",li:"li",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(o.DisplayChapter,{chapter:"chapter_05",pinpoint:"00-40",text:"Dictionaries"}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/recipes/templates",children:"Templates"})}),"\n"]})}const a="Exercise 4c",d=(0,t.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}),{}),c=[{value:"Background",id:"background",level:2},{value:"Your Task",id:"your-task",level:2},{value:"Code",id:"code",level:2}];function r(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,t.jsxs)(n.p,{children:["In this exercise we're going to start looking at how to deal with ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#fields%20checkboxes",children:"checkboxes"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Checkboxes are Dictionaries (or ",(0,t.jsxs)(n.a,{href:"https://docassemble.org/docs/objects.html#DADict",children:[(0,t.jsx)(n.code,{children:"DADict"}),"s"]})," to be\nmore precise).  The key for each dictionary item is usually the text displayed to the user,\nand the value being either ",(0,t.jsx)(n.code,{children:"True"})," or ",(0,t.jsx)(n.code,{children:"False"})," depending on whether the checkbox item has been\nselected or not."]}),"\n",(0,t.jsxs)(n.p,{children:["Like lists, we can ",(0,t.jsx)(n.a,{href:"/docs/textbook/chapter_05/00-40#iteration",children:"iterate over dictionaries"}),", which is what\nwe'll do in this exercise."]}),"\n",(0,t.jsxs)(n.p,{children:["Because our dictionaries actually are the ",(0,t.jsx)(n.code,{children:"DADict"})," datatype we get some extra features over 'vanilla'\nPython dictionaries.  Specifically, we get a ",(0,t.jsx)(n.code,{children:"true_values()"})," method that we can use to generate a list\nof the selected dictionary items."]}),"\n",(0,t.jsxs)(n.p,{children:["In the example code below we've introduced a new question  block which displays the checkboxes and\nstores the results in ",(0,t.jsx)(n.code,{children:"CWpeople"}),".  The ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#choices",children:"choices"}),"\nfor the ",(0,t.jsx)(n.code,{children:"CWpeople"})," are supplied by a ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#code",children:(0,t.jsx)(n.code,{children:"code"})}),"\nspecifier which pull in our ",(0,t.jsx)(n.code,{children:"display_list"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"your-task",children:"Your Task"}),"\n",(0,t.jsx)(n.p,{children:"You need to complete these three parts to complete your task:"}),"\n",(0,t.jsx)(n.p,{children:"Modify the example code and:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["create a ",(0,t.jsx)(n.code,{children:"template"})," block that will display a list of all the ",(0,t.jsx)(n.em,{children:"selected"})," names as a bullet list;"]}),"\n",(0,t.jsxs)(n.li,{children:["create another ",(0,t.jsx)(n.code,{children:"template"})," that will display text if no names are selected; and"]}),"\n",(0,t.jsx)(n.li,{children:"modify the code to call the relevant template depending on whether any names are selected."}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You can include ",(0,t.jsx)(n.code,{children:"%for"})," loops and ",(0,t.jsx)(n.code,{children:"%if"})," statements in templates.  Templates work in a similar\nway to content in a ",(0,t.jsx)(n.code,{children:"subquestion"})," part of a ",(0,t.jsx)(o.DisplayGlossaryItem,{item:"questionblock"}),"."]})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Your code is starting to get more sophisticated.  You might want to consider\n",(0,t.jsx)(n.a,{href:"/docs/recipes/structuring_code",children:"structuring your code"})," to help you stay organised."]})}),"\n",(0,t.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,t.jsx)(n.p,{children:"Copy and paste this example code into your Playground and modify it to complete your task."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"# Coding Exercise 4c\n#\n# Iteration and Checkboxes\n---\nobjects:\n  - display_list: DAList.using(auto_gather=False)\n---\nmandatory: True\nquestion: Coding Workshop 4c\nsubquestion: |\n  1. Display the selected names in `CWpeople` as`\n  a bullet list. \n  2. Display a special screen if no names are selected.\n\n  ${CWpeople}\n\nbuttons:\n  - Exit: exit\n---\nquestion: Select people\nfields:\n  - Select any number of people: CWpeople\n    datatype: checkboxes\n    choices:\n      code: |\n        display_list\n---\n# This code block defines the list with the \n# items to display\ncode: |\n  # Always clear our the list before you start work\n  # on it in a code block\n  display_list.clear()\n\n  # Add the data\n  display_list.append('Ida Noe')\n  display_list.append('Hugo First'),\n  display_list.append('Moda Lawn'),\n  display_list.append('Kate Jupp'),\n  display_list.append('Ayfor Gott'),\n  display_list.append('Justin Thyme'),\n  display_list.append('Ray Member'),\n  display_list.append('Studie Harde'),\n  display_list.append('Slacke Hearse')\n\n  # Finish by setting gathered to True\n  display_list.gathered = True\n---\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},6648:(e,n,s)=>{s.d(n,{Ay:()=>p,DD:()=>d,RM:()=>r,Ki:()=>c});var t=s(4848),i=s(8453),o=s(2487),l=s(932);function a(e){const n={li:"li",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(o.DisplayChapter,{chapter:"chapter_05",pinpoint:"00-20#list-length",text:"List Length"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(o.DisplayChapter,{chapter:"chapter_02",pinpoint:"00-42#displaying-output-in-a-table",text:"Markdown tables"}),"\n"]}),"\n"]})}const d="Exercise 4d",c=(0,t.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}),{}),r=[{value:"Ex4d",id:"ex4d",level:2},{value:"Background",id:"background",level:2},{value:"Task",id:"task",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"ex4d",children:"Ex4d"}),"\n",(0,t.jsx)(n.p,{children:"Modify 4d to display:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A line stating how many items are selected and how many are not selected"}),"\n",(0,t.jsxs)(n.li,{children:["All items displayed in a table, along with whether they have been selected or not","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["a challenge would be to replace ",(0,t.jsx)(n.code,{children:"True"})," and ",(0,t.jsx)(n.code,{children:"False"})," with meaningful words"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"If no items are selected then display text stating as much"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,t.jsx)(n.p,{children:"In this exercise we'll start getting a little more sophisticated as to how\nwe display our results."}),"\n",(0,t.jsxs)(n.p,{children:["This exercise is based on your code from ",(0,t.jsx)(n.a,{href:"cw4c",children:l.DD}),".  You must have completed\n",l.DD," before you start this exercise."]}),"\n",(0,t.jsx)(n.h2,{id:"task",children:"Task"}),"\n",(0,t.jsx)(n.p,{children:"Your app should be modified to behave as follows:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The final screen should display a line summarising how many names\nwere selected and how many were not."}),"\n",(0,t.jsx)(n.li,{children:"The final screen should also display the list of names in a table,\nwith the first column being the name and the second being the selection\nstatus."}),"\n",(0,t.jsxs)(n.li,{children:["If no names are selected then a message stating no names were selectd should be\ndisplayed (much like ",l.DD,")."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Your output should look something like this:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/coding_exercises/cw4d-1.png"}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{}),(0,t.jsxs)(n.p,{children:["You already have a template for displaying the list output that you made\nin ",l.DD,".  Use this same template but replace the list with a\nMarkdown table.  You'll need to create the table headers yourself and the\n",(0,t.jsx)(n.code,{children:"%for"})," loop should now display the two table columns.  The first column\nwill contain the key and the second column will display the value\nassociated with that key."]}),(0,t.jsxs)(n.p,{children:["Python has a ",(0,t.jsx)(n.code,{children:"len()"})," function that will tell you how many elements there are\nin a list. Use this against ",(0,t.jsx)(n.code,{children:"CWpeople.true_values()"})," to see how many names\nhave been selected.  If ",(0,t.jsx)(n.code,{children:"len(CWpeople.true_values())"})," is zero then you know\nno names were selected."]})]}),"\n",(0,t.jsx)(n.admonition,{title:"challenge",type:"tip",children:(0,t.jsx)(n.p,{children:"Displaying 'True' and 'False' in the right-hand column isn't that intuitive\nto lay people that are not the programming geniuses that you now are. It would\nbe better to display 'Selected' and 'Not selected' instead.  See if you\ncan implement this."})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},2351:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var t=s(4848),i=s(8453),o=s(6648),l=s(2487);const a={title:"Exercise 4d"},d=void 0,c={id:"coding_exercises/coding_workshop_4/cw4d",title:"Exercise 4d",description:"",source:"@site/docs/coding_exercises/coding_workshop_4/cw4d.mdx",sourceDirName:"coding_exercises/coding_workshop_4",slug:"/coding_exercises/coding_workshop_4/cw4d",permalink:"/textbook/docs/coding_exercises/coding_workshop_4/cw4d",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Exercise 4d"},sidebar:"codingExercisesSidebar",previous:{title:"Exercise 4c",permalink:"/textbook/docs/coding_exercises/coding_workshop_4/cw4c"},next:{title:"Exercise 4e",permalink:"/textbook/docs/coding_exercises/coding_workshop_4/cw4e"}},r={},h=[...o.RM];function p(e){return(0,t.jsx)(l.DisplayInlineExercise,{video:o.Ki,children:(0,t.jsx)(o.Ay,{})})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p()}}}]);