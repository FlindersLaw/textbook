"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[3536],{3596:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"recipes/structuring_code","title":"Structuring Your Code","description":"Through most of this textbook you will encounter code that is contained within a single file,","source":"@site/docs/recipes/structuring_code.mdx","sourceDirName":"recipes","slug":"/recipes/structuring_code","permalink":"/textbook/docs/recipes/structuring_code","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Structuring Your Code"},"sidebar":"recipesSidebar","previous":{"title":"Minimising Mandatory Blocks","permalink":"/textbook/docs/recipes/minimising_mandatory_blocks"},"next":{"title":"Table Blocks","permalink":"/textbook/docs/recipes/table_blocks"}}');var o=i(4848),t=i(8453),a=i(1428);const l={title:"Structuring Your Code"},r=void 0,c={},d=[{value:"Code in multiple files",id:"code-in-multiple-files",level:2},{value:"Use <code>main.yml</code>",id:"use-mainyml",level:2},{value:"What should be in <code>main.yml</code>",id:"what-should-be-in-mainyml",level:2},{value:"Lines 2 to 5",id:"lines-2-to-5",level:3},{value:"Lines 7 and 8",id:"lines-7-and-8",level:3},{value:"Lines 10 to 30",id:"lines-10-to-30",level:3},{value:"Organising your files",id:"organising-your-files",level:2},{value:"Organise by function",id:"organise-by-function",level:3},{value:"Organise by role",id:"organise-by-role",level:3},{value:"Examples",id:"examples",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Through most of this textbook you will encounter code that is contained within a single file,\nfor example, our ",(0,o.jsx)(n.a,{href:"/docs/textbook/chapter_02/00-60",children:"Vital Statistics"})," app.  As we develop more\nand more sophisticated apps we write more and more lines of code.  As we write more code\nthe need to organise the code we write becomes more and more necessary, so that we can\nreduce the amount of time we spend looking for the code."]}),"\n",(0,o.jsx)(n.h2,{id:"code-in-multiple-files",children:"Code in multiple files"}),"\n",(0,o.jsx)(n.p,{children:"It is well within your capabilities, after working through this textbook, to write reasonably\nsophisticated apps consisting of many hundreds or even thousands of lines of code.\nStoring all your code in a single file becomes impractical when we approach these kinds of numbers.\nThat's because, firstly, it simply becomes too hard to find the code we want to work on and, secondly,\nwe can also run up against computer system limitations for displaying large files."}),"\n",(0,o.jsxs)(n.p,{children:["The solution to this issue is to split out your code into multiple files and then incorporate them\nall together some how.  The 'some how' in Docassemble is achieved by way of an\n",(0,o.jsx)(n.a,{href:"https://docassemble.org/docs/initial.html#include",children:(0,o.jsx)(n.code,{children:"include"})})," block."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"https://docassemble.org/docs/initial.html#include",children:"Docassemble manual"})," discusses what\n",(0,o.jsx)(n.code,{children:"include"})," blocks are and how they work.  In this part of the textbook we want to talk more\nabout how best to use them and to suggest a way to organise your code."]}),"\n",(0,o.jsxs)(n.h2,{id:"use-mainyml",children:["Use ",(0,o.jsx)(n.code,{children:"main.yml"})]}),"\n",(0,o.jsxs)(n.p,{children:["Firstly, as soon as we start breaking up our code into multiple files, it follows that we need to\nnominate one of these files to load and run our app. By convention in programming this file\nis referred to as the 'main file'. Also by convention it should be named ",(0,o.jsx)(n.code,{children:"main.yml"})," or something\nthat contains the word ",(0,o.jsx)(n.code,{children:"main"})," in it.  Our recommendation is that you use ",(0,o.jsx)(n.code,{children:"main.yml"})," as the name\nof your main file."]}),"\n",(0,o.jsxs)(n.h2,{id:"what-should-be-in-mainyml",children:["What should be in ",(0,o.jsx)(n.code,{children:"main.yml"})]}),"\n",(0,o.jsxs)(n.p,{children:["Now that we have a main file the next question is what it should contain.  In principle\nthe main file should contain ",(0,o.jsx)(n.a,{href:"minimising_mandatory_blocks",children:"only the code that drives the application overall"}),".  This\nshould consist of any ",(0,o.jsx)(a.DisplayGlossaryItem,{item:"mandatoryblock",plural:!0}),", final screens\nand any other blocks required to set up the app, such as ",(0,o.jsx)(n.a,{href:"https://docassemble.org/docs/initial.html#metadata",children:(0,o.jsx)(n.code,{children:"metadata"})}),"\nand ",(0,o.jsx)(n.a,{href:"https://docassemble.org/docs/initial.html#features",children:(0,o.jsx)(n.code,{children:"features"})})," blocks.  We should also\nhave an ",(0,o.jsx)(n.code,{children:"include"})," block to incorporate our other program files into our app."]}),"\n",(0,o.jsxs)(n.p,{children:["Here is an example of what a ",(0,o.jsx)(n.code,{children:"main.yml"})," might look like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\ninclude:\n  - questions.yml\n  - database.yml\n  - code_logic.yml\n---\nfeatures:\n  css: styles.css\n---\nmandatory: True\nquestion: Welcome screen\nsubquestion: |\n  This is the welcome screen\nbuttons:\n  - Continue: continue\n  - Exit: exit\n---\nmandatory: True\ncode: |\n  # Code that drives the app goes here\n\n  # Then call the final screen\n---\nevent: final_screen\nquestion: Final Screen\nsubquestion: |\n  Text for final screen goes here\nbuttons:\n  - Restart: restart\n  - Exit: exit\n---\n"})}),"\n",(0,o.jsx)(n.h3,{id:"lines-2-to-5",children:"Lines 2 to 5"}),"\n",(0,o.jsxs)(n.p,{children:["This is our ",(0,o.jsx)(n.code,{children:"include"})," block.  It tells Docassmble to make ",(0,o.jsx)(n.code,{children:"questions.yml"}),", ",(0,o.jsx)(n.code,{children:"database.yml"})," and\n",(0,o.jsx)(n.code,{children:"code_logic.yml"})," part of our app."]}),"\n",(0,o.jsx)(n.h3,{id:"lines-7-and-8",children:"Lines 7 and 8"}),"\n",(0,o.jsxs)(n.p,{children:["This is a ",(0,o.jsx)(n.code,{children:"features"})," block that directs the app to load the styles in ",(0,o.jsx)(n.code,{children:"styles.css"})," into our\napp."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["Styles and basic app design is covered in ",(0,o.jsx)(a.DisplayChapter,{chapter:"chapter_07"}),"."]})}),"\n",(0,o.jsx)(n.h3,{id:"lines-10-to-30",children:"Lines 10 to 30"}),"\n",(0,o.jsxs)(n.p,{children:["This is the recommended structure for the logic of ",(0,o.jsx)(n.code,{children:"main.yml"}),".  That is, the first screen\nof the app is a ",(0,o.jsx)(a.DisplayGlossaryItem,{item:"mandatoryblock"}),", followed by a mandatory\n",(0,o.jsx)(a.DisplayGlossaryItem,{item:"codeblock"})," and then a final screen.  This architecture is\ndiscussed in more detail ",(0,o.jsx)(n.a,{href:"minimising_mandatory_blocks",children:"here"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["If your app had many different final screens you would want to separate them out\ninto another file instead of including them in your ",(0,o.jsx)(n.code,{children:"main.yml"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"organising-your-files",children:"Organising your files"}),"\n",(0,o.jsx)(n.p,{children:"There are no set rules for organising your code into files.  In short, you need to find\nwhat works best for you.  Having said that here are some suggestions you may want to\nconsider."}),"\n",(0,o.jsx)(n.h3,{id:"organise-by-function",children:"Organise by function"}),"\n",(0,o.jsxs)(n.p,{children:["This method is alluded to in the ",(0,o.jsx)(n.a,{href:"#what-should-be-in-mainyml",children:"example above"}),".  Question\nblocks get put into one file, code blocks into another file and databases into another file."]}),"\n",(0,o.jsx)(n.p,{children:"If nothing else, this is a good place to start.  If you're not sure how to organise your app\nthen at least start breaking out your code by function.  Any organisation is better than no\norganisation at all. Often as you develop your app you may find a more suitable organisational\nscheme.  It's not too much effort to move away from this function-based scheme to any other\nscheme."}),"\n",(0,o.jsx)(n.h3,{id:"organise-by-role",children:"Organise by role"}),"\n",(0,o.jsx)(n.p,{children:"This is suitable for larger apps.  For example, you may group all your code that deals with,\nsay, legal analysis into one file (or set of files), and code that deals with presentation\nof information to the user in another file and so-on."}),"\n",(0,o.jsx)(n.p,{children:"Neither role is necessarily better than the other, although this author usually starts out\norganising by function and building from there."}),"\n",(0,o.jsx)(n.p,{children:"Students that have work assessed may find that organising your code into multiple files\nmay form part of your assessment criteria."}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsxs)(n.p,{children:["Here are some examples of applications using multiple files and ",(0,o.jsx)(n.code,{children:"include"})," blocks.  They\nalso demonstrate the principle of keeping as little information possible in ",(0,o.jsx)(n.code,{children:"main.yml"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(a.DisplayChapter,{chapter:"chapter_06"})," contains case studies which consider sophisticated\napp examples."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(a.DisplayChapter,{chapter:"chapter_07"})," discusses styling your app.  The example code produced\nin this chapter also is split into multiple files and structured according to the guidelines set\nout in this part of the textbook."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);