"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[5936],{3355:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"coding_exercises/coding_2_exercise/index","title":"Coding 2 Exercise Instructions","description":"Introduction","source":"@site/docs/coding_exercises/20_coding_2_exercise/index.mdx","sourceDirName":"coding_exercises/20_coding_2_exercise","slug":"/coding_exercises/coding_2_exercise/","permalink":"/textbook/docs/coding_exercises/coding_2_exercise/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Coding 2 Exercise Instructions"},"sidebar":"codingExercisesSidebar","previous":{"title":"Section 58 Calculator Flowchart Screens","permalink":"/textbook/docs/coding_exercises/coding_1_exercise/s58_calculator_screens"},"next":{"title":"Coding 3 Exercise Instructions","permalink":"/textbook/docs/coding_exercises/coding_3_exercise/"}}');var i=s(4848),o=s(8453),r=s(1428);s(8958);const a={title:"Coding 2 Exercise Instructions"},l=void 0,c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Preparation Work",id:"preparation-work",level:2},{value:"The Exercise",id:"the-exercise",level:2},{value:"Make the rest of the exit screens",id:"make-the-rest-of-the-exit-screens",level:3},{value:"Comparing Against State Weekly Earnings",id:"comparing-against-state-weekly-earnings",level:3},{value:"Decision-making with code",id:"decision-making-with-code",level:3},{value:"Making Multiple Decisions",id:"making-multiple-decisions",level:3},{value:"Populating the False Branches",id:"populating-the-false-branches",level:3},{value:"False branch if exceeding the s 58(2) limit",id:"false-branch-if-exceeding-the-s-582-limit",level:4},{value:"False branch if Someone else provided the services",id:"false-branch-if-someone-else-provided-the-services",level:4},{value:"False branch if services are not gratuitous",id:"false-branch-if-services-are-not-gratuitous",level:4},{value:"Testing",id:"testing",level:3},{value:"Solution Code",id:"solution-code",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["In this exercise you will continue working on the app you developed in\nthe ",(0,i.jsx)(n.a,{href:"coding_1_exercise",children:"Coding 1 Exercise"}),". We will work through the steps below\nand finish creating our screens and then implement decision-making logic."]}),"\n",(0,i.jsx)(n.h2,{id:"preparation-work",children:"Preparation Work"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["You should read ",(0,i.jsx)(r.DisplayChapter,{chapter:"chapter_04"})," before attempting this exercise."]}),"\n",(0,i.jsx)(n.li,{children:"You should be familiar with the entire chapter, but pay particular attention to if-else statements\nand nested if statements."}),"\n",(0,i.jsxs)(n.li,{children:["You should have completed working code from the Coding 1 Exercise. If you don't have completed\ncode you can refer to the ",(0,i.jsx)(n.a,{href:"coding_1_exercise#this-weeks-solution-code",children:"solution code"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"the-exercise",children:"The Exercise"}),"\n",(0,i.jsx)(n.p,{children:"Last week we built out Screen 1, all the question screens and Screen 8, one of the exit screens.\nThis week we are going to implement the decision-making logic. As we do so we will build out\nthe rest of the exit screens."}),"\n",(0,i.jsx)(n.h3,{id:"make-the-rest-of-the-exit-screens",children:"Make the rest of the exit screens"}),"\n",(0,i.jsxs)(n.p,{children:["Last week we created Screen 8. Screens 3, 5 and 7 follow the same formula. Use the instructions\nfor Screen 8 from last week and create question blocks (with ",(0,i.jsx)(n.code,{children:"event"})," tags) for screens 3, 5 and 7."]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Hint:"})," Your code should look something like this"]})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"---\n# Screen 3\nevent: MJFexit_screen3\nquestion: Not Eligible\nsubquestion: |\n  According to the *Civil Liability Act* you cannot claim for\n  the services you incurred as they were not provided on a\n  gratuitous basis.\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n# Screen 5\nevent: MJFexit_screen5\nquestion: Not Eligible\nsubquestion: |\n  You can only be compensated if the person who provided the gratuitous services\n  was your parent, spouse, domestic partner or child.\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n# Screen 7\nevent: MJFexit_screen7\nquestion: Not Eligible\nsubquestion: |\n  Your claim must be limited to four times State average weekly earnings.\n  State Average weekly earnings are currently $[insert current earnings].\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"comparing-against-state-weekly-earnings",children:"Comparing Against State Weekly Earnings"}),"\n",(0,i.jsx)(n.p,{children:"Now we need to do some maths (!!!) According to s 58(2) a person is limited as to the amount\nof damages they can claim for gratuitous services, and this limit is 'not to exceed an\namount equivalent to 4 times State average weekly earnings'."}),"\n",(0,i.jsx)(n.p,{children:"Consequently, we need to know, firstly, what State average weekly earnings are, and then we\nneed to use that figure to calculate the s 58(2) limit."}),"\n",(0,i.jsx)(n.p,{children:"The term 'State average weekly earnings' is defined is s 3 of the Act and, so you don't have to,\nI have extracted for you the current State average weekly earnings as of the date this exercise\nwas written.  That amount is:"}),"\n",(0,i.jsx)("div",{style:{display:"flex",justifyContent:"center"},children:(0,i.jsx)("table",{className:"complexDataTableExamples",children:(0,i.jsx)("tr",{children:(0,i.jsxs)("th",{children:[" ",(0,i.jsx)(n.strong,{children:"$1,776.90"})]})})})}),"\n",(0,i.jsx)(n.p,{children:"We will use this figure for this exercise."}),"\n",(0,i.jsx)(n.p,{children:"First thing we need to do is to let our app know this amount.  We do this by setting a variable\nin a code block, as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"---\ncode: |\n  MJFavg_earnings = 1776.9\n---\n"})}),"\n",(0,i.jsx)(n.p,{children:"Whenever we need to know what the average weekly earnings are we can just query this variable."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add this code block to the end of your code."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Next we need to calculate the s 58(2) limit. Arithmetically, this is easy, just multiply\n",(0,i.jsx)(n.code,{children:"MJFavg_earnings"})," by 4.  We can do this in another code block."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"---\ncode: |\n  MJFs58_limit = MJFavg_earnings * 4\n---\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"notes",type:"note",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["If you don't know what the ",(0,i.jsx)(n.code,{children:"*"})," does in the code block above, please check out 'Data Types' in ",(0,i.jsx)(r.DisplayChapter,{chapter:"chapter_03"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["If you don't know what ",(0,i.jsx)(n.code,{children:"<="})," means you should also consult Chapter 3. We'll be using these symbols shortly."]}),"\n",(0,i.jsx)(n.li,{children:"We could have put both these statements into a single code block and saved ourselves some typing.\nHowever, it's good practice to separate out logically different components into their own blocks."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MJFavg_earnings"})," is set to ",(0,i.jsx)(n.code,{children:"1776.9"})," and not ",(0,i.jsx)(n.code,{children:"1776.90"})," or ",(0,i.jsx)(n.code,{children:"$1776.90"}),". This is for two reasons.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Firstly, Python doesn't care whether a number represents money or anything else - it's just a number.  You will remember that we had to use the ",(0,i.jsx)(n.code,{children:"currency()"})," functions in our Coding 1 Preparation exercises."]}),"\n",(0,i.jsxs)(n.li,{children:["Secondly, as ",(0,i.jsx)(n.code,{children:"MJFavg_earnings"})," is just a number, the trailing ",(0,i.jsx)(n.code,{children:"0"})," is redundant."]}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(n.p,{children:"OK. Now we're ready to start making decisions!"}),"\n",(0,i.jsx)(n.h3,{id:"decision-making-with-code",children:"Decision-making with code"}),"\n",(0,i.jsx)(n.p,{children:"When implementing decisions in code, everything is reduced to a true/false proposition. We usually\nre-phrase questions so that the answer is true or false. For example, the question 'Were the\nservice provided gratuitous' is expressed as the statement 'The services provided were gratuitous'.\nIf this statement is true, then one path is taken. If this statement is false, then another path is\ntaken."}),"\n",(0,i.jsx)(n.p,{children:"Sometimes not all questions have a yes or no answer. For example, the question 'Who provided the\ngratuitous services?' has more than just a yes/no answer. The possible answers, according to our\nflowchart, are 'Parent', 'Spouse', 'Domestic Partner', 'Child' and 'Someone Else'. In this case\nwe would express each potential answer as a statemend. For example 'The person who provided\ngratuitous services was my parent', 'The person who provided gratuitous services was my child'\nand so-on. We could then test each one  in turn and then act depending on whether that statement\nis true or not.  To do this we would use an if/elif/else statement.  For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"code: |\n  if MJFwho_provided == 'Parent':\n    # Move to next step\n  elif MJFwho_provided == 'Spouse':\n    # Move to next step\n  elif MJFwho_provided == 'Domestic Partner':\n    # Move to next step\n  elif MJFwho_provided == 'Child':\n    # Move to next step\n  elif MJFwho_provided == 'Someone Else':\n    # Display screen 5 as user is not eligible\n---\n"})}),"\n",(0,i.jsx)(n.p,{children:"Each statement resolves to true or false."}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["If you look at that if/elif statement closely you'll see that the same action ('move to next step')\nis performed for every possibility ",(0,i.jsx)(n.em,{children:"except"})," if the person providing gratuitous servicse is\n'Someone Else'. Because this is the case we could re-express the statement to essentially say 'If\nthe person providing gratuitous services is Someone Else then we exit the app, ",(0,i.jsx)(n.em,{children:"otherwise"})," we\nmove to the next step'. This statement now has only two options - the person either is Someone Else\nor it isn't.  That's an easier if statement to write, and we would do so like this:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"code: |\n  if MJFwho_provided == 'Someone Else':\n    # Display Screen 5 as user is not eligible\n  else:\n    # Move to next step\n---\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"making-multiple-decisions",children:"Making Multiple Decisions"}),"\n",(0,i.jsx)(n.p,{children:"Our Section 58 Calculator chart requires us to make a set of followup decisions after we make\nour first decision. For example, if we decide the services were gratuitous, then we need to decide\nif the person who provided those services falls within s 58. If that person does so fall then we\nneed to subsequently decide if the amount claimed falls within the limit."}),"\n",(0,i.jsx)(n.p,{children:"Let's express this as follows:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"if the services are gratuitous, then"}),"\n",(0,i.jsx)(n.li,{children:"if the person who provided them is not someone else, then"}),"\n",(0,i.jsx)(n.li,{children:"if the amount claimed is less than the limit, then the person may be able to claim damages."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You see we need to have three ",(0,i.jsx)(n.code,{children:"True"})," answers to arrive at the conclusion that the user may be\nable to claim damages."]}),"\n",(0,i.jsx)(n.p,{children:"We express this sequence of positive decisions in code as follows (using the variables from the\nexample code in the solution)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\ncode: |\n  if MJFis_gratuitous:\n    if MJFwho_provided != 'Someone Else':\n      if MJFamount_claimed <= MJFavg_earnings\n        exit_screen8\n---\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can see that each of the three if statements on lines 3 to 5 mirror the three statements we\nexpressed previously."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The symbol ",(0,i.jsx)(n.code,{children:"!="})," means 'not equal to' in Python. Thus, the code on line 5 can be read as\n'if ",(0,i.jsx)(n.code,{children:"MJFwho_provided"})," is not equal to Someone Else'"]})}),"\n",(0,i.jsx)(n.p,{children:"Each if statement needs to be indented under its parent so that Python only executes it if the\nprevious statement is true. That is, each if statement sits under its parent if statement's\ntrue branch."}),"\n",(0,i.jsx)(n.p,{children:"You could copy the above code block into your mandatory code block (replacing what is already there).\nIf you did so, and you answered each question correctly then you would arrive at Screen 8 - the\n'You May be Eligible' screen."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Replace the contents of your mandatory code block with the nested if statements above"}),"\n",(0,i.jsx)(n.li,{children:"Save and run your app. Enter in the correct answers.  Do you arrive at Screen 8?"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"populating-the-false-branches",children:"Populating the False Branches"}),"\n",(0,i.jsxs)(n.p,{children:["As we already know, each if statement evaluates to true ",(0,i.jsx)(n.em,{children:"or"})," false. Consequently, just as every\nif statement has a true branch it must also have a false branch. This is represented by the ",(0,i.jsx)(n.code,{children:"else:"}),"\npart of an if-else or an if-elif-else statement."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"---\ncode: |\n  if something_is_true:\n    # This is the true branch\n    # Do the true things\n  else:\n    # This is the false branch\n    # Do the false things\n---\n"})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"---\ncode: |\n  if something_is_true:\n    # This is the true branch\n    # Do the true things\n  elif something_else_is_true:\n    # This is another true branch\n    # Do different true things\n  elif another_thing_is_true:\n    # This is another true branch\n    # Yes, everyone has their truth!\n  else:\n    # This is the false branch. All the true branches must \n    # have failed to get here.\n    # Do the false things\n---\n"})}),"\n",(0,i.jsx)(n.p,{children:"In our app code we have three if statements nested within one another. Each of our if statements\nalso requires a false branch, where we can display exit screens 3, 5 and 7."}),"\n",(0,i.jsx)(n.p,{children:"Let's do this one at a time."}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["A challenge with nesting if statements is that the corresponding ",(0,i.jsx)(n.code,{children:"else"})," ",(0,i.jsx)(n.strong,{children:"must"})," line up with\nthe ",(0,i.jsx)(n.code,{children:"if"})," that it belongs to. As nested if statements get bigger and bigger it becomes a challenge\nto line up an ",(0,i.jsx)(n.code,{children:"else"})," that's far away from its ",(0,i.jsx)(n.code,{children:"if"}),"."]}),(0,i.jsx)(n.p,{children:"This is why we'll start from the bottom of our nested if statements and work out to the top."})]}),"\n",(0,i.jsx)(n.h4,{id:"false-branch-if-exceeding-the-s-582-limit",children:"False branch if exceeding the s 58(2) limit"}),"\n",(0,i.jsx)(n.p,{children:"For convenience here's what our mandatory code block should look like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"---\nmandatory: True\ncode: |\n  if MJFis_gratuitous:\n    if MJFwho_provided != 'Someone Else':\n      if MJFamount_claimed <= MJFavg_earnings:\n        exit_screen8\n---\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The s58(2) limit decision is the last one made (check the flowchart), and it's consequently the last of our nested if statements.  Add a false branch by adding an ",(0,i.jsx)(n.code,{children:"else:"})," statement that displays\nscreen 7.  Your code should look like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"---\nmandatory: True\ncode: |\n  if MJFis_gratuitous:\n    if MJFwho_provided != 'Someone Else':\n      if MJFamount_claimed <= MJFavg_earnings\n        exit_screen8\n      else:\n        exit_screen7\n---\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note how the ",(0,i.jsx)(n.code,{children:"else"})," lines up with its corresponding ",(0,i.jsx)(n.code,{children:"if"}),". This is ",(0,i.jsx)(n.strong,{children:"essential"})," and many a student has shed many a tear for want of not lining up their ",(0,i.jsx)(n.code,{children:"if"}),"s and ",(0,i.jsx)(n.code,{children:"else"}),"s properly."]}),"\n",(0,i.jsx)(n.p,{children:"Please be a happy student."}),"\n",(0,i.jsx)(n.h4,{id:"false-branch-if-someone-else-provided-the-services",children:"False branch if Someone else provided the services"}),"\n",(0,i.jsxs)(n.p,{children:["The next decision up from the bottom is the eligibility check for who provided the services, which is the test of the value of ",(0,i.jsx)(n.code,{children:"MJFwho_provided"}),". Our statement tests if ",(0,i.jsx)(n.code,{children:"MJFwho_provided"})," is ",(0,i.jsx)(n.em,{children:"not"})," 'Someone Else'. If ",(0,i.jsx)(n.code,{children:"MJFwho_provided"})," ",(0,i.jsx)(n.em,{children:"is"})," 'Someone Else' then we need to display ",(0,i.jsx)(n.code,{children:"exit_screen5"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Modify your code block so that it contains this new false branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"---\nmandatory: True\ncode: |\n  if MJFis_gratuitous:\n    if MJFwho_provided != 'Someone Else':\n      if MJFamount_claimed <= MJFavg_earnings:\n        exit_screen8\n      else:\n        exit_screen7\n    else:\n      exit_screen5\n---\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note where this new ",(0,i.jsx)(n.code,{children:"else"})," statement appears. It appears ",(0,i.jsx)(n.em,{children:"below"})," our ",(0,i.jsx)(n.code,{children:"MJFamount_claimed"})," if/else statement. Why? This is because, the entirety ",(0,i.jsx)(n.code,{children:"MJFamount_claimed"})," if-else statement is executed inside the true branch of the ",(0,i.jsx)(n.code,{children:"MJFamount_claimed"})," if-else statement. That is, we're only making a decision about ",(0,i.jsx)(n.code,{children:"MJFamount_claimed"})," if the ",(0,i.jsx)(n.code,{children:"MJFwho_provided != 'Someone Else'"})," test evaluates to ",(0,i.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Note also that we have had to line up this ",(0,i.jsx)(n.code,{children:"else"})," with the ",(0,i.jsx)(n.code,{children:"if"})," for ",(0,i.jsx)(n.code,{children:"MJFwho_provided"}),". You might be able to see now how lining up these ",(0,i.jsx)(n.code,{children:"if"}),"s and ",(0,i.jsx)(n.code,{children:"else"}),"s can be challenging."]}),"\n",(0,i.jsx)(n.h4,{id:"false-branch-if-services-are-not-gratuitous",children:"False branch if services are not gratuitous"}),"\n",(0,i.jsx)(n.p,{children:"This is left as an exercise for you. Please be aware of the following"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The false branch must sit outside of the true branch for ",(0,i.jsx)(n.code,{children:"MJFis_gratuitous"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The true branch for ",(0,i.jsx)(n.code,{children:"MJFis_gratuitous"})," contains two nested if statements. So, our false branch must sit outside these"]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"else"})," must align with the ",(0,i.jsx)(n.code,{children:"if"})," for ",(0,i.jsx)(n.code,{children:"MJFis_gratuitous"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Once you have done this you should now have a fully working app!"}),"\n",(0,i.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.p,{children:"Now that we have an app we need to test it. A thorough test involved testing out each possible combinations of answers that could be input into the app to ensure there are no bugs. Thankfully, our app is not too complicated and so this should not take too long."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Test your app. Did you find any bugs?"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"solution-code",children:"Solution Code"}),"\n",(0,i.jsx)(n.p,{children:"The solution for the completed app is provided here for you as a reference."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nmandatory: True\nquestion: Welcome\nsubquestion: |\n  Welcome to the Gratuitous Services Calculator App.  This app helps you to work out if you can claim for gratuitous services provided to you by your family when you were injured.\n\n  Gratuitous services are services that are provided to you for free\nbuttons:\n  - Continue: continue\n  - Exit: exit\n---\n# Mandatory code block. Drives the app\nmandatory: True\ncode: |\n  if MJFis_gratuitous:\n    if MJFwho_provided != 'Someone Else':\n      if MJFamount_claimed <= MJFavg_earnings:\n        MJFexit_screen8\n      else:\n        MJFexit_screen7\n    else:\n      MJFexit_screen5\n  else:\n    MJFexit_screen3\n---\n# Screen 2\nquestion: Gratuitous Services\nsubquestion:\n  Did you receive gratuitous services while you were injured?\n\n  Gratuitous services are services, such as cleaning or caring provided to you at no cost.\nfields:\n  - no label: MJFis_gratuitous\n    datatype: radio\n    choices:\n      - I received services and I did not pay for any of them: True\n      - I received services but I did pay for them: False\n---\n# Screen 4\nquestion: Provision of Services\nsubquestion: |\n  Who provided the gratuitous services to you?\nfields:\n  - no label: MJFwho_provided\n    datatype: radio\n    choices:\n      - Parent\n      - Spouse\n      - Domestic Partner\n      - Child\n      - Someone Else\n---\n# Screen 6\nquestion: Amount Claimed\nsubquestion: |\n  What amount of damages are you claiming for the provision\n  of gratuitous services to you while you were injured?\nfields:\n  - no label: MJFamount_claimed\n    datatype: currency\n---\n# Screen 8\nevent: MJFexit_screen8\nquestion: You May be Eligible\nsubquestion: |\n  According to section 58 of the *Civil Liability Act* you may be\n  able to claim for gratuitous services\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n# Screen 3\nevent: MJFexit_screen3\nquestion: Not Eligible\nsubquestion: |\n  According to the *Civil Liability Act* you cannot claim for\n  the services you incurred as they were not provided on a\n  gratuitous basis.\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n# Screen 5\nevent: MJFexit_screen5\nquestion: Not Eligible\nsubquestion: |\n  You can only be compensated if the person who provided the gratuitous services\n  was your parent, spouse, domestic partner or child.\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n# Screen 7\nevent: MJFexit_screen7\nquestion: Not Eligible\nsubquestion: |\n  Your claim must be limited to four times State average weekly earnings.\n  State Average weekly earnings are currently $[insert current earnings].\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\ncode: |\n  MJFavg_earnings = 1776.9\n---\ncode: |\n  MJFs58_limit = MJFavg_earnings * 4\n---\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);