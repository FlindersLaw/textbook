"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[7334],{9462:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"textbook/chapter_03/00-20","title":"Data Types","description":"Introduction","source":"@site/docs/textbook/chapter_03/00-20.mdx","sourceDirName":"textbook/chapter_03","slug":"/textbook/chapter_03/00-20","permalink":"/textbook/docs/textbook/chapter_03/00-20","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Data Types"},"sidebar":"textbookSidebar","previous":{"title":"Variables","permalink":"/textbook/docs/textbook/chapter_03/00-10"},"next":{"title":"Testing Variables","permalink":"/textbook/docs/textbook/chapter_03/00-30"}}');var a=s(4848),i=s(8453),r=s(1428);const o={title:"Data Types"},l=void 0,d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Integers",id:"integers",level:2},{value:"Floating points",id:"floating-points",level:2},{value:"Data validation",id:"data-validation",level:3},{value:"Dates and times",id:"dates-and-times",level:2},{value:"Strings",id:"strings",level:2},{value:"What is in a string?",id:"what-is-in-a-string",level:3},{value:"Representing strings",id:"representing-strings",level:3},{value:"Encapsulating the string in quotes",id:"encapsulating-the-string-in-quotes",level:4},{value:"String is the default data type",id:"string-is-the-default-data-type",level:4},{value:"Manipulating Strings",id:"manipulating-strings",level:3},{value:"Joining strings together",id:"joining-strings-together",level:4},{value:"Using the <code>+</code> operator",id:"using-the--operator",level:5},{value:"Using <code>format()</code>",id:"using-format",level:5},{value:"Strings and Markdown (and why we need Mako)",id:"strings-and-markdown-and-why-we-need-mako",level:3},{value:"Booleans",id:"booleans",level:2},{value:"Booleans in code",id:"booleans-in-code",level:3},{value:"Testing for &#39;Yes&#39; and &#39;No&#39;",id:"testing-for-yes-and-no",level:3},{value:"How Python represents booleans internally",id:"how-python-represents-booleans-internally",level:3},{value:"Simple and Complex Data Types",id:"simple-and-complex-data-types",level:2}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(n.p,{children:["Much like we can put different stuff in a bucket, like water or sand or fish (yum!),\nwe can also store different types of data in a variable.  Unlike a bucket,\nwe tend to be a bit more picky about knowing what type of data we've stored\nin our variables.  This is because we can do different things with different\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"datatype",plural:!0}),".  For example, we can do\narithmetic on number data types but we can't on text (or\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"string"}),") data types.  Likewise, we can join\ntwo strings together but doing that doesn't make too much sense with numbers."]}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsxs)(n.p,{children:["Text is stored in what's called a ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"string"})," data type.\nIt's called a 'string' because text is essentially a string of characters all joined together."]}),(0,a.jsxs)(n.p,{children:["From now onwards we'll be referring to text only as ",(0,a.jsx)(n.strong,{children:"strings"})," and not as text."]}),(0,a.jsxs)(n.p,{children:["We'll cover this further ",(0,a.jsx)(n.a,{href:"#strings",children:"below"})," but in coding, text includes spaces\n(eg: 'Mark' is a string, as is 'Mark Ferraretto') and other special characters.\nJust keep that in mind for now."]})]}),"\n",(0,a.jsx)(n.p,{children:"Let's cover off a few data types that you'll be using in your code."}),"\n",(0,a.jsx)(n.h2,{id:"integers",children:"Integers"}),"\n",(0,a.jsxs)(n.p,{children:["Integers are whole numbers, that is numbers that are not fractions or numbers without a decimal point (eg: 1, 5, -33 etc).  They can be positive or negative.  They ",(0,a.jsx)(n.strong,{children:"must not"}),"\nhave decimals."]}),"\n",(0,a.jsx)(n.p,{children:"We use integers to store information such as a person's age, or the year they were born,\nor the number of days since they received a subpoena."}),"\n",(0,a.jsxs)(n.p,{children:["We can do arithmetic on integers.  For example, we can add two numbers together.  The value of the variable ",(0,a.jsx)(n.code,{children:"c"})," in the example below would be 3.  The value of ",(0,a.jsx)(n.code,{children:"d"})," would be 9."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"a = 1\nb = 2\nc = a + b\nd = (a + b) * 3\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.p,{children:"In python we use these arithmetic operators:"}),(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"This"}),(0,a.jsx)(n.th,{children:"Means this"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"+"})}),(0,a.jsx)(n.td,{children:"Addition (der!)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"-"})}),(0,a.jsxs)(n.td,{children:["Subtraction eg: ",(0,a.jsx)(n.code,{children:"3 - 2 == 1"})]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"*"})}),(0,a.jsxs)(n.td,{children:["Multiplication eg: ",(0,a.jsx)(n.code,{children:"3 * 2 == 6"})]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"/"})}),(0,a.jsxs)(n.td,{children:["Division eg: ",(0,a.jsx)(n.code,{children:"1 / 2 == 0.5"})]})]})]})]})]}),"\n",(0,a.jsxs)(n.p,{children:["If we want to collect integer data from a user we can tell Docassemble to ensure that\nonly integers are collected.  We can set a ",(0,a.jsx)(n.code,{children:"datatype"})," in Docassemble code and this\nprevents incorrect data (eg: a string) being entered into the text field.  Here's an example"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",metastring:'showLineNumbers title="Only collect age as an integer"',children:"---\nmandatory: True\nquestion: Integer datatype\nfields:\n  - Enter your age: MJFage\n    # highlight-next-line\n    datatype: integer\n---\n"})}),"\n",(0,a.jsxs)(n.p,{children:["By setting ",(0,a.jsx)(n.code,{children:"datatype: integer"})," Docassemble prevents the user from entering non-integer\ndata into the field."]}),"\n",(0,a.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_03/datatypes2.png"}),"\n",(0,a.jsxs)(n.p,{children:["This is known as ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"datavalidation"}),".  Docassemble provides\na comprehensive set of data validation tools to ensure that users do not inadvertently\nenter incorrect data."]}),"\n",(0,a.jsx)(n.h2,{id:"floating-points",children:"Floating points"}),"\n",(0,a.jsxs)(n.p,{children:["Floating point numbers, or ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"float",plural:!0})," are\nnumbers that ",(0,a.jsx)(n.em,{children:"do"})," contain decimals.  For example, the numbers\n0.5, 1.32, 6.333333333, -123483.3728322 are all floating point numbers."]}),"\n",(0,a.jsx)(n.p,{children:"The most common use for floating points in a legal context is to work with money amounts,\nas money, being a number to two decimal points, is best represented as a floating point number."}),"\n",(0,a.jsx)(n.p,{children:"We can do arithmetic with floats much like we do with integers.  We can mix integers\nand floats in our arithmetic, but if we do the result is always a float.  See these\nexamples:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"a = 1.5\nb = 3.5\nc = a * 3  # c is 4.5\nd = b * 2  # d is 7.0 (not 7)\ne = d + 1  # e is 8.0 (not 9)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Docassemble's ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"datavalidation"})," system contains a few\ntools to help us ensure we collect floating point numbers properly.",(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.code,{children:"datatype: number"})," that allows us to ensure that whatever we collect must be a number\n(in this case meaning a float or an integer).  Docassemble also provides a\n",(0,a.jsx)(n.code,{children:"datatype: currency"})," which forces the user to enter number as a currency (ie: either\na whole number or a number with only two digits after the decimal point)."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",metastring:'showLineNumbers title="Using number and currency datatypes"',children:"---\nmandatory: True\nquestion: Floating point data types\nfields:\n  - Can only enter a currency value here: MJFcurrency\n    # highlight-next-line\n    datatype: currency\n  - Can enter any number here: MJFnumber\n    # highlight-next-line\n    datatype: number\n---\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In the screenshot below you can see the user has entered text into the second field\nand so the entry is invalid.  In the first field the user has entered ",(0,a.jsx)(n.code,{children:"123.456"})," which is\nnot a valid currency.  In this case Docassemble will round up the value to ",(0,a.jsx)(n.code,{children:"123.46"})," and\naccept the input."]}),"\n",(0,a.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_03/datatypes3.png"}),"\n",(0,a.jsx)(n.admonition,{title:"Hint",type:"tip",children:(0,a.jsx)(n.p,{children:"Copy and paste the code into your playground and try it out!"})}),"\n",(0,a.jsxs)(n.admonition,{type:"caution",children:[(0,a.jsx)(n.h3,{id:"data-validation",children:"Data validation"}),(0,a.jsxs)(n.p,{children:["A word on data types and Docassemble's ",(0,a.jsx)(n.code,{children:"datatype:"})," data validation"]}),(0,a.jsxs)(n.p,{children:["Docassemble and ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"python",upper:!0})," define data type in\nslightly different ways.  In Python a data type is what we're describing here - the\nfundamental type of data that can be stored in a variable.\nDocassemble's ",(0,a.jsx)(n.code,{children:"datatype"})," mixes storage of data with ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"datavalidation"}),".\nWe've seen how these don't quite mesh as, fundamentally, a money amount is a\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"float"})," as it is a number with decimal places.\nDocassemble distinguishes between regular floats and currency to\nsimplify how currencies are displayed and captured.  This is because, as legal software,\ncurrencies are the most common type of floating point numbers that it works with."]}),(0,a.jsxs)(n.p,{children:["We'll see there are other differences as well.  For example, Docassemble has different\ndata types for ",(0,a.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#email",children:"Email addresses"}),",\n",(0,a.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#password",children:"passwords"})," and\n",(0,a.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#plaintext",children:"plain text"}),", even though\nfundamentally, all three 'data types' are actually\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"string",plural:!0}),"."]}),(0,a.jsxs)(n.p,{children:["For practical purposes, consider Docassemble's ",(0,a.jsx)(n.code,{children:"datatype:"})," as a\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"datavalidation"})," tool and not as a fundamental\ndata type.  When we refer to data types in this textbook we'll be referring to the\nfundamental data types as they are defined in Python and as we discus them in this\npart of the textbook."]})]}),"\n",(0,a.jsxs)(r.Quizlet,{children:[(0,a.jsx)(n.p,{children:"In this expression"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"a = 11.55\n"})}),(0,a.jsxs)(n.p,{children:["the data type of ",(0,a.jsx)(n.code,{children:"a"})," is:"]}),(0,a.jsx)(r.Answer,{children:(0,a.jsx)(n.p,{children:"Integer"})}),(0,a.jsx)(r.Answer,{isCorrect:!0,children:(0,a.jsx)(n.p,{children:"Floating point number"})}),(0,a.jsx)(r.Answer,{children:(0,a.jsx)(n.p,{children:"String"})})]}),"\n",(0,a.jsxs)(r.Quizlet,{children:[(0,a.jsx)(n.p,{children:"In this expression"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"b = 253265\n"})}),(0,a.jsxs)(n.p,{children:["the data type of ",(0,a.jsx)(n.code,{children:"b"})," is:"]}),(0,a.jsx)(r.Answer,{isCorrect:!0,children:(0,a.jsx)(n.p,{children:"Integer"})}),(0,a.jsx)(r.Answer,{children:(0,a.jsx)(n.p,{children:"Floating point number"})}),(0,a.jsx)(r.Answer,{children:(0,a.jsx)(n.p,{children:"String"})})]}),"\n",(0,a.jsx)(n.h2,{id:"dates-and-times",children:"Dates and times"}),"\n",(0,a.jsx)(n.p,{children:"Dates and times are another number-type data type.  In fact, they are represented\ninternally to Python (and many other languages and systems) as integers.\nHowever, for practical\npurposes we deal with dates and times as a separate data type."}),"\n",(0,a.jsx)(n.p,{children:"Like other number-type data, we can do arithmetic with dates and times. This can be\nuseful if, for example, you need to work out the deadline for submitting a defence to,\na statement of claim, or to see if a claim is statute-barred."}),"\n",(0,a.jsx)(n.p,{children:"Date and time arithmetic is more complex than arithmetic with other number-like data.\nWe can't just add a number to a date as Docassemble doesn't know whether we want\nto add that number to the day, month or year component of the date."}),"\n",(0,a.jsx)(n.p,{children:"Date and time arithmetic will be covered elsewhere in this textbook but here is\nsome example code that collects dates and datetimes and performs some basic arithmetic."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",metastring:'showLineNumbers title="Basic Date and Time arithmetic"',children:'---\nmandatory: True\nquestion: Date and time output\nsubquestion: |\n  Data|Value \n  ---|---\n  The first date you entered (formatted to be AGLC-compliant)|${format_date(MJFdate1, "d MMMM YYYY")}\n  The date and time you entered (not AGLC-compliant.  Note that by default the time isn\'t displayed!)|${MJFdt1}\n  The date and time, this time AGLC-compliant and with the time|${format_datetime(MJFdt1, "d MMMM YYYY h:mm a")}\n  28 days after the first date|${MJFdate1.plus(days=28)} \n  \n---\nquestion: Enter data below\nfields:\n  - Choose a date: MJFdate1\n    datatype: date\n  - Choose another date and time: MJFdt1\n    datatype: datetime\n---\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"Copy this code into your playground and try it out!"})}),"\n",(0,a.jsx)(n.h2,{id:"strings",children:"Strings"}),"\n",(0,a.jsxs)(n.p,{children:["Strings are by far the most common data type you will be dealing with.  Law is\nclearly a very text-based profession and text is represented to technology as a\nstring of characters joined together, or as a ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"string"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"what-is-in-a-string",children:"What is in a string?"}),"\n",(0,a.jsx)(n.p,{children:"Any text is clearly a string, so:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"hello"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"is a string. However, a string is more than just words.  A string can contain numbers,\nsymbols and spaces.  In short, if you can type it on your keyboard then it can be\nrepresented as a string.  That means:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Strings can contain spaces between words, and punctuation."}),"\n"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Strings can contain numbers, such as this one: 123!"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The next three examples are also all strings:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"*#(%#()#_@(@&#))"}),"\n"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"2839683732"}),"\n"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"This string 'has quotes' in it"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"representing-strings",children:"Representing strings"}),"\n",(0,a.jsx)(n.p,{children:"As can be seen above a string can contain any combination of text, numbers and symbols.\nThis makes it challenging for Docassemble to work out whether data input is a string\nor not.  How do we address this?  There are two ways:"}),"\n",(0,a.jsx)(n.h4,{id:"encapsulating-the-string-in-quotes",children:"Encapsulating the string in quotes"}),"\n",(0,a.jsx)(n.p,{children:"If we want to make it clear to Docassemble that a string is a string and not, say,\npart of the code or a number or something else, we encapsulate the string in quotes.\nWe can use single or double quotes.  The convention is to use single quotes and only\nuse double-quotes if your string contains single quotes as part of it.  So, we would\nexpress the five examples above as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"'Strings can contain spaces between words, and punctuation.'\n'Strings can contain numbers, such as this one: 123!'\n'*#(%#()#_@(@&#))'\n'2839683732'\n\"This string 'has quotes' in it\"\n"})}),"\n",(0,a.jsx)(n.p,{children:"When Docassemble sees text in quotes it knows not to process that text and to display\nit as a string."}),"\n",(0,a.jsx)(n.h4,{id:"string-is-the-default-data-type",children:"String is the default data type"}),"\n",(0,a.jsxs)(n.p,{children:["The second way is that Docassemble has a presumption that ",(0,a.jsx)(n.em,{children:"any"})," data it collects is\na string unless specified otherwise.  This is where those ",(0,a.jsx)(n.code,{children:"datatype:"})," tags come into\nplay.  If the ",(0,a.jsx)(n.code,{children:"datatype:"})," tag is omitted (as it usually is), Docassemble\n",(0,a.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#plaintext",children:"assumes"})," the\ndata type will be a string (or ",(0,a.jsx)(n.code,{children:"text"}),") as it calls it."]}),"\n",(0,a.jsx)(n.p,{children:"Unless we specify otherwise, Docassemble collects data as a string and wraps the\nquotes around it."}),"\n",(0,a.jsxs)(n.admonition,{title:"Numbers as strings",type:"caution",children:[(0,a.jsx)(n.p,{children:"It is evident from the above example that a string could contain a number. This can\nbe a cause of confusion as Docassemble will usually display numbers as number data types and numbers as strings exactly the same way."}),(0,a.jsx)(n.p,{children:"Copy this code into your playground as an example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nmandatory: True\nquestion: Numbers as strings\nsubquestion: |\n\n  Comment|Data\n  ---|---\n  Here is the first number you entered. This was collected as a string.|${MJFnum1}\n  Here is the second number you entered.  This was collected as an integer.|${MJFnum2}\n  \n---\nquestion: Enter data\nfields:\n  - Enter a number. This will be stored as a string: MJFnum1\n  - Enter a number. This will be stored as an integer: MJFnum2\n    datatype: integer\n---\n"})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Be careful!"})}),(0,a.jsxs)(n.p,{children:["Docassemble treats strings and numbers in similar ways.  For example, while you can\n'add' two strings together (using the ",(0,a.jsx)(n.code,{children:"+"})," sign) what you get from a string will be\nvery different to what you'll get if your data is a number type.  The same goes for\ntesting strings to see if they equal one another.  See ",(0,a.jsx)(n.a,{href:"./00-30",children:"Testing Variables"})," for\nmore about this."]})]}),"\n",(0,a.jsxs)(r.Quizlet,{children:[(0,a.jsx)(n.p,{children:"Which of these variables have been assigned a value with a string data type?"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"a = 52.5\nb = '52.5'\nc = 525\n"})}),(0,a.jsx)(r.Answer,{children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"a"})})}),(0,a.jsx)(r.Answer,{isCorrect:!0,children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"b"})})}),(0,a.jsx)(r.Answer,{children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"c"})})}),(0,a.jsxs)(r.Explanation,{correctAnswer:!0,children:[(0,a.jsx)(n.p,{children:"Correct!"}),(0,a.jsxs)(n.p,{children:["Even though it appears a number is being assigned to ",(0,a.jsx)(n.code,{children:"b"})," it is actually\na string as that number is surrounded by single quotes."]})]})]}),"\n",(0,a.jsxs)(r.Quizlet,{children:[(0,a.jsx)(n.p,{children:"Which of these variables has correctly been assigned a string value?"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"a = The cat sat on the mat\nb = 'It doesn't matter what I say'\nc = \"The rain in spain stays mainly on the plain\"\n"})}),(0,a.jsxs)(n.p,{children:["the data type of ",(0,a.jsx)(n.code,{children:"b"})," is:"]}),(0,a.jsx)(r.Answer,{children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"a"})})}),(0,a.jsx)(r.Answer,{children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"b"})})}),(0,a.jsx)(r.Answer,{isCorrect:!0,children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"c"})})}),(0,a.jsxs)(r.Explanation,{correctAnswer:!0,children:[(0,a.jsx)(n.p,{children:"Correct!"}),(0,a.jsx)(n.p,{children:"The first line is incorrect as the phrase is not encapsulated in quotation marks.\nIf you wrote this line in code you would receive a rather cryptic syntax error."}),(0,a.jsx)(n.p,{children:"Here is the corect statement:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"a = 'The cat sat on the mat'\n"})}),(0,a.jsx)(n.p,{children:"The second line is also incorrect as, although it is encapsulated in single quotes\nthe phrase itself also contains a single quote.  When you have a phrase that\ncontains quotation  marks you should encapsulate that phrase in  the other quotes."}),(0,a.jsx)(n.p,{children:"Here is the correct statement:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'b = "It doesn\'t matter what I say"\n'})}),(0,a.jsx)(n.p,{children:"The third line is correct as it the string is encapsualted in double-quotes.  You\ncan use single or double quotes to represent a string"})]})]}),"\n",(0,a.jsx)(n.h3,{id:"manipulating-strings",children:"Manipulating Strings"}),"\n",(0,a.jsx)(n.p,{children:"We've already seen that we can perform arithmetic operations on the number types and,\nwith a bit more effort, on the date and datetime types.  Strings can also be\nmanipulated, but clearly arithmetic operations won't work on strings as they are not\nnumbers.  That said, here are a few things you can do with strings."}),"\n",(0,a.jsx)(n.h4,{id:"joining-strings-together",children:"Joining strings together"}),"\n",(0,a.jsxs)(n.p,{children:["There are a number of ways to join strings together.  One way is by using the plus (",(0,a.jsx)(n.code,{children:"+"}),")\noperator."]}),"\n",(0,a.jsxs)(n.h5,{id:"using-the--operator",children:["Using the ",(0,a.jsx)(n.code,{children:"+"})," operator"]}),"\n",(0,a.jsxs)(n.p,{children:["This method of joining strings together is usually used in\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"codeblock",plural:!0})," or inside\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"mako",upper:!0})," expressions in a\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"subquestionblock"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Let's look at this example."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"a = 'First part'\nb = 'Second part'\nc = a + b\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In the code above, the value of ",(0,a.jsx)(n.code,{children:"c"})," would be ",(0,a.jsx)(n.code,{children:"'First partSecond part'"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Note the strings are joined directly together with no space.  If you want a space\nbetween strings then you need to add it yourself.  Luckily, you can use multiple joins\n(",(0,a.jsx)(n.code,{children:"+"}),") in the one statement."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"a = 'First part'\nb = 'Second part'\nc = a + ' ' + b     # Add a space by encapsulating it in quotes\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now the value of c is ",(0,a.jsx)(n.code,{children:"'First part Second part'"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Here is an example using ",(0,a.jsx)(n.code,{children:"+"})," to join strings together inside a Mako expression:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nmandatory: True\nquestion: String Concatenation\nsubquestion: |\n    Hello,\n\n    Your full name is ${ MJFfirstname + ' ' + MJFlastname }\n---\n"})}),"\n",(0,a.jsxs)(r.Quizlet,{children:[(0,a.jsxs)(n.p,{children:["In this statement, what value is assigned to ",(0,a.jsx)(n.code,{children:"a"}),"?"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"a = 1 + 1\n"})}),(0,a.jsx)(r.Answer,{isCorrect:!0,children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"2"})})}),(0,a.jsx)(r.Answer,{children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"1"})})}),(0,a.jsx)(r.Answer,{children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"'11'"})})}),(0,a.jsxs)(r.Explanation,{correctAnswer:!0,children:[(0,a.jsx)(n.p,{children:"Correct!"}),(0,a.jsx)(n.p,{children:"Two integers are being added together, so the answer will be 2"})]})]}),"\n",(0,a.jsxs)(r.Quizlet,{children:[(0,a.jsxs)(n.p,{children:["In this statement, what value is assigned to ",(0,a.jsx)(n.code,{children:"a"}),"?"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"a = '1' + '1'\n"})}),(0,a.jsx)(r.Answer,{children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"2"})})}),(0,a.jsx)(r.Answer,{children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"11"})})}),(0,a.jsx)(r.Answer,{isCorrect:!0,children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"'11'"})})}),(0,a.jsxs)(r.Explanation,{correctAnswer:!0,children:[(0,a.jsx)(n.p,{children:"Correct!"}),(0,a.jsxs)(n.p,{children:["The two number 1s on the right side are now encapsualted in quotes.  This makes\nthem strings (single-character strings!) and not integers any more.  Therefore,\nwhen we use ",(0,a.jsx)(n.code,{children:"+"})," we are now joining two strings together instead of performing\ninteger arithmetic.  Consequently the answer is the string ",(0,a.jsx)(n.code,{children:"'11'"})," (as opposed to\nthe integer ",(0,a.jsx)(n.code,{children:"11"}),")."]})]})]}),"\n",(0,a.jsxs)(n.h5,{id:"using-format",children:["Using ",(0,a.jsx)(n.code,{children:"format()"})]}),"\n",(0,a.jsxs)(n.p,{children:["An alternative to using ",(0,a.jsx)(n.code,{children:"+"})," is to use the ",(0,a.jsx)(n.code,{children:"format()"})," ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"method"}),".\nLike ",(0,a.jsx)(n.code,{children:"+"})," this is also suitable for code blocks and Mako expressions.  With ",(0,a.jsx)(n.code,{children:"format()"}),"\nyou lay out a template string as you would like it,\nwith spaces and any other fixed characters or boilerplate text.\nYou place ",(0,a.jsx)(n.code,{children:"{}"})," as markers within your string to indicate where format should place\nvariables.  See this example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"a = 'First part'\nb = 'Second part'\nc = '{} {}'.format(a, b)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In this example the value of c is ",(0,a.jsx)(n.code,{children:"'First part Second part'"})," just as it was above.\nYou can see we created a template string with ",(0,a.jsx)(n.code,{children:"{}"})," markers for each variable and\ninserted a space (",(0,a.jsx)(n.code,{children:" "}),") in between them.  We then use ",(0,a.jsx)(n.code,{children:"format(a, b)"})," to substitute\nthe value of ",(0,a.jsx)(n.code,{children:"a"})," into the first ",(0,a.jsx)(n.code,{children:"{}"})," and ",(0,a.jsx)(n.code,{children:"b"})," into the second ",(0,a.jsx)(n.code,{children:"{}"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["You can see that using ",(0,a.jsx)(n.code,{children:"format()"})," in this way we've ended up with a tidier expression.\nAlso, someone reading our code would immediately know that we were planning to display\ntwo strings separated by a space."]}),"\n",(0,a.jsxs)(n.p,{children:["Here's what the example Docassemble code would look like if we used ",(0,a.jsx)(n.code,{children:"format()"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nmandatory: True\nquestion: String Concatenation\nsubquestion: |\n    Hello,\n\n    Your full name is ${ '{} {}'.format(MJFfirstname, MJFlastname) }\n---\n"})}),"\n",(0,a.jsx)(n.h3,{id:"strings-and-markdown-and-why-we-need-mako",children:"Strings and Markdown (and why we need Mako)"}),"\n",(0,a.jsxs)(n.p,{children:["As you know from ",(0,a.jsx)(r.DisplayChapter,{chapter:"chapter_02",target:"00-20"}),", we use\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"markdown"})," to construct inteview screens in our apps.",(0,a.jsx)(n.br,{}),"\n","You can see that Markdown is basically text, or strings!  Because of this Markdown\ndoes away with the requirement to encapsulate strings in quotes. Instead, Markdown\nassumes ",(0,a.jsx)(n.em,{children:"everything"})," is a string.  This is useful as most of the Markdown we type\nwill be boilerplate text."]}),"\n",(0,a.jsxs)(n.p,{children:["However, there are times when we need to embed the value of a variable into our\nboilerplace text.  Markdown deals with this by using\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"escapecharacter",plural:!0}),".\nThese are special characters that Markdown knows trigger some special processing.",(0,a.jsx)(n.br,{}),"\n","We have already seen this with ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"mako",upper:!0}),". Mako\nexpressions are surrounded by a dollar sign and braces (ie: ",(0,a.jsx)(n.code,{children:"${...}"}),").  Markdown\nknows that when it sees the ",(0,a.jsx)(n.code,{children:"${"})," characters that what follows it is Mako.  Markdown\nprocesses everything it then sees as Python code until it finds the closing brace ",(0,a.jsx)(n.code,{children:"}"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["This allows us to make our example code even clearer, because we don't need to\nconcatentate strings or use ",(0,a.jsx)(n.code,{children:"format()"})," in a Mako expression.  We can just display\nthe two variables as Mako with a space between them."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nmandatory: True\nquestion: String Concatenation\nsubquestion: |\n    Hello,\n\n    Your full name is ${MJFfirstname} ${MJFlastname}\n---\n"})}),"\n",(0,a.jsx)(n.p,{children:"The space between the two Mako expressions is a string and is therefore displayed."}),"\n",(0,a.jsx)(n.p,{children:"This last example is the clearest way of displaying two Mako variables."}),"\n",(0,a.jsx)(n.admonition,{title:"What's inside Mako is Python",type:"note",children:(0,a.jsxs)(n.p,{children:["We alluded to this just now.  'Mako' describes the means of providing escape characters\nto Markdown and then processing the expression inside its braces.  The code written\ninside the braces is Python code (or, more technically, a Python\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"expression"}),").  This is the same Python that you use\nin ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"codeblock"})," and all througout Docassemle."]})}),"\n",(0,a.jsx)(n.h2,{id:"booleans",children:"Booleans"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"boolean"})," data type is takes its name from a ",(0,a.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Boolean",children:"branch of mathematics"}),".\nWe don't need to get into any of the mathematical details. All we need to know is that\na boolean data type can have only two possible values - ",(0,a.jsx)(n.em,{children:"True"})," or ",(0,a.jsx)(n.em,{children:"False"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["This appears inredibly simple but boolean logic (and consequently variables with a\nboolean data types) are absolutely central to our decision-making process and the logic\nof our applications.  In fact, booleans form the core of application logic in\n",(0,a.jsx)(n.em,{children:"every"})," software system regardless of how simple or complex.\nEvery decision that we make will ultimately be expressed as a true/false proposition."]}),"\n",(0,a.jsx)(n.p,{children:"Let's look at some questions we might ask and how we would express these as true/false\npropositions."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Age"})}),"\n",(0,a.jsx)(n.p,{children:"We may need to ask a user's age, for example to determine if they are an adult.  If so\nwe may ask the question:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:'"Are you 18 or over?".'}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This could be expressed as a true/false proposition, such as:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:'"Your age is greater than or equal to 18"'}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Which would evaluate as true or false."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Gender"})}),"\n",(0,a.jsx)(n.p,{children:"Likewise, we may need to know a user's gender so that we can direct them to an\nappropriate legal service.  Our initial thoughts may be to ask:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:'"What gender do you identify as?"'}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"That question is open-ended and could have any number of answers, some of\nwhich our code may not account for.  A better approach may be to ask:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:'"Do you identify as male, female or some other gender?"'}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Now we have three possible answers. Consequently we'd need three true/false propositions\nto evaluate:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:['"You identify as male"',(0,a.jsx)(n.br,{}),"\n",'"You identify as female"',(0,a.jsx)(n.br,{}),"\n",'"You identify as some other gender"']}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"We would evaluate each of these in turn.  Only one statement would evaluate to true."}),"\n",(0,a.jsx)(n.h3,{id:"booleans-in-code",children:"Booleans in code"}),"\n",(0,a.jsx)(n.p,{children:'Much like above, we express booleans in code as true/false propositions.  So, for example,\nthe proposition "Your age is greater than or equal to 18" would be expressed as:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"MJFage >= 18\n"})}),"\n",(0,a.jsx)(n.p,{children:"If we wanted to remember the outcome of the proposition we could store that in\nanother variable:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"MJFisadult = MJFage >= 18\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The value of ",(0,a.jsx)(n.code,{children:"MJFisadult"})," would be ",(0,a.jsx)(n.code,{children:"True"})," or ",(0,a.jsx)(n.code,{children:"False"})," depending on the user's age."]}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{}),(0,a.jsxs)(n.p,{children:["Python uses two special words (or ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"reservedword",plural:!0}),")"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"True"})," and ",(0,a.jsx)(n.code,{children:"False"})," to represent, well true and false!  Python knows to treat these\nwords as the meaning of true and false respectively and not some other variable or\nstring."]}),"\n"]})]}),"\n",(0,a.jsx)(n.h3,{id:"testing-for-yes-and-no",children:"Testing for 'Yes' and 'No'"}),"\n",(0,a.jsx)(n.p,{children:"In many cases you will ask a user a question that requires a Yes/No answer.\nUsing booleans is a great way to store the responses. This is because testing\nfor true/false is easier and logically clearer than testing for the strings\n'Yes' and 'No'. This is because:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"We can only collect two possible answers. The boolean data type allows for the storage of only two possible answers. This place is an inherent limit on us being able to accidentally collect 1/3 type of answer."}),"\n",(0,a.jsx)(n.li,{children:"Using booleans means that we don't need to worry about the different\npossible permutations of answer that we may get with text. For example,\ncollecting our responses as a string would mean that we may need to test\nfor each of 'Yes', 'yes', 'YES', 'No', 'no', 'NO' and any other combination\nof upper and lower case letters."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"In short, using booleans to collect responses to Yes/No questions is a good\nsolution and is in fact best practice in coding."}),"\n",(0,a.jsxs)(n.admonition,{title:"Python is case sensitive!",type:"caution",children:[(0,a.jsxs)(n.p,{children:["Python is case sensitive.  That means that ",(0,a.jsx)(n.code,{children:"True"})," and ",(0,a.jsx)(n.code,{children:"true"})," are not the same!  Unlike\n",(0,a.jsx)(n.code,{children:"True"}),", ",(0,a.jsx)(n.code,{children:"true"})," is not a ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"reservedword"})," and will be treated\nas a variable name."]}),(0,a.jsx)(n.p,{children:"Mixing up cases can often lead to unintended conseuqneces, so be careful!"})]}),"\n",(0,a.jsx)(n.p,{children:"Helpfully, Docassemble provides certain data types to help us in collecting\nYes/No responses and storing them as booleans."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Remember that what Docassemble calls 'data types'\n",(0,a.jsx)(n.a,{href:"#data-validation",children:"does not always marry up"}),"\nwith how this textbook defines data types."]})}),"\n",(0,a.jsxs)(n.p,{children:["Docassemble provides ",(0,a.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#yesornoquestions",children:"regular buttons"}),":"]}),"\n",(0,a.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_03/datatypes4.png"}),"\n",(0,a.jsxs)(n.p,{children:["Docassemble provides a number of ways to collect Yes/No information using\n",(0,a.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#fields%20yesno",children:"checkboxes"})," and\nradio buttons."]}),"\n",(0,a.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_03/datatypes5.png"}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsx)(n.h3,{id:"how-python-represents-booleans-internally",children:"How Python represents booleans internally"}),(0,a.jsx)(n.p,{children:"It's normally way beyond the scope of this textbook to examine the internal working of\nprogramming languages but when it comes to booleans we need to make an exception."}),(0,a.jsxs)(n.p,{children:["Internally, Python does not use special ",(0,a.jsx)(n.code,{children:"True"})," and ",(0,a.jsx)(n.code,{children:"False"})," data to record boolean values.  Instead, it does this:"]}),(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Python determines something is ",(0,a.jsx)(n.code,{children:"False"})," if its value is zero; and"]}),"\n",(0,a.jsxs)(n.li,{children:["Python determines something is ",(0,a.jsx)(n.code,{children:"True"})," if its value is non-zero."]}),"\n"]}),(0,a.jsx)(n.p,{children:"Consequently, these two statements are the same"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"x = 0\ny = False\n"})}),(0,a.jsxs)(n.p,{children:["Here is output from a ",(0,a.jsx)(n.a,{href:"https://www.python.org/",children:"python console"})," that demonstrates this"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:">>> x = 0\n>>> y = False\n>>> x == y\nTrue\n>>>\n"})}),(0,a.jsxs)(n.p,{children:["Even though ",(0,a.jsx)(n.code,{children:"x"})," and ",(0,a.jsx)(n.code,{children:"y"})," appear to have different values, internally they both contain\n",(0,a.jsx)(n.code,{children:"0"}),"."]}),(0,a.jsxs)(n.p,{children:["Similarly, the value ",(0,a.jsx)(n.code,{children:"1"})," is equivalent to ",(0,a.jsx)(n.code,{children:"True"}),".  Let's see these examples in a python console"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:">>> x = 1\n>>> y = True\n>>> x == y\nTrue\n"})}),(0,a.jsxs)(n.p,{children:["This internal representation becomes important when testing boolenans in\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"ifstatement",plural:!0})," as any if statement will assume\nany non-zero result is true.  For example, this if statement:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"if 'West':\n    True\nelse:\n    False\n"})}),(0,a.jsxs)(n.p,{children:["will always return ",(0,a.jsx)(n.code,{children:"True"})," as the string 'West' is not empty.  This is worth\nkeeping in mind when ",(0,a.jsx)(n.a,{href:"./00-30",children:"testing variables"})," and in particular when connecting\n",(0,a.jsx)(n.a,{href:"./00-30#logic-tests",children:"logic tests"})," together."]})]}),"\n",(0,a.jsx)(n.h2,{id:"simple-and-complex-data-types",children:"Simple and Complex Data Types"}),"\n",(0,a.jsx)(n.p,{children:"Finally, before we finish our discussion on data types, let's consider simple\nand complex data types."}),"\n",(0,a.jsxs)(n.p,{children:["Up until this point we have discussed 'simple' data types, that is data types that\nrepresent one thing - an integer, a floating point number, a string and so-on.\nSo far, we've only been storing one value in a variable.  However, like a bucket, it\nis possible to store ",(0,a.jsx)(n.em,{children:"more"})," than one thing in a variable at a time. For this we use\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"complexdatatype",plural:!0}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The complex data types we'll refer to in this textbook will be\n",(0,a.jsx)(r.DisplayGlossaryItem,{item:"list",plural:!0})," and ",(0,a.jsx)(r.DisplayGlossaryItem,{item:"dictionary",plural:!0}),".\nA list allows us to store multiple data and to access them, well, as a list ie:\nfrom the first element to the last sequentially.  A dictionary allows us to refer\nto data by an identifier, or a 'key'.  Both these data types unlock the ability for\nus to store sophisticated data sets, even databases, in our Docassemble apps."]}),"\n",(0,a.jsxs)(n.p,{children:["We will cover complex data types in ",(0,a.jsx)(r.DisplayChapter,{chapter:"chapter_06"}),".\nFor now, just be aware that complex data types, and the additional capabilities they\nprovide, exist."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);