"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[1857],{1034:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>h,default:()=>g,frontMatter:()=>d,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"textbook/chapter_07/00-20","title":"Making the changes","description":"In this part of the textbook we will start with basic code with no styling and step by step","source":"@site/docs/textbook/chapter_07/00-20.mdx","sourceDirName":"textbook/chapter_07","slug":"/textbook/chapter_07/00-20","permalink":"/textbook/docs/textbook/chapter_07/00-20","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Making the changes"},"sidebar":"textbookSidebar","previous":{"title":"Walk through an example app","permalink":"/textbook/docs/textbook/chapter_07/00-10"},"next":{"title":"Application Source Code","permalink":"/textbook/docs/textbook/chapter_07/00-30"}}');var s=t(4848),i=t(8453),r=t(2487),a=t(5901),l=t(3199);const d={title:"Making the changes"},h=void 0,c={},u=[{value:"Starting code",id:"starting-code",level:2},{value:"Our changes",id:"our-changes",level:2},...l.RM,{value:"Inserting the logo",id:"inserting-the-logo",level:2},{value:"Changing the Navbar colour",id:"changing-the-navbar-colour",level:2},{value:"Create a CSS file",id:"create-a-css-file",level:3},{value:"Point the app to the CSS file",id:"point-the-app-to-the-css-file",level:3},{value:"How we describe colours in code",id:"how-we-describe-colours-in-code",level:3},{value:"Defining Flinders Blue",id:"defining-flinders-blue",level:3},{value:"Declaring the colour in CSS",id:"declaring-the-colour-in-css",level:3},{value:"Changing the Navbar colour",id:"changing-the-navbar-colour-1",level:3},{value:"Change the colour of the right-side menu",id:"change-the-colour-of-the-right-side-menu",level:2},{value:"Define the colour",id:"define-the-colour",level:3},{value:"Identify the component",id:"identify-the-component",level:3},{value:"Update the styles",id:"update-the-styles",level:3},{value:"Make the menu bar transparent",id:"make-the-menu-bar-transparent",level:2},{value:"About transparency",id:"about-transparency",level:3},{value:"Defining the transparent colours",id:"defining-the-transparent-colours",level:3},{value:"Identify the components",id:"identify-the-components",level:3},{value:"Update the styles",id:"update-the-styles-1",level:3},{value:"Add styled text",id:"add-styled-text",level:2},{value:"Adding the text",id:"adding-the-text",level:3},{value:"Enclosing the text in a <code>&lt;div&gt;</code>",id:"enclosing-the-text-in-a-div",level:3},{value:"Updating the styles",id:"updating-the-styles",level:3},{value:"Change the Continue Button",id:"change-the-continue-button",level:2},{value:"Define the colours.",id:"define-the-colours",level:3},{value:"Identify the component",id:"identify-the-component-1",level:3},{value:"Update the styles",id:"update-the-styles-2",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"In this part of the textbook we will start with basic code with no styling and step by step\nadd the necessary styles and other resources to arrive at our final staged product.  All the code\nis provided in this part of the textbook.  You are welcome to copy the starting code into your\nPlayground and make changes as we progress through our list."}),"\n",(0,s.jsx)(n.p,{children:"A complete set of code and resources is provided at the end of this section."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Before you get started you might want to consider setting up a ",(0,s.jsx)(n.a,{href:"/docs/recipes/making_a_project",children:"project"}),"\nfor your code."]})}),"\n",(0,s.jsx)(n.h2,{id:"starting-code",children:"Starting code"}),"\n",(0,s.jsx)(n.p,{children:"Let's look at our code for the current program with no styles added.  Feel free to copy\nthis into your Playground."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:'title="ch7_no_styles.yml" showLineNumbers',children:"---\nmetadata:\n  title: |\n    Look and Feel Demonstrator\n  short title: |\n    Style Demonstrator\n  show login: True\n---\nmandatory: True\nquestion: Look and Feel Demonstrator\nsubquestion: |\n  This version of our demonstrator has no styling.  It looks neat enough but it has all the\n  default style elements, such as the black navbar, no logo, standard colours for buttons\n  and so-on.\n\n  What we'd like to do is to 'theme' our app so that it looks a bit nicer or, more importantly\n  for clients, matches the look and feel of their website and their corporate style guide.\n\n  We will do this using HTML and CSS, as we shall see.\nbuttons:\n  - Exit: exit\n  - Restart: restart\n  - Continue: continue\n---\n"})}),"\n",(0,s.jsx)(n.h2,{id:"our-changes",children:"Our changes"}),"\n",(0,s.jsx)(n.p,{children:"Let's recall the changes we want to make..."}),"\n",(0,s.jsx)(l.Ay,{}),"\n",(0,s.jsx)(n.p,{children:"..and work through these one at a time."}),"\n",(0,s.jsx)(n.h2,{id:"inserting-the-logo",children:"Inserting the logo"}),"\n",(0,s.jsx)(n.p,{children:"This is not actually a change that makes use of CSS but we'll start with this anyway as it's\nat the top of our list. To add the logo we need to do these things:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"add a logo image to our Playground;"}),"\n",(0,s.jsx)(n.li,{children:"make the logo available to our app; and"}),"\n",(0,s.jsx)(n.li,{children:"add some code to display the logo as we like it."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Docassemble allows you to add ",(0,s.jsx)(n.a,{href:"https://docassemble.org/docs/initial.html#metadata",children:"metadata to your app"}),",\nsuch as the app's title, authors and other data.  A logo can also be added as metadata.  However, if we use\nDocassemble's ",(0,s.jsx)(n.code,{children:"metadata"})," key to add our logo, the logo will get shrunk to about 20 pixels which will make\nit hard to see.  We want the logo to be bigger.  Consequently we have to bypass ",(0,s.jsx)(n.code,{children:"metadata"})," and use\nDocassemble's ",(0,s.jsx)(n.a,{href:"https://docassemble.org/docs/functions.html#set_parts",children:(0,s.jsx)(n.code,{children:"set_parts()"})})," to set the logo\nto our larger logo."]}),"\n",(0,s.jsx)(n.p,{children:"So, let's get to it."}),"\n",(0,s.jsx)(n.p,{children:"Step 1 is to get a logo image.  Unsurprisingly we have already found one for you.  Here it is:"}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/flinders_logo.png"}),"\n",(0,s.jsx)(n.p,{children:"Wait What?"}),"\n",(0,s.jsx)(n.p,{children:"This looks like an error.  The swooshy part starts too far to the left of the shield and the writing\nand there's just white where 'Flinders University' should be.  This is deliberate.  Remember, our logo is\ngoing to be displayed on a dark background.  Our textbook background is white which is why some parts of the\nlogo aren't displayed.  However, it is a good logo image."}),"\n",(0,s.jsxs)(n.p,{children:["If you're coding along as we progress download this image (it's also available ",(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(1295).A+"",children:"here"}),")\nand save it as a file called ",(0,s.jsx)(n.code,{children:"flinders_logo.png"})," in the 'Static Files' folder in your Playground."]}),"\n",(0,s.jsxs)(n.p,{children:["Once you've copied the file across into 'Static Files' we need to tell our app where to find it.  To do so,\nwe insert these lines.  Insert them just below the ",(0,s.jsx)(n.code,{children:"metadata"})," block, after line 12:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"---\nobjects:\n    - MJFlogo: DAStaticFile.using(filename='flinders_logo.png')\n---\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Remember to separate all your blocks with ",(0,s.jsx)(n.code,{children:"---"})]})}),"\n",(0,s.jsx)(n.p,{children:"Now that we have told our app, or 'declared', our logo we can now tell our App that we want to set\nthe logo to be a bigger logo.  Our logo will be 50 pixels."}),"\n",(0,s.jsxs)(n.p,{children:["Insert this block under the ",(0,s.jsx)(n.code,{children:"objects:"})," block you just added:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"---\nmandatory: True\ncode: |\n  set_parts(logo='<img src=\"' + MJFlogo.url_for() + '\" style=\"height: 50px;\">')\n---\n"})}),"\n",(0,s.jsx)(n.p,{children:"Your code file should now look like this (with the new lines highlighted):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers {9-14}",children:"---\nmetadata:\n  title: |\n    Look and Feel Demonstrator\n  short title: |\n    Style Demonstrator\n  show login: True\n---\nobjects:\n  - MJFlogo: DAStaticFile.using(filename='flinders_logo.png')\n---\nmandatory: True\ncode: |\n  set_parts(logo='<img src=\"' + MJFlogo.url_for() + '\" style=\"height: 50px;\">')\n---\nmandatory: True\nquestion: Look and Feel Demonstrator\nsubquestion: |\n  This version of our demonstrator has no styling.  It looks neat enough but it has all the\n  default style elements, such as the black navbar, no logo, standard colours for buttons\n  and so-on.\n\n  What we'd like to do is to 'theme' our app so that it looks a bit nicer or, more importantly\n  for clients, matches the look and feel of their website and their corporate style guide.\n\n  We will do this using HTML and CSS, as we shall see.\nbuttons:\n  - Exit: exit\n  - Restart: restart\n  - Continue: continue\n---\n"})}),"\n",(0,s.jsx)(n.p,{children:"Run your app.  It should look like this:"}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/makingchanges1.png"}),"\n",(0,s.jsx)(n.h2,{id:"changing-the-navbar-colour",children:"Changing the Navbar colour"}),"\n",(0,s.jsx)(n.p,{children:"Now we get into the CSS goodness."}),"\n",(0,s.jsx)(n.h3,{id:"create-a-css-file",children:"Create a CSS file"}),"\n",(0,s.jsxs)(n.p,{children:["First we need to ",(0,s.jsx)(n.a,{href:"00-10#creating-custom-styles",children:"add a new CSS file in 'Static Files'"}),".  Let's call the file\n",(0,s.jsx)(n.code,{children:"styles.css"}),".  We can't create an empty file in Docassemble so just add this line to the file and then\nsave it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",metastring:'showLineNumbers title="styles.css"',children:"/* Style file */\n"})}),"\n",(0,s.jsxs)(n.p,{children:["That single line is a ",(0,s.jsx)(r.DisplayGlossaryItem,{item:"comment"}),".  CSS comments start with ",(0,s.jsx)(n.code,{children:"/*"})," and end with ",(0,s.jsx)(n.code,{children:"*/"}),".\nDocassemble will ignore anything that's between these ",(0,s.jsx)(n.code,{children:"/*"})," and ",(0,s.jsx)(n.code,{children:"*/"})," delimiters, so we can put informative\ncomments in there as we go.  Or, in this case, a placeholder."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["As we work through this exercise we won't be adding comments as we go.  However, the final version\nof ",(0,s.jsx)(n.code,{children:"styles.css"})," as well as the app itself are heavily commented.  You are encouraged to read through\nthose comments."]})}),"\n",(0,s.jsx)(n.h3,{id:"point-the-app-to-the-css-file",children:"Point the app to the CSS file"}),"\n",(0,s.jsxs)(n.p,{children:["Even though we've created the CSS file our app doesn't yet know that it's there or that it should use it.\nTo rectify this we need to add CSS as a ",(0,s.jsx)(n.a,{href:"https://docassemble.org/docs/initial.html#javascript",children:"feature"}),"\nto our app.  We do this by inserting the following block.  Insert this block after the two blocks we added\nfor the logo."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"---\nfeatures:\n  css: styles.css\n---\n"})}),"\n",(0,s.jsx)(n.h3,{id:"how-we-describe-colours-in-code",children:"How we describe colours in code"}),"\n",(0,s.jsx)(n.p,{children:"Before we move forwards it would be good to know how to describe colours in code.  We want to render two\nparticular colours, a deep shade of blue which is used in the Flinders Logo and also the yellow that is used\nin the Flinders logo."}),"\n",(0,s.jsxs)(n.p,{children:["In CSS, and in almost all coding languages, colours are described using what's called an ",(0,s.jsx)(n.strong,{children:"RGB Value"}),".  'RGB'\nstands for Red, Green and Blue.  An RGB value tells the computer how much of red, green and blue should be mixed\ntogether to make any particular colour.  This is a similar principle to mixing colours in art but the results\nare a little different.  For example, mixing red and blue will yield purple but mixing red and green makes yellow!"]}),"\n",(0,s.jsx)(n.p,{children:"The intensity of each of red, green and blue is indicated by a number.  Zero (0) indicates none of that colour is\nto be used, while 255 indicates the highest intensity for that colour."}),"\n",(0,s.jsxs)(n.p,{children:["When expressing a colour as RGB values we always quote all three values.  So, for example, the RGB value for\nyellow is ",(0,s.jsx)(n.code,{children:"rgb(255,255,0)"}),".  That is, we're using the maximum intensity for red and green and we are not using\nany blue at all.  It follows then that ",(0,s.jsx)(n.code,{children:"rgb(255,0,0)"})," is red, ",(0,s.jsx)(n.code,{children:"rgb(0,255,0)"})," is green and ",(0,s.jsx)(n.code,{children:"rgb(0,0,255)"})," is blue.\nWhen it comes to shades, ",(0,s.jsx)(n.code,{children:"rgb(0,0,0)"})," is black (ie: the absence of any colour) and ",(0,s.jsx)(n.code,{children:"rgb(255,255,255)"})," is white.\nThere are also another 254 shades of grey ranging from ",(0,s.jsx)(n.code,{children:"rgb(1,1,1)"})," to ",(0,s.jsx)(n.code,{children:"rgb(254,254,254)"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"You may not expect it to be so, but using RGB values allows us to express over 16 million colours.  Every computer\nand electronic device that you have likely ever used and are currently using displays colours as RGB values."}),"\n",(0,s.jsx)(n.h3,{id:"defining-flinders-blue",children:"Defining Flinders Blue"}),"\n",(0,s.jsx)(n.p,{children:"For the purposes of this textbook Flinders blue is the blue used in the Flinders logo.  Its RGB value is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"rgb(34,45,75)\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can see from the low numbers that it is a dark colour, and you can also see the bias towards blue as the\nblue value is higher than the others."}),"\n",(0,s.jsx)(n.h3,{id:"declaring-the-colour-in-css",children:"Declaring the colour in CSS"}),"\n",(0,s.jsx)(n.p,{children:"Now that we know the value for Flinders blue we can use it in our CSS file.  Because we will be using this\ncolour in quite a few places it is best for us to declare it as a variable.  Doing so means that, should\nwe ever need to change the colour in future we need only change the variable declaration and the rest of the\nCSS file will pick it up automatically."}),"\n",(0,s.jsx)(n.p,{children:"So, let's declare our Flinders blue colour by removing that placeolder line and replacing it with this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",metastring:"showLineNumbers",children:":root {\n    --flinders-blue: rgb(34,45,75);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The class ",(0,s.jsx)(n.code,{children:":root"})," is a special CSS class.  For our purposes all we need to know is that we declare all our\nvariables in ",(0,s.jsx)(n.code,{children:":root"}),".  Note also that ",(0,s.jsx)(n.code,{children:":root"})," starts with a colon (",(0,s.jsx)(n.code,{children:":"}),"). This is also important."]}),"\n",(0,s.jsxs)(n.admonition,{title:"A Note on CSS Syntax",type:"note",children:[(0,s.jsx)(n.p,{children:"We won't go into CSS syntax in too much detail in this textbook.  We just want to get you to the point where\nyou can make CSS changes to your app.  That said, there are a few things to bear in mind."}),(0,s.jsxs)(n.p,{children:["First, every CSS ",(0,s.jsx)(n.strong,{children:"class"})," is declared in the format"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"class_name {\n    stuff goes here\n}\n"})}),(0,s.jsx)(n.p,{children:"That is, the class name and then what comprises the class is enclosed in braces.  Note this is different\nto Docassemble and Python where we use indentation.  In CSS indentation isn't important.  This line\ncould also be valid CSS:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:":root { --flinders-blue: rgb(34,45,75); }\n"})}),(0,s.jsxs)(n.p,{children:["Secondly, the body of a class is made of a specifier (or 'property') (",(0,s.jsx)(n.code,{children:"--flinders-blue"})," in our case) and its value.  The\nproperty must be followed immediately by a colon (",(0,s.jsx)(n.code,{children:":"}),"), and the value must be followed by a semicolon (",(0,s.jsx)(n.code,{children:";"}),").  It\nis a common mistake for students to forget the colon and/or semicolon or to mix them up.  Be aware of this."]})]}),"\n",(0,s.jsx)(n.h3,{id:"changing-the-navbar-colour-1",children:"Changing the Navbar colour"}),"\n",(0,s.jsxs)(n.p,{children:["Now we are ready to change the colour of the Navbar.  As we saw ",(0,s.jsx)(n.a,{href:"00-10#finding-the-components",children:"previously"}),",\nthe Navbar is identified by the ",(0,s.jsx)(n.code,{children:"navbar"})," CSS class.  Consequently, for us to change the colour of the\nnavbar we need to modify this class with our new colour, or specifically, our new background colour."]}),"\n",(0,s.jsxs)(n.p,{children:["Modifying a class in CSS is simple.  We simply declare a class with the same name (ie: ",(0,s.jsx)(n.code,{children:"navbar"}),") and put\nwhat we want into it.  The 'Cascading' part of CSS will ensure that the default ",(0,s.jsx)(n.code,{children:"navbar"})," class is read first\nand then our ",(0,s.jsx)(n.code,{children:"navbar"})," class is read.  Our changes will overwrite the default class.  That's handy as, seeing\nas we only want to change the background colour, that's the only property we need to add to our ",(0,s.jsx)(n.code,{children:"navbar"})," class."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["CSS classes are declared with a leading full-stop (",(0,s.jsx)(n.code,{children:"."}),") in a CSS file.  Therefore, to declare our custom\n",(0,s.jsx)(n.code,{children:"navbar"})," class, we actually need to declare a class called ",(0,s.jsx)(n.code,{children:".navbar"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["So, below our ",(0,s.jsx)(n.code,{children:":root"})," class let's add this to define our ",(0,s.jsx)(n.code,{children:"navbar"})," class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".navbar {\n    background-color: var(--flinders-blue) !important;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We have defined our ",(0,s.jsx)(n.code,{children:"navbar"})," class.  In it we include a single property,\n",(0,s.jsx)(n.a,{href:"https://www.w3schools.com/cssref/pr_background-color.php",children:(0,s.jsx)(n.code,{children:"background-color"})}),". The value of ",(0,s.jsx)(n.code,{children:"background-color"}),"\nis to be set to the variable ",(0,s.jsx)(n.code,{children:"--flinders-blue"})," which we declared in ",(0,s.jsx)(n.code,{children:":root"})," earlier."]}),"\n",(0,s.jsxs)(n.p,{children:["Finally, we've added an ",(0,s.jsx)(n.code,{children:"!important"})," to our property. This ",(0,s.jsx)(n.a,{href:"https://www.w3schools.com/css/css_important.asp",children:(0,s.jsx)(n.code,{children:"!important"})}),"\nspecifier forces our app to read\nour background colour over any others that may be set after our CSS file is read.  It is not usually good practice\nto use ",(0,s.jsx)(n.code,{children:"!important"})," specifiers. For the purposes of this textbook we ask students to accept that ",(0,s.jsx)(n.code,{children:"!important"}),"\nmust be used in our ",(0,s.jsx)(n.code,{children:"navbar"})," class and it will not be used anywhere else."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"We use the American spelling for 'color'!  This is part of the CSS specification."})}),"\n",(0,s.jsxs)(n.p,{children:["Our ",(0,s.jsx)(n.code,{children:"styles.css"})," file should now look like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",metastring:"showLineNumbers",children:":root {\n  --fliders-blue: rgb(34,45,75);\n}\n\n.navbar {\n  background-color: var(--flinders-blue) !important;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"The code for our app should look like this:"}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.p,{children:"Code for our app"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nmetadata:\n  title: |\n    Look and Feel Demonstrator\n  short title: |\n    Style Demonstrator\n  show login: True\n---\nobjects:\n  - MJFlogo: DAStaticFile.using(filename='flinders_logo.png')\n---\nmandatory: True\ncode: |\n  set_parts(logo='<img src=\"' + MJFlogo.url_for() + '\" style=\"height: 50px;\">')\n---\nfeatures:\n  css: styles.css\n---\nmandatory: True\nquestion: Look and Feel Demonstrator\nsubquestion: |\n  This version of our demonstrator has no styling.  It looks neat enough but it has all the\n  default style elements, such as the black navbar, no logo, standard colours for buttons\n  and so-on.\n\n  What we'd like to do is to 'theme' our app so that it looks a bit nicer or, more importantly\n  for clients, matches the look and feel of their website and their corporate style guide.\n\n  We will do this using HTML and CSS, as we shall see.\nbuttons:\n  - Exit: exit\n  - Restart: restart\n  - Continue: continue\n---\n"})})]}),"\n",(0,s.jsx)(n.p,{children:"Our app should now look like this.  Note the colour of the navbar."}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/makingchanges2.png"}),"\n",(0,s.jsx)(n.h2,{id:"change-the-colour-of-the-right-side-menu",children:"Change the colour of the right-side menu"}),"\n",(0,s.jsxs)(n.p,{children:["The contrast between our new background colour and our grey menu\nbar (that displays ",(0,s.jsx)(n.code,{children:"mark.ferraretto@flinders.edu.au"})," in our image above) is not so great.  We want the menu\nbar to stand out and, in fact, we want to use the University's corporate colours, so Flinders yellow is a\ngood way to go."]}),"\n",(0,s.jsx)(n.h3,{id:"define-the-colour",children:"Define the colour"}),"\n",(0,s.jsxs)(n.p,{children:["First, we need to define the colour.  Minutes of extensive research by your authors has yielded that the\nRGB value for Flinders yellow is ",(0,s.jsx)(n.code,{children:"rgb(252,212,6)"}),".  Consequently, we need to declare this as a variable by\nadding a definition for ",(0,s.jsx)(n.code,{children:"--flinders-yellow"})," to our ",(0,s.jsx)(n.code,{children:":root"})," class, like so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:":root {\n    --flinders-blue: rgb(34,45,75);\n    --flinders-yellow: rgb(252,212,6);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"identify-the-component",children:"Identify the component"}),"\n",(0,s.jsx)(n.p,{children:"Next we need to identify the component.  We can do this by running our app in our browser and using the browser's\nDeveloper Tools."}),"\n",(0,s.jsx)(n.p,{children:"Once we have the developer tools running we use element picker to click on our menu.  The element picker is\nusually on the top left of the developer tools, like so in Firefox:"}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/elementpicker1.png"}),"\n",(0,s.jsx)(n.p,{children:"and like so in Chrome:"}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/elementpicker2.png"}),"\n",(0,s.jsxs)(n.p,{children:["Click on the element picker and then hover the mouse over the menu.  When we do so, we see the corresponding\ncode higlighted in the Developer Tools.  We also see that the menu bar's class is called ",(0,s.jsx)(n.code,{children:"nav-link"})]}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/elementpicker3.png",caption:"Hard to see, but true!"}),"\n",(0,s.jsx)(n.h3,{id:"update-the-styles",children:"Update the styles"}),"\n",(0,s.jsxs)(n.p,{children:["So, we need to create a new ",(0,s.jsx)(n.code,{children:"nav-link"})," class. Because ",(0,s.jsx)(n.code,{children:"nav-link"})," seems a rather generic term, we want our class\nonly to be used when we're accessing a ",(0,s.jsx)(n.code,{children:"nav-link"})," in the navbar.  Once again, the 'Cascading' part of CSS\ncomes into play.  We can limit our ",(0,s.jsx)(n.code,{children:"nav-link"})," class to only ",(0,s.jsx)(n.code,{children:"nav-link"}),"s in the ",(0,s.jsx)(n.code,{children:"navbar"})," by adding the following\nto our ",(0,s.jsx)(n.code,{children:"styles.css"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".navbar .nav-link {\n    color: var(--flinders-yellow);\n    font-weight: bolder;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We have already learnt that the ",(0,s.jsx)(n.code,{children:"background-color"})," set the background colour.  The ",(0,s.jsx)(n.code,{children:"color"})," property sets\nthe foreground colour.  As we have a text menu, this means the text colour.  We are also going to make the\nfont a little bolder to increase the contrast between our Flinders blue background and the yellow menu."]}),"\n",(0,s.jsxs)(n.p,{children:["We don't need to make any changes to our app's code as it's already configured to read in any changes we make\nto ",(0,s.jsx)(n.code,{children:"styles.css"}),".  So, if we run the app we should now get something like this:"]}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/makingchanges3.png"}),"\n",(0,s.jsx)(n.h2,{id:"make-the-menu-bar-transparent",children:"Make the menu bar transparent"}),"\n",(0,s.jsxs)(n.p,{children:["If you run the app as it is now and click on the menu bar you'll the see menu bar itself still  appears black\nwith grey text.  We want the menu bar to appear in Flinders Yellow, like our ",(0,s.jsx)(n.code,{children:"nav-link"})," that we set up before.\nHowever, want to do a few extra things:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"the menu bar should be transparent.  When a user clicks on it they should see a bit of the\nunderlying colours."}),"\n",(0,s.jsx)(n.li,{children:"when we hover over an item in the menu bar that item should be highlighted; and"}),"\n",(0,s.jsx)(n.li,{children:"the colour of the text in the menu bar items should be readable. The existing grey may not work so well."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"about-transparency",children:"About transparency"}),"\n",(0,s.jsxs)(n.p,{children:["Transparency is called ",(0,s.jsx)(n.strong,{children:"alpha"})," in the coding world.  A colour can be assigned an 'alpha' value to indicate\nhow transparent or opaque it should be.  An 'alphra' of 0 would make the colour invisible.  An alpha of 1 would\nmake the colour entirely opaque (ie: not transparent at all)."]}),"\n",(0,s.jsxs)(n.p,{children:["We can assign transparency to a colour using ",(0,s.jsx)(n.code,{children:"rgba()"}),".  This works just like ",(0,s.jsx)(n.code,{children:"rgb()"})," which we have used to\ndescribe colours but adds a fourth number, the alpha, for transparency.  So, for example, a flinders yellow\nthat had a 30% alpha would be defined as so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"rgba(252,212,6,0.3)\n"})}),"\n",(0,s.jsx)(n.p,{children:"From CSS' point of view, RGB and RGBA are just colours.  We can define them use them identically."}),"\n",(0,s.jsx)(n.h3,{id:"defining-the-transparent-colours",children:"Defining the transparent colours"}),"\n",(0,s.jsx)(n.p,{children:"It follows that all we need to do is to add yet another colour to our root and have that colour be our\ntransparent yellow for the menu bar.  We actually need two colours - one for the menu bar and one for the\nhighlighted menu bar item.  We'll use Flinders yellow for both but we'll use a slightly more opaque yellow\nfor the highlighted menu bar."}),"\n",(0,s.jsxs)(n.p,{children:["Add these two colours to the ",(0,s.jsx)(n.code,{children:":root"})," class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"--flinders-yellow-30: rgba(252,212,6,0.3);\n--flinders-yellow-50: rgba(252,212,6,0.5); \n"})}),"\n",(0,s.jsx)(n.h3,{id:"identify-the-components",children:"Identify the components"}),"\n",(0,s.jsx)(n.p,{children:"Developer Tools are our friend again.  Let's run the app and then start the Developer Tools."}),"\n",(0,s.jsxs)(n.p,{children:["Now click on the menu so the menu bar appears.  ",(0,s.jsx)(n.em,{children:"Then"})," use the element picker to click on an item in the\nmenu bar:"]}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/elementpicker4.png"}),"\n",(0,s.jsxs)(n.p,{children:["Once again, we can see that by hovering over a menu item, we've identified that its class is ",(0,s.jsx)(n.code,{children:"dropdown-item"}),".\nIn the developer tools we can see the list of menu items/",(0,s.jsx)(n.code,{children:"dropdown-item"}),"s and, casting our eyes up a bit,\nwe can see that the class for the menu bar itself is called, rather logically, ",(0,s.jsx)(n.code,{children:"dropdown-menu"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"These are the two components we need to modify."}),"\n",(0,s.jsx)(n.h3,{id:"update-the-styles-1",children:"Update the styles"}),"\n",(0,s.jsxs)(n.p,{children:["Once again, we need to create two new classes, one each for ",(0,s.jsx)(n.code,{children:"dropdown-item"})," and ",(0,s.jsx)(n.code,{children:"dropdown-menu"}),".  Again, we will\nlimit the scope of our new styles to children of the ",(0,s.jsx)(n.code,{children:"navbar"})," class."]}),"\n",(0,s.jsxs)(n.p,{children:["Add the following to ",(0,s.jsx)(n.code,{children:"styles.css"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".navbar .dropdown-menu{\n    background-color: var(--flinders-yellow-30);\n}\n.navbar .dropdown-item {\n    color: var(--flinders-blue);\n}\n.navbar .dropdown-item:hover{\n    background-color: var(--flinders-yellow-50);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Firstly we've set the background colour of ",(0,s.jsx)(n.code,{children:"dropdown-menu"})," to be the more transparent Flinders yellow."]}),"\n",(0,s.jsx)(n.p,{children:"Secondly, we have updated the text colour of the menu items to be Flinders blue.  This should make the text\nmore readable than the default grey."}),"\n",(0,s.jsxs)(n.p,{children:["Finally we've introduced a new style called ",(0,s.jsx)(n.code,{children:".dropdown-item:hover"}),".  Adding ",(0,s.jsx)(n.code,{children:":hover"})," to the name of any style\nmeans that style will be used when the mouse hovers over any element with that style.  Whenw we hover over\na menu bar item we want that item to be 'highlighted' by, in this case, setting the background colour to\na more opaque version of Flinders yellow."]}),"\n",(0,s.jsx)(n.p,{children:"Your CSS file should now look like this:"}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:["Updated ",(0,s.jsx)(n.code,{children:"styles.css"})]})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",metastring:"showLineNumbers",children:":root {\n  --flinders-blue: rgb(34,45,75);\n  --flinders-yellow: rgb(252,212,6);\n  --flinders-yellow-30: rgba(252,212,6,0.3);\n  --flinders-yellow-50: rgba(252,212,6,0.5);\n\n}\n\n.navbar {\n  background-color: var(--flinders-blue) !important;\n}\n\n.navbar .nav-link {\n  color: var(--flinders-yellow);\n  font-weight: bolder;\n}\n\n.navbar .dropdown-menu{\n    background-color: var(--flinders-yellow-30);\n}\n.navbar .dropdown-item {\n    color: var(--flinders-blue);\n}\n.navbar .dropdown-item:hover{\n    background-color: var(--flinders-yellow-50);\n}\n"})})]}),"\n",(0,s.jsx)(n.p,{children:"The menu bar in your app should now be a lovely transparent Flinders yellow."}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/makingchanges4.png"}),"\n",(0,s.jsx)(n.h2,{id:"add-styled-text",children:"Add styled text"}),"\n",(0,s.jsxs)(n.p,{children:["We've seen how styles in a CSS style sheet can modify existing elements in a web app.  CSS can do much more than\nthis.  Almost every every website on the intenet uses CSS to control its style, look and feel.  CSS can do everything\nfrom changing colours and fonts to creating 3D shadows, animations and floating content.  Exploring CSS in detail\nis way beyond the scope of this textbook, but there are ",(0,s.jsx)(n.a,{href:"https://www.w3schools.com/css/css_intro.asp",children:"lots"})," of\n",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS",children:"useful"})," ",(0,s.jsx)(n.a,{href:"https://www.w3.org/Style/CSS/learning",children:"resources"}),"\n",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics",children:"online"})," should you want\nto explore CSS further."]}),"\n",(0,s.jsx)(n.p,{children:"With that said, our next task is to this (rather ugly) text box to our app.  (Unfortunately, your authors\nare neither artists nor web designers)"}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/makingchanges5.png"}),"\n",(0,s.jsxs)(n.p,{children:["If you look at the screenshot ",(0,s.jsx)(n.a,{href:"00-10",children:"at the beginning of this chapter"})," you will also see we've changed\nthe text in the app.  Let's do this part as it's easy.  Let's replace the text in our app so it reads as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nmetadata:\n  title: |\n    Look and Feel Demonstrator\n  short title: |\n    Style Demonstrator\n  show login: True\n---\nobjects:\n  - MJFlogo: DAStaticFile.using(filename='flinders_logo.png')\n---\nmandatory: True\ncode: |\n  set_parts(logo='<img src=\"' + MJFlogo.url_for() + '\" style=\"height: 50px;\">')\n---\nfeatures:\n  css: styles.css\n---\nmandatory: True\nquestion: Look and Feel Demonstrator\nsubquestion: |\n  This question block demonstrates how to perform basic customisations to the look and feel\n  of your app.  Most of the customisation is done using **Cascading Stylesheets**, or [CSS](https://www.w3schools.com/Css/).\n  CSS is the standard way of customising the look and feel of webapps.  Have a look at\n  the CSS file in the `static` forlder for this app to see more information about how we've used\n  CSS to customise this app.\n\n  You can also use [HTML](https://www.w3schools.com/html/) together CSS to improve the display\n  of your app.  In many cases HTML can be\n  mixed with markdown.  You can use CSS to control how your raw HTML looks.  For example, the `div`\n  block below is linked to a CSS style called `MJFbox`.  If you find `MJFbox` in the CSS\n  file you will see the commands that set the border, text colour and font style.\nbuttons: \n  - Exit: exit\n  - Restart: restart\n  - Continue: continue\n---\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now we're ready to add our styled text.  Doing so requires us to do two things.  First, we need to create\nthe text, and second, we need to create the styles used to display the text."}),"\n",(0,s.jsx)(n.h3,{id:"adding-the-text",children:"Adding the text"}),"\n",(0,s.jsxs)(n.p,{children:["We will do this in two parts.  First, we will add the text we want.  Second, we will modify the text so that\nit can be displayed as we wish.  As we'll see, by modifying the text, and specifically by placing it inside a\n",(0,s.jsx)(n.code,{children:"<div>"}),", we will lose the ability to use Markdown.  But let's start out with just our regular markdown text\nfor now and we'll modify it as we go."]}),"\n",(0,s.jsxs)(n.p,{children:["Add these two paragraphs to the end of the ",(0,s.jsx)(r.DisplayGlossaryItem,{item:"subquestionblock"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"  This text appears in a `div` block and is formatted according to\n  the `MJFbox` style.\n  \n  **Note:** It's not always possible to use Markdown in `div`\n  blocks.  In this block we've formatted our text using HTML.  Check out the source code to see\n  which HTML tags we have used.\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you save and run the app you should see this:"}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/makingchanges6.png"}),"\n",(0,s.jsx)(n.p,{children:"Nothing special so far."}),"\n",(0,s.jsxs)(n.h3,{id:"enclosing-the-text-in-a-div",children:["Enclosing the text in a ",(0,s.jsx)(n.code,{children:"<div>"})]}),"\n",(0,s.jsxs)(n.p,{children:["We need a way to tell our web app that this text is to be displayed using a particular style.  That is, we need\nto separate out this text.  To paraphrase ",(0,s.jsx)(n.a,{href:"https://www.youtube.com/watch?v=HyTpu6BmE88",children:"Dionne Warwick"}),", that's\nwhat ",(0,s.jsx)(n.code,{children:"div"}),"s are for."]}),"\n",(0,s.jsxs)(n.p,{children:["Encapsulating our text in a ",(0,s.jsx)(n.code,{children:"<div>"})," indicates to our browser that our text is separate from the rest of the text\nin our app.  We will then be able to attach a style to the ",(0,s.jsx)(n.code,{children:"<div>"})," using a ",(0,s.jsx)(n.code,{children:"class"})," specifier."]}),"\n",(0,s.jsxs)(n.p,{children:["So, let's wrap our text in a ",(0,s.jsx)(n.code,{children:"<div>"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:"{1,8}",children:"  <div>\n  This text appears in a `div` block and is formatted according to\n  the `MJFbox` style.\n  \n  **Note:** It's not always possible to use Markdown in `div`\n  blocks.  In this block we've formatted our text using HTML.  Check out the source code to see\n  which HTML tags we have used.\n  </div>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If we do a ",(0,s.jsx)(r.DisplayDAButtons,{button:a.Kn})," we'll see our text formatting for\nthose last two paragraphs has gone away."]}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/makingchanges7.png"}),"\n",(0,s.jsxs)(n.p,{children:["That's because we can't use Markdown formatting inside a ",(0,s.jsx)(n.code,{children:"<div>"}),".  Instead we need to use HTML formatting.\nHTML is a text markup language, like Markdown.  HTML and CSS are the two technologies that drive the\ndisplay of web pages.  In fact, Docassemble converts our Markdown to HTML so that it can be displayed on\nour app."]}),"\n",(0,s.jsxs)(n.p,{children:["Again, a full explanation of HTML is way beyond the scope of this textbook but there are\n",(0,s.jsx)(n.a,{href:"https://www.w3schools.com/html/",children:"many"})," ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics",children:"resources"}),"\n",(0,s.jsx)(n.a,{href:"https://www.codecademy.com/learn/learn-html",children:"online"})," should you wish to explore HTML further."]}),"\n",(0,s.jsx)(n.p,{children:"For our purposes we just need to know this:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["paragraphs in HTML must be enclosed inside ",(0,s.jsx)(n.code,{children:"<p>"})," and ",(0,s.jsx)(n.code,{children:"</p>"})," tags;"]}),"\n",(0,s.jsxs)(n.li,{children:["fixed-width text (eg: ",(0,s.jsx)(n.code,{children:"this"}),") must be enclosed in ",(0,s.jsx)(n.code,{children:"<code>"})," and ",(0,s.jsx)(n.code,{children:"</code>"})," tags;"]}),"\n",(0,s.jsxs)(n.li,{children:["text can be enclosed in ",(0,s.jsx)(n.code,{children:"<span></span>"})," tags if we want to make further adjustments to styles"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This said, let's adjust our text to add two paragraph markers and correctly format the fixed-width text:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'  <div class="MJFbox">\n  <p>This text appears in a <code>div</code> block and is formatted according to\n  the <code>MJFbox</code> style.</p>\n  \n  <p><span class="MJFbolder">Note:</span> It\'s not always possible to use Markdown in <code>div</code>\n  blocks.  In this block we\'ve formatted our text using HTML.  Check out the source code to see\n  which HTML tags we have used.</p>\n  </div>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Our two paragraphs look better now:"}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/makingchanges8.png"}),"\n",(0,s.jsx)(n.p,{children:"Now it's time to style it up"}),"\n",(0,s.jsx)(n.h3,{id:"updating-the-styles",children:"Updating the styles"}),"\n",(0,s.jsxs)(n.p,{children:["Our text and its ",(0,s.jsx)(n.code,{children:"<div>"})," has nothing to do Bootstrap.  That means we don't need to go searching for component\nnames.  Instead we'll define our own style name.  Those of you who have read the text more closely will have\nworked out that we're going to call that style ",(0,s.jsx)(n.code,{children:"MJFbox"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Let's create the style and then we'll discuss its properties.  Add this to ",(0,s.jsx)(n.code,{children:"styles.css"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",metastring:'title="MJFbox style" showLineNumbers',children:".MJFbox {\n  border: 2px solid var(--flinders-blue);\n  border-radius: 10px;\n  box-shadow: 0px 2px 5px rgba(0,0,0,0.25); \n  margin: 10px;\n  padding: 8px;\n  color: rgb(255,0,0);\n  font-size: 1.2em;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Line 2 tells our ",(0,s.jsx)(n.code,{children:"<div>"})," that it is going to be enclosed by a border.  That border will be two pixels wide,\nwill be a solid line and the colour of the border will be Flinders blue."]}),"\n",(0,s.jsx)(n.p,{children:"Line 3 makes the corners of our border rounded.  Our 'radius' is 10 pixels.  The more pixels, the more rounded\nthe corners will be."}),"\n",(0,s.jsx)(n.p,{children:"Line 4 defines a shadow.  Our shadow will be a transparent black (like a real shadow) and will be offset two\npixels down and five pixels to the right of the border."}),"\n",(0,s.jsxs)(n.p,{children:["Line 5 puts a bit of padding ",(0,s.jsx)(n.em,{children:"outside"})," our ",(0,s.jsx)(n.code,{children:"<div>"}),".  You can see that our ",(0,s.jsx)(n.code,{children:"<div>"})," appears offset to the right\nof the text and also that there's a gap between the bottom border and the buttons below it.  This gap is what is\nset by the ",(0,s.jsx)(n.code,{children:"margin"})," property."]}),"\n",(0,s.jsxs)(n.p,{children:["Line 6 puts padding ",(0,s.jsx)(n.em,{children:"inside"})," our ",(0,s.jsx)(n.code,{children:"<div>"}),".  Without it our text would but up against the box border and look\nugly (defeating the purpose of this chapter)."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Both ",(0,s.jsxs)(n.a,{href:"https://www.w3schools.com/Css/css_margin.asp",children:["the ",(0,s.jsx)(n.code,{children:"margin"})," property"]}),"\nand ",(0,s.jsxs)(n.a,{href:"https://www.w3schools.com/csS/css_padding.asp",children:["the ",(0,s.jsx)(n.code,{children:"padding"})," property"]})," have more fine-grained versions\nof themselves.  For example, to adjust just the left\npadding for the text we could have used ",(0,s.jsx)(n.code,{children:"padding-left"})," instead of padding."]})}),"\n",(0,s.jsx)(n.p,{children:"Line 7 sets the colour of our text to a rather bright, garish red."}),"\n",(0,s.jsx)(n.p,{children:"Finally, line 8 increases the font size by 20% over the regular font size used in the app."}),"\n",(0,s.jsxs)(n.p,{children:["Now, let's add the ",(0,s.jsx)(n.code,{children:"MJFbolder"})," style.  Add this to thet end of ",(0,s.jsx)(n.code,{children:"styles.css"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",metastring:"showLineNumbers",children:".MJFbox .MJFbolder {\n    font-weight: bolder;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"We limit the use of MJFbolder only to insie MJFbox.  It's good practice to limit the operation of your styles\nas much as possible so as to prevent unpredictable outcomes."}),"\n",(0,s.jsx)(n.p,{children:"This is a simple style with only one property which sets the font to bolder."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["For more information on making fonts bold see ",(0,s.jsx)(n.a,{href:"https://www.w3schools.com/cssref/pr_font_weight.php",children:"this page"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["Once we have saved ",(0,s.jsx)(n.code,{children:"styles.css"})," we can re-run our app.  Our text should now appear in our box, in red and\nin a larger font:"]}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/makingchanges9.png"}),"\n",(0,s.jsxs)(n.p,{children:["All we have left to do now is to update our ",(0,s.jsx)(r.DisplayDAButtons,{button:a.IY})," button."]}),"\n",(0,s.jsx)(n.h2,{id:"change-the-continue-button",children:"Change the Continue Button"}),"\n",(0,s.jsx)(n.p,{children:"As per our original requriements we need to do two things: 1) Change the colour of the button to Flidners blue;\nand 2) Make the button light blue when we hover over it."}),"\n",(0,s.jsx)(n.h3,{id:"define-the-colours",children:"Define the colours."}),"\n",(0,s.jsxs)(n.p,{children:["We have already defined our Flinders blue colour.  We need to define the hover colour.  Add this to the\n",(0,s.jsx)(n.code,{children:":root"})," class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"  --continue-button-hover: rgba(151,201,255,0.3);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"identify-the-component-1",children:"Identify the component"}),"\n",(0,s.jsxs)(n.p,{children:["Once again the use of Developer Tools is integral to the process.  Lauch the app and Developer Tools and use\nthe element picker to hover over the ",(0,s.jsx)(r.DisplayDAButtons,{button:a.IY})," button.  You\nwill see that its component name is ",(0,s.jsx)(n.code,{children:"btn-primary"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"This final time we leave the exercise of launching the app, launching Developer Tools and using the element\npicker to find the button's component name as an exercise for the reader."})}),"\n",(0,s.jsx)(n.h3,{id:"update-the-styles-2",children:"Update the styles"}),"\n",(0,s.jsxs)(n.p,{children:["Now we know the component name we can create a style for it.  Add these two styles to ",(0,s.jsx)(n.code,{children:"styles.css"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",metastring:"showLineNumbers",children:".btn-primary{\n  color: white;\n  background-color: var(--flinders-blue);\n  border-color: black;\n}\n\n.btn-primary:hover{\n  color: black;\n  background-color: var(--continue-button-hover);\n  border-color: black;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Line 2 of ",(0,s.jsx)(n.code,{children:"btn-primary"})," sets the text of the button to be white and line 3 sets the background colour to our\nFlinders blue. Finally, line 4 puts a fine black border around the button.  As no border width is specified a\nwidth of 1 pixel is used."]}),"\n",(0,s.jsxs)(n.p,{children:["Line 2 of ",(0,s.jsx)(n.code,{children:"btn-primary:hover"})," changes the text colour to black. This is necessary as the hover colour is a light\ncolour and white text would not be readable.  Line 3 sents our background colour to black and we retain the fine\nblack border in line 4."]}),"\n",(0,s.jsx)(n.p,{children:"Save the file and re-run the app.  We now have all our styling components in place."}),"\n",(0,s.jsx)(r.DisplayImage,{imageURL:"/img/textbook/chapter_07/makingchangesa.png"})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},3199:(e,n,t)=>{t.d(n,{Ay:()=>d,RM:()=>a});var o=t(4848),s=t(8453),i=t(2487),r=t(5901);const a=[];function l(e){const n={li:"li",ol:"ol",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"insert the Flinders University logo into the navbar;"}),"\n",(0,o.jsx)(n.li,{children:"change the navbar colour from the default black to 'Flinders blue';"}),"\n",(0,o.jsx)(n.li,{children:"change the colour of the menu items in the navbar to 'Flinders yellow';"}),"\n",(0,o.jsx)(n.li,{children:"make the right-side drop-down menu Flinders yellow and transparent;"}),"\n",(0,o.jsxs)(n.li,{children:["style some text so that it is:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"enclosed in a box with a Flinders blue border and rounded edges;"}),"\n",(0,o.jsx)(n.li,{children:"the box has a shadow behind it;"}),"\n",(0,o.jsx)(n.li,{children:"The text inside the box is displayed in red;"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["finally, the ",(0,o.jsx)(i.DisplayDAButtons,{button:r.IY})," button's\ncolour is changed to Flinders blue; and"]}),"\n",(0,o.jsx)(n.li,{children:"when the user hovers over the Continue button, its colour changes to a light blue."}),"\n"]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1295:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/files/flinders_logo-a99fd10a2b1e1919e070a50be33180ea.png"}}]);