"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[777],{2677:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>x,contentTitle:()=>u,default:()=>j,frontMatter:()=>p,metadata:()=>m,toc:()=>f});var s=n(4848),o=n(8453),i=n(2487);function r(e){const t={mermaid:"mermaid",...(0,o.R)(),...e.components};return(0,s.jsx)(t.mermaid,{value:"flowchart TD\n    id7{{What is your complaint related to?}}\n    id7 -- Housing<br>dispute --\x3e id8(Refer to SACAT)\n    id7 -- Medical and<br>Mental Health --\x3e id8\n    id7 -- Review of<br>Government<br>decisions --\x3e id8\n    id7 -- Workplace<br>discrimination --\x3e id9(SAET)\n    id7 -- Health, safety<br>and workplace<br>relations --\x3e id10(SafeworkSA)\n    id7 -- Consumer<br>rights --\x3e id11(Consumer and<br>Business Services)\n    id7 -- Employment --\x3e id12(Fair Work<br>ombudsman)\n    id7 -- Other --\x3e id13(Contact EOC<br>for more help)\n\n\n    %% Define styles for flowchart items.  We want to make comments yellow\n    %% and have a larger font size for regular items\n    classDef commentClass fill:#faffd6,text-align:left\n    classDef questionClass fill:#ffe6bc\n    classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n    classDef itemClass font-size:16pt\n    classDef leftListClass text-align:left\n\n    class id0,id2,id3,id4,id7 questionClass;\n    class co0,co1,co2 commentClass;\n    class id1,id5,id6 boundaryClass;"})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}function a(e){const t={a:"a",code:"code",li:"li",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Most of ",(0,s.jsx)(i.DisplayChapter,{chapter:"chapter_04"})," and specifically ",(0,s.jsx)(t.code,{children:"if/elif/else"})," statements"]}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/docs/recipes/templates",children:"Templates"})}),"\n",(0,s.jsxs)(t.li,{children:["Most of ",(0,s.jsx)(i.DisplayChapter,{chapter:"chapter_03",pinpoint:"00-30#logic-tests",text:"Logic tests"})]}),"\n"]})}const c=(0,s.jsx)((function(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}),{});function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Finally, we'll build out the ",(0,s.jsx)(t.code,{children:"exit_other"})," screen.  We'll use a single\nscreen but we'll populate it with templates depending on how the user\nanswers the complaints question."]}),"\n",(0,s.jsx)(l,{}),"\n",(0,s.jsx)(t.h3,{id:"set-up-templates",children:"Set up templates."}),"\n",(0,s.jsxs)(t.p,{children:["We don't want to set up eight different exit screens, that's too unwieldy. Instead, we'll\nkeep our ",(0,s.jsx)(t.code,{children:"exit_other"})," screen and we'll insert the relevant\n",(0,s.jsx)(t.a,{href:"https://docassemble.org/docs/initial.html#template",children:"template block"})," in it, depending\non how the user answers the question."]}),"\n",(0,s.jsx)(t.p,{children:"Even though we have eight options, we actually only have six endpoints.  This is because the\n'Housing Dispute', 'Medical and Mental Health' and 'Review of Government decisions' choices all\ndiret to a 'Refer to SACAT' endpoint.  That saves us a bit of work."}),"\n",(0,s.jsxs)(t.p,{children:["So, create six templates in ",(0,s.jsx)(t.code,{children:"templates.yml"}),".  Each template need only have a name (which is the variable name)\nand a ",(0,s.jsx)(t.code,{children:"content"})," tag. There's no need for a subject tag.  Eg:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yml",children:"---\ntemplate: sacat\ncontent: |\n  Text in there about referring to SACAT\n---\n"})}),"\n",(0,s.jsx)(t.h3,{id:"create-a-new-code-block",children:"Create a new code block"}),"\n",(0,s.jsxs)(t.p,{children:["Before we get into the code block, please be aware that, when displaying out output there's\nmore than one way to ",(0,s.jsx)(t.a,{href:"/docs/coding_exercises/coding_workshop_2",children:"skin a cat"})," (see the bottom of that page)."]}),"\n",(0,s.jsxs)(t.p,{children:["In our case, we could either create a code block to select the right template, or we could\nsimply embed the code into our ",(0,s.jsx)(t.code,{children:"exit_other"})," screen using ",(0,s.jsx)(i.DisplayGlossaryItem,{item:"mako",upper:!0}),"\nif statements.  If so, our ",(0,s.jsx)(t.code,{children:"exit_other"})," code would look something like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yml",children:"---\nevent: exit_other\nquestion: Further assistance\nsubquestion: |\n  Some explanatory text goes here, then display the template.\n\n  %if CW3complaint == 'workplace':\n  ${saet_template}\n  %elif CW3complaint == 'whs':\n  ${safework_template}\n  %elif CW3complaint == 'cbs':\n  ${cbs_template}\n  ... and so-on five more times\n  %endif\nbuttons:\n  - Restart: restart\n  - Exit: exit\n---\n"})}),"\n",(0,s.jsxs)(t.p,{children:["While this is ",(0,s.jsx)(t.em,{children:"possible"}),", it's not really ",(0,s.jsx)(t.em,{children:"elegant"}),".  It clutters our end screen, which is\nused to display content, with logic.  A more elegant solution would be to have the end\nscreen display a template like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yml",children:"---\nevent: exit_other\nquestion: Further assistance\nsubquestion: |\n  Some explanatory text goes here, then display the template.\n\n  ${display_template}\nbuttons:\n  - Restart: restart\n  - Exit: exit\n---\n"})}),"\n",(0,s.jsx)(t.p,{children:"Much cleaner and concise(r)."}),"\n",(0,s.jsxs)(t.p,{children:["What we can then do is write a code block to set the variable ",(0,s.jsx)(t.code,{children:"display_template"})," based\non the answer from the complaint question."]}),"\n",(0,s.jsxs)(t.h4,{id:"the-mother-of-all-ifelif-statements",children:["The mother of all ",(0,s.jsx)(t.code,{children:"if/elif"})," statements"]}),"\n",(0,s.jsxs)(t.p,{children:["Create a code block in ",(0,s.jsx)(t.code,{children:"code.yml"}),".  That code block should contain a very large ",(0,s.jsx)(t.code,{children:"if/elif/else"}),"\nstatement. Each ",(0,s.jsx)(t.code,{children:"elif"})," branch should deal with one of the possible choices coming from the\ncomplaints quesiton.  Each ",(0,s.jsx)(t.code,{children:"elif"})," branch should set the variable ",(0,s.jsx)(t.code,{children:"display_template"})," to be\nthe relevant template you created ",(0,s.jsx)(t.a,{href:"#set-up-templates",children:"above"}),"."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["As three of the choices all direct to the SACAT template you can reduce the number of\n",(0,s.jsx)(t.code,{children:"elif"}),"s by using logical 'or' tests to test those three choices at once."]})}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsxs)(t.p,{children:["It's good practice to always have an ",(0,s.jsx)(t.code,{children:"else"})," branch to any ",(0,s.jsx)(t.code,{children:"if/elif"})," statement.  Your ",(0,s.jsx)(t.code,{children:"else"}),"\nbranch should never be used but is there just in case your app gets modified later and,\nfor example, a new choice gets added to the question."]}),(0,s.jsxs)(t.p,{children:["You can use ",(0,s.jsx)(t.a,{href:"/docs/textbook/chapter_03/00-20#using-format",children:(0,s.jsx)(t.code,{children:"format()"})})," to add the value\nof your variable to any error string you might want to construct."]})]}),"\n",(0,s.jsx)(t.h3,{id:"bringing-it-all-together",children:"Bringing it all together"}),"\n",(0,s.jsxs)(t.p,{children:["Congratulations! You should now have a complete version of your app.  Open your ",(0,s.jsx)(t.code,{children:"main.yml"})," file in your\nPlayground project and run your app to see if it works!./cw3d_references.mdx"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}const p={title:"Exercise 3d"},u=void 0,m={id:"coding_exercises/coding_workshop_3/cw3d",title:"Exercise 3d",description:"",source:"@site/docs/coding_exercises/coding_workshop_3/cw3d.mdx",sourceDirName:"coding_exercises/coding_workshop_3",slug:"/coding_exercises/coding_workshop_3/cw3d",permalink:"/textbook/docs/coding_exercises/coding_workshop_3/cw3d",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Exercise 3d"},sidebar:"codingExercisesSidebar",previous:{title:"Exercise 3c",permalink:"/textbook/docs/coding_exercises/coding_workshop_3/cw3c"},next:{title:"Solution Code",permalink:"/textbook/docs/coding_exercises/coding_workshop_3/solution"}},x={},f=[...[{value:"Set up templates.",id:"set-up-templates",level:3},{value:"Create a new code block",id:"create-a-new-code-block",level:3},{value:"The mother of all <code>if/elif</code> statements",id:"the-mother-of-all-ifelif-statements",level:4},{value:"Bringing it all together",id:"bringing-it-all-together",level:3}]];function g(e){return(0,s.jsx)(i.DisplayInlineExercise,{video:c,children:(0,s.jsx)(h,{})})}function j(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(g,{...e})}):g()}}}]);