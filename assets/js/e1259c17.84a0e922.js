"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[3026],{3666:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var t=s(4848),i=s(8453),o=s(2487);s(3797),s(9120);const a={title:"Coding - Display relevant services"},l=void 0,r={id:"textbook/chapter_06/filtering/00-60",title:"Coding - Display relevant services",description:"There are two parts to this part of our app:",source:"@site/docs/textbook/chapter_06/filtering/00-60.mdx",sourceDirName:"textbook/chapter_06/filtering",slug:"/textbook/chapter_06/filtering/00-60",permalink:"/textbook/docs/textbook/chapter_06/filtering/00-60",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Coding - Display relevant services"},sidebar:"textbookSidebar",previous:{title:"Coding - Evaluate against criteria",permalink:"/textbook/docs/textbook/chapter_06/filtering/00-50"},next:{title:"Source Code Library",permalink:"/textbook/docs/textbook/chapter_06/filtering/00-70"}},d={},c=[{value:"Styling the app",id:"styling-the-app",level:2},{value:"Adding a logo",id:"adding-a-logo",level:3},{value:"Changing the fonts",id:"changing-the-fonts",level:3},{value:"Working with colours",id:"working-with-colours",level:3},{value:"The Navbar",id:"the-navbar",level:4},{value:"Identifying RGB values",id:"identifying-rgb-values",level:4},{value:"The Display Table",id:"the-display-table",level:4},{value:"A note on banding rows",id:"a-note-on-banding-rows",level:4},{value:"Descriptive text",id:"descriptive-text",level:2},{value:"Brief text",id:"brief-text",level:3},{value:"A table with answers",id:"a-table-with-answers",level:3},{value:"The relevant services table",id:"the-relevant-services-table",level:3},{value:"PDF attachment.",id:"pdf-attachment",level:2},{value:"Document Generation date",id:"document-generation-date",level:3},{value:"Answers to user questions",id:"answers-to-user-questions",level:3},{value:"The Relevant Services Table",id:"the-relevant-services-table-1",level:3},{value:"Making a Jinja hyperlink",id:"making-a-jinja-hyperlink",level:3},{value:"Using index variables",id:"using-index-variables",level:4},{value:"Applying a markdown filter.",id:"applying-a-markdown-filter",level:4},{value:"Adding the attachment",id:"adding-the-attachment",level:3},{value:"The End!",id:"the-end",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"There are two parts to this part of our app:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"style the app and make it look nicer than what it is; and"}),"\n",(0,t.jsx)(n.li,{children:"prepare a PDF attachment for downloading and emailing."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Let's deal with these in turn"}),"\n",(0,t.jsx)(n.h2,{id:"styling-the-app",children:"Styling the app"}),"\n",(0,t.jsxs)(n.p,{children:["To summarise our styling requirements from the ",(0,t.jsx)(n.a,{href:"00-10#display-the-list-of-relevant-services",children:"design"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["the ",(0,t.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:s(5162).A+"",children:"ABC logo"})," needs to be added to the app;"]}),"\n",(0,t.jsxs)(n.li,{children:["we need to use the ",(0,t.jsx)(n.a,{href:"https://fonts.google.com/specimen/Poppins",children:"Poppins"})," font for headings;"]}),"\n",(0,t.jsxs)(n.li,{children:["we need to use the ",(0,t.jsx)(n.a,{href:"https://fonts.google.com/specimen/Unna",children:"Unna"})," font for body text;"]}),"\n",(0,t.jsx)(n.li,{children:"ABC want us to make use of the colours in the logo throughout the app."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Given we're in the design phase we shoudl also add to this list:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"put descriptive text in the welcome and final screens; and"}),"\n",(0,t.jsx)(n.li,{children:"put descriptive text in the question blocks where necessary."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Let's work through these top to bottom."}),"\n",(0,t.jsx)(n.h3,{id:"adding-a-logo",children:"Adding a logo"}),"\n",(0,t.jsxs)(n.p,{children:["We've dealt with logos ",(0,t.jsx)(n.a,{href:"/docs/textbook/chapter_07/00-20#inserting-the-logo",children:"before"}),".  We can follow the same\nprocess here."]}),"\n",(0,t.jsxs)(n.p,{children:["First, upload the ",(0,t.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:s(5162).A+"",children:"logo"})," to the 'Static Files' folder\nin your Playground."]}),"\n",(0,t.jsxs)(n.p,{children:["Then we need to add an ",(0,t.jsx)(n.code,{children:"objects"})," block to ",(0,t.jsx)(n.code,{children:"main.yml"})," declaring the logo to Docassemble:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"---\nobjects:\n  - ABClogo: DAStaticFile.using(filename='ABCInc_logo_white.png')\n---\n"})}),"\n",(0,t.jsx)(n.p,{children:"We then need to add an extra mandatory block to set the logo:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"---\nmandatory: True\ncode: |\n  set_parts(logo='<img src=\"' + ABClogo.url_for() + '\" style=\"height: 50px;\">')\n---\n"})}),"\n",(0,t.jsx)(n.p,{children:"We get something that looks like this:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding7.png"}),"\n",(0,t.jsx)(n.p,{children:"That doesn't look that great.  We'll take up the styling and use of colours later in this part\nof the chapter.  For now let's move to fonts."}),"\n",(0,t.jsx)(n.h3,{id:"changing-the-fonts",children:"Changing the fonts"}),"\n",(0,t.jsxs)(n.p,{children:["We'll be working with ",(0,t.jsx)(n.a,{href:"/docs/textbook/chapter_07/00-20",children:"CSS styles"}),".\nWe will put our styles into ",(0,t.jsx)(n.code,{children:"ABC_styles.css"})," in our 'Static Files' folder.  The first thing we need to do is let\nour app know about this. Let's add a ",(0,t.jsx)(n.code,{children:"features"})," block to ",(0,t.jsx)(n.code,{children:"main.yml"})," to let our app we're going to use our CSS file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"---\nfeatures:\n  css: ABC_styles.css\n---\n"})}),"\n",(0,t.jsxs)(n.admonition,{title:"hint",type:"tip",children:[(0,t.jsxs)(n.p,{children:["Add the ",(0,t.jsx)(n.code,{children:"features"})," block just under the ",(0,t.jsx)(n.code,{children:"include"})," block."]}),(0,t.jsxs)(n.p,{children:["Docassemble doesn't care where we put our block, but it's good practice to set out preliminary blocks,\nsuch as ",(0,t.jsx)(n.code,{children:"include"}),", ",(0,t.jsx)(n.code,{children:"objects"})," and ",(0,t.jsx)(n.code,{children:"features"})," at the top of the code and have the 'working' blocks\n(ie: our question and code blocks) following our preliminary blocks."]})]}),"\n",(0,t.jsxs)(n.p,{children:["The Una and Poppins fonts requested by ABC are a set of fonts owned by Google and made\navailable free of charge.  Google's ",(0,t.jsx)(n.a,{href:"https://fonts.google.com/",children:"fonts"})," are also known as\n'web fonts' as they are downloadable directly from the web for use into web apps, which\nis exactly what we are going to do."]}),"\n",(0,t.jsx)(n.p,{children:"We need to tell our app to download these fonts and then apply these fonts to the various\ntext parts of our app."}),"\n",(0,t.jsxs)(n.p,{children:["First, the download bit.  We will use the ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/initial.html#default%20screen%20parts",children:(0,t.jsx)(n.code,{children:"default screen parts"})}),"\nblock to download our fonts.  Again, we add this block to the top of ",(0,t.jsx)(n.code,{children:"main.yml"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:'---\ndefault screen parts:\n  post: |\n    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300&display=swap" rel="stylesheet">\n    <link href="https://fonts.googleapis.com/css2?family=Unna&display=swap" rel="stylesheet">\n---\n'})}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.p,{children:"To get the link for a font:"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Go to ",(0,t.jsx)(n.a,{href:"https://fonts.google.com",children:"Google Fonts"})]}),"\n",(0,t.jsx)(n.li,{children:"Search for the font you're after"}),"\n",(0,t.jsxs)(n.li,{children:["Click on the 'Show selected families' ",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/selectedfamily.png",inline:!0})," icon"]}),"\n",(0,t.jsx)(n.li,{children:"In the 'Use on the web' part make sure the 'link' radio button is selected."}),"\n",(0,t.jsxs)(n.li,{children:["From the code box copy only the line that ends in ",(0,t.jsx)(n.code,{children:'..."stylesheet">'})]}),"\n",(0,t.jsxs)(n.li,{children:["Paste that line into the ",(0,t.jsx)(n.code,{children:"default screen parts"})," as per above."]}),"\n"]})]}),"\n",(0,t.jsx)(n.p,{children:"Now that we have our fonts we can use them in our stylesheet."}),"\n",(0,t.jsx)(n.p,{children:"We need to find a style element or style elements that are generic and used throughout the app.\nWe can then define classes with the same name as those elements to set our fonts as we wish."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Refer to ",(0,t.jsx)(n.a,{href:"/docs/textbook/chapter_07/00-20#identify-the-component",children:"here"})," for details on how to identify\nstyles using your browser's developer tools."]})}),"\n",(0,t.jsxs)(n.p,{children:["It turns out that question titles are rendered in the ",(0,t.jsx)(n.code,{children:"da-page-header"})," class, and\nthe subquestion text is displayed in a ",(0,t.jsx)(n.code,{children:"da-subquestion"})," class. Let's define classes to both by\nadding the below to our ",(0,t.jsx)(n.code,{children:"ABC_styles.css"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".da-page-header {\n  font-family: 'Poppins', sans-serif;\n}\n\n.da-subquestion {\n  font-family: 'Unna', sans-serif;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"After making these changes our app looks like this:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding10.png"}),"\n",(0,t.jsxs)(n.p,{children:["The heading font looks OK but the size of the body text is a bit small.  We can increase\nit by adding a ",(0,t.jsx)(n.code,{children:"font-size"})," to our ",(0,t.jsx)(n.code,{children:"container"})," class:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".da-subquestion {\n    font-family: 'Unna', sans-serif;\n    font-size: 18pt; \n}\n"})}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding11.png"}),"\n",(0,t.jsx)(n.p,{children:"That's a bit better.  However, as we work through our app we'll see there are other\nclasses that we need to address.  For example, the Unna font isn't used for our\nuser questions:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding12.png"}),"\n",(0,t.jsx)(n.p,{children:"or our radio buttons:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding13.png"}),"\n",(0,t.jsxs)(n.p,{children:["Again, we need to use our Developer Tools to identify the classes to modify.  Where possible,\nwe should try to modify classes that start with ",(0,t.jsx)(n.code,{children:"da-"})," as these are Docassemble classes."]}),"\n",(0,t.jsx)(n.p,{children:"A bit of poking around with the Developer tools results in:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["the text that appears before an input field is a ",(0,t.jsx)(n.code,{children:"da-form-label"})]}),"\n",(0,t.jsxs)(n.li,{children:["the text that appears in the radio buttons and checkboxes is a ",(0,t.jsx)(n.code,{children:"dalabelauty"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["We can add these styles to ",(0,t.jsx)(n.code,{children:"ABC_styles.css"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".da-form-label {\n  font-family: 'Unna', sans-serif;\n  font-size: 1.2em;\n}\n\n.dalabelauty {\n  font-family: 'Unna', sans-serif;\n  font-size: 1.2em;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"font-size: 1.2em"})," increases the font size by 20% over the default (rather small) font size.  Now\nour screen looks like this:"]}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding13a.png"}),"\n",(0,t.jsx)(n.p,{children:"Working through the rest of the screens it appears that there are no other styles for us to\ntake account of.  Let's look at colours now."}),"\n",(0,t.jsx)(n.h3,{id:"working-with-colours",children:"Working with colours"}),"\n",(0,t.jsx)(n.h4,{id:"the-navbar",children:"The Navbar"}),"\n",(0,t.jsxs)(n.p,{children:["The logo with the white background on a black navbar does not look\npretty.  We'll have to change the background colour of the navbar from black\nto something else.  We have dealt with changing navbar colours\n",(0,t.jsx)(n.a,{href:"/docs/textbook/chapter_07/00-20#changing-the-navbar-colour",children:"elsewhere"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's try a white background.  Put this into ",(0,t.jsx)(n.code,{children:"ABC_styles.css"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".navbar{\n    background-color: white !important;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Save and re-run the app.  This seems a bit stark."}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding8.png"}),"\n",(0,t.jsx)(n.p,{children:"Let's add a border to the bottom of the navbar.  The border can be wide and its colour\nshould be the same as the dark colour in the 'A' and 'C' in the logo."}),"\n",(0,t.jsxs)(n.p,{children:["We'll add a name for the colour to our ",(0,t.jsx)(n.code,{children:"root:"})," class and then add a border to our ",(0,t.jsx)(n.code,{children:"navbar"})," class."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",metastring:'title="ABC_styles.css" showLineNumbers',children:":root {\n    --ABC-darkest: rgb(10,62,92);\n}\n\n.navbar {\n    background-color: white !important;\n    border-bottom: 5px solid var(--ABC-darkest);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Save and re-run the app. That's an improvement:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding9.png"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)(n.h4,{id:"identifying-rgb-values",children:"Identifying RGB values"})}),(0,t.jsxs)(n.p,{children:["As we have ",(0,t.jsx)(n.a,{href:"/docs/textbook/chapter_07/00-20#how-we-describe-colours-in-code",children:"discussed elsewhere"})," we\nneed to determine RGB values for each colour we want to use. An easy way to do this\non Windows systems is to use the 'Colour picker' tool in Microsoft Paint:"]}),(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/paint1.png"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Open the ABC logo in Paint and select the Colour Picker tool."}),"\n",(0,t.jsx)(n.li,{children:"Click on the colour you are looking to determine the value of."}),"\n",(0,t.jsx)(n.li,{children:"Then click on 'Edit Colours'.  The dialog will show the RGB values for the colour you just picked.\nl. The RGB values will be displayed in edit colour dialog."}),"\n"]}),(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/paint2.png"})]})}),"\n",(0,t.jsx)(n.h4,{id:"the-display-table",children:"The Display Table"}),"\n",(0,t.jsx)(n.p,{children:"The other area of our app that could do with some colour goodness is our\ntable on our final screen. It doesn't look that great:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding15.png",size:"75%"}),"\n",(0,t.jsx)(n.p,{children:"We could use the logo colours to add a border around the table and style the table cells."}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["We need to know a little about the structure of ",(0,t.jsx)(n.a,{href:"https://www.w3schools.com/html/html_tables.asp",children:"HTML tables"}),".\nSpecifically, we need to be aware that rows in tables are defined inside ",(0,t.jsx)(n.code,{children:"<tr></tr>"})," tags,\ncolumn headers are defined inside ",(0,t.jsx)(n.code,{children:"<th></th>"})," elements and table cells in ",(0,t.jsx)(n.code,{children:"<td></td>"}),"."]}),(0,t.jsx)(n.p,{children:"When we style a table we have a 'parent style' which controls the table over all and we also have 'child styles'\nwhich style the elements in the table."}),(0,t.jsxs)(n.p,{children:["It turns out that Docassemble styles table using the default ",(0,t.jsx)(n.code,{children:"table"})," class.  This is the table's parent\nstyle and we'd define it in the usual way ie:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".table {\n  /* style stuff goes here */\n}\n"})}),(0,t.jsxs)(n.p,{children:["For the child elements we define them as children of ",(0,t.jsx)(n.code,{children:"table"})," in this way:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".table tr {\n  /* styles for table rows */\n}\n.table th {\n  /* styles for table column headings */\n}\n.table td {\n  /* styles for table cells */\n} \n"})})]}),"\n",(0,t.jsxs)(n.p,{children:["We'll need to define some more colours as well.  Using our colour picker we can pick another\nthree colours from the ABC logo and add them to our ",(0,t.jsx)(n.code,{children:":root"})," class."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:":root {\n  --ABC-darkest: rgb(10,62,92);\n  --ABC-darker: rgb(9,115,150);\n  --ABC-light: rgb(25,175,189);\n  --ABC-sun: rgb(205,146,79);\n  --ABC-sun-lighter: rgb(248,238,228);\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--ABC-sun-lighter"})," is a lighter version of ",(0,t.jsx)(n.code,{children:"--ABC-sun"}),".  It was calculated by using the\nslider on the colour picker in Microsoft Paint to slide up to a lighter shade of\n",(0,t.jsx)(n.code,{children:"--ABC-sun-light"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"What would be good would to have a dark border around the table.  The column headings\nshould also be dark with white text.  The table rows should be banded using a light\ncolour, and we'll make the font a little smaller in the table cells to distinguish them\nfrom the column headers. Let's define styles for this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"/* This style sets the border for the table */\n.table {\n    border: 5px solid var(--ABC-darkest);\n}\n\n/* This makes the column headings dark and the text white */\n.table th {\n  background-color: var(--ABC-darkest);\n  color: white;\n}\n\n/* We shrink the text a little in the table cells */\n.table td {\n  font-size: 0.8em;\n}\n\n/* Docassemble is highlighting every odd cell in grey.\n * we are going to use a lighter version of the colour\n * of the sun in the ABC logo */\n.table tr:nth-child(odd) {\n  background-color: var(--ABC-sun-lighter);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Our table looks a bit nicer now."}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding16.png",size:"75%"}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.h4,{id:"a-note-on-banding-rows",children:"A note on banding rows"}),(0,t.jsxs)(n.p,{children:["This is a relatively advanced concept for this textbook and won't be discussed in detail.\nIf you would like to know more there are ",(0,t.jsx)(n.a,{href:"https://www.w3schools.com/howto/howto_css_table_zebra.asp",children:"resources online"}),"\nthat you may find useful.  It is also always useful to poke around any website with\nbanded table rows with your Developer Tools."]})]}),"\n",(0,t.jsx)(n.h2,{id:"descriptive-text",children:"Descriptive text"}),"\n",(0,t.jsx)(n.p,{children:"We will leave the adding of text to the welcome screen and the user questions to the reader.\nWe will focus on the end screen as that is where the relevant information is presented."}),"\n",(0,t.jsx)(n.p,{children:"We have been using the screen for test output so far.  Now we need to prepare a screen\nthat is appropriate for the display of the relevant information.  We would want our\nscreen to contain:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"some brief text describing the information provided;"}),"\n",(0,t.jsx)(n.li,{children:"we may want to include a table showing the user's answers to the questions;"}),"\n",(0,t.jsx)(n.li,{children:"we want to display the table of relevant services; and"}),"\n",(0,t.jsx)(n.li,{children:"we want display the PDF attachment (which we have not yet created)."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"We will cover the PDF attachment below.  Let's deal with the other three."}),"\n",(0,t.jsx)(n.h3,{id:"brief-text",children:"Brief text"}),"\n",(0,t.jsx)(n.p,{children:"Again, this is not a technical task and is left to the reader."}),"\n",(0,t.jsx)(n.h3,{id:"a-table-with-answers",children:"A table with answers"}),"\n",(0,t.jsx)(n.p,{children:"Given the data we want to display is not in any data structure it's best to use\na Markdown table to display the user's input.  Something like this would work:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"  You entered the following information\n\n  Age|Gender|Service Locations|Type of Accommodation\n  ---|---|---|---\n  ${MJFage}|${MJFgender}|${MJFlocation.true_values()}|${MJFfamily_display}\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"${MJFfamily_display}"})," is new.  If we displayed ",(0,t.jsx)(n.code,{children:"MJFfamily"})," in our table it would display\nthe string ",(0,t.jsx)(n.code,{children:"family"})," or ",(0,t.jsx)(n.code,{children:"single"}),".  This is not particularly descriptive, so we'll use\na code block to set ",(0,t.jsx)(n.code,{children:"MJFfamily_display"})," to more descriptive text.  Add this code block\nto the end of ",(0,t.jsx)(n.code,{children:"main.yml"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"---\ncode: |\n  if MJFfamily == 'family':\n    MJFfamily_display = 'Accommodation for your family'\n  elif MJFfamily == 'single\n    MJFfamily_display = 'Accommodation for yourself'\n  else:\n    MJFfamily_display = 'Error invalid value for MJFfamily: {}'.format(MJFfamily)\n---\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"MJFfamily"})," is set to ",(0,t.jsx)(n.code,{children:"family"})," then the string ",(0,t.jsx)(n.code,{children:"Accommodation for your family"})," will be displayed.\nIf ",(0,t.jsx)(n.code,{children:"MJFfamily"})," is ",(0,t.jsx)(n.code,{children:"single"})," then",(0,t.jsx)(n.code,{children:"Accommodation for yourself"})," will be displayed.  If ",(0,t.jsx)(n.code,{children:"MJFfamily"}),"\nis any other value then an error message will be displayed."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["In theory we should never encounter the error message.  However it is good practice to\naccount for every possible case when writing an if statement.  The ",(0,t.jsx)(n.code,{children:"else:"})," catches\nany other value."]}),(0,t.jsx)(n.p,{children:"This is good practice as, for example, if we added a new category to accommodation type\nand forgot to modify this part of the code at least we would receive the error message\nand be alerted to updating this if statement as well."})]}),"\n",(0,t.jsx)(n.h3,{id:"the-relevant-services-table",children:"The relevant services table"}),"\n",(0,t.jsxs)(n.p,{children:["Our ",(0,t.jsx)(n.a,{href:"00-50#testing",children:(0,t.jsx)(n.code,{children:"relevant_services_test_table"})})," is close to what we want.\nThe only changes would be remove the Website column and\nmake the service name a link to the service's website.  We can do this with a Python expression,\nmuch like how we used an expression to display the age range.  In this case we will use\na Python expression to create the Markdown syntax for displaying a web link."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.p,{children:"The best reference for setting up web links is in your Playground:"}),(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)(n.p,{children:"Playground screenshot"})}),(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding17.png"})]}),(0,t.jsxs)(n.p,{children:["However, there are ",(0,t.jsx)(n.a,{href:"https://daringfireball.net/projects/markdown/syntax#link",children:"many"}),"\n",(0,t.jsx)(n.a,{href:"https://www.markdownguide.org/",children:"other"})," ",(0,t.jsx)(n.a,{href:"https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github",children:"resources"}),"\n",(0,t.jsx)(n.a,{href:"https://www.howtogeek.com/448323/what-is-markdown-and-how-do-you-use-it/",children:"available"})," online."]})]}),"\n",(0,t.jsxs)(n.p,{children:["We will add a new table block to\ndisplay this modified table.  We will put the table block in ",(0,t.jsx)(n.code,{children:"process_data.yml"}),".  Note the use\nof ",(0,t.jsx)(n.code,{children:"format()"})," to create a hyperlink for the 'Name' column:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:"{6}",children:"---\ntable: relevant_services_table\nrows: MJFrelevant_services\ncolumns:\n  - Name: |\n      \"[{}]({})\".format(row_item['name'], row_item['website'])\n  - Age Range: |\n      \"{} to {}\".format(row_item['min_age'], row_item['max_age'])\n  - Gender: row_item['gender']\n  - Locations: row_item['location']\n  - Family: row_item['family']\n---\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now that we have a 'real' table to display we can remove our ",(0,t.jsx)(n.code,{children:"services_test_table"})," and\n",(0,t.jsx)(n.code,{children:"relevant_services_test_table"})," and replace it with our ",(0,t.jsx)(n.code,{children:"relevant_services_table"}),".  Our\n",(0,t.jsx)(n.code,{children:"final_screen"})," should now look something like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"---\nevent: final_screen\nquestion: Final Screen\nsubquestion: |\n  Some introductory text will go here.\n\n  You entered the following information\n\n  Age|Gender|Service Locations|Type of Accommodation\n  ---|---|---|---\n  ${MJFage}|${MJFgender}|${MJFlocation.true_values()}|${MJFfamily_display}\n\n  Here are a list of services relevant to your circumstances.\n\n  ${relevant_services_table}\nbuttons:\n  - Exit: exit\n  - Restart: restart\n---\n"})}),"\n",(0,t.jsx)(n.p,{children:"Make these changes and run the app.  You should end up with something that looks like this:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/coding14.png"}),"\n",(0,t.jsx)(n.p,{children:"The app is an improvement on the unstyled version and, frankly, reflects the limits of this\nauthor's artistic abilities!  Nonetheless, this does demonstrate how it is possible\nto significantly improve the look of an application."}),"\n",(0,t.jsx)(n.p,{children:"We have one more part left.  The PDF attachment."}),"\n",(0,t.jsx)(n.h2,{id:"pdf-attachment",children:"PDF attachment."}),"\n",(0,t.jsxs)(n.p,{children:["We have covered attachments ",(0,t.jsx)(n.a,{href:"/docs/textbook/chapter_02/00-30",children:"previously"})," and have dealt with\nthem in more detail in ",(0,t.jsx)(o.DisplayChapter,{chapter:"chapter_08"}),". For our app we want to use\na Word document template to generate a PDF file which the user can download or email to\nthemselves."]}),"\n",(0,t.jsxs)(n.p,{children:["As we know, we usually use Word documents to create the templates from which to generate\nPDFs (although there are ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/documents.html",children:"other options"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"We'll want our Word document to look more or less like our final screen.  Our document should\nmake use of the same logo colours.  However, we cannot use Google Fonts in Word documents, so\nwe will stick to the default fonts."}),"\n",(0,t.jsx)(n.p,{children:"Generate a quick mockup that looks something like this in Word:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/pdf1.png"}),"\n",(0,t.jsxs)(n.p,{children:["It's a bit subtle but we've set the colour of 'Emergency Accommodation Service' to\nthe same RGB values as ",(0,t.jsx)(n.code,{children:"--ABC-darkest"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Let's also record a document generation date in the footer:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/pdf2.png"}),"\n",(0,t.jsx)(n.p,{children:"We'll work through these from the simplest to the most complicated."}),"\n",(0,t.jsx)(n.h3,{id:"document-generation-date",children:"Document Generation date"}),"\n",(0,t.jsxs)(n.p,{children:["We can use Jinja code, ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/functions.html#format_date",children:(0,t.jsx)(n.code,{children:"format_date()"})}),",\nand ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/functions.html#today",children:(0,t.jsx)(n.code,{children:"today()"})})," to generate today's date and\nformat it in an AGLC-compliant way."]}),"\n",(0,t.jsx)(n.p,{children:"We can replace the highlighted text in the footer of our document with this Jinja code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jinja",children:"{{ format_date(today(), 'd MMMM YYYY')}}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"answers-to-user-questions",children:"Answers to user questions"}),"\n",(0,t.jsxs)(n.p,{children:["We want to set up a table similar to the user question table in our final screen.  We should\nstyle it in a similar way, that is with ",(0,t.jsx)(n.code,{children:"--ABC-darkest"})," colour for the column header and border\nbackgrounds."]}),"\n",(0,t.jsx)(n.p,{children:"We should style our table as follows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"dark column headers as already discussed"}),"\n",(0,t.jsx)(n.li,{children:"a 3 pixel border around the table (not the cells) of the same colour"}),"\n",(0,t.jsx)(n.li,{children:"each column must be the same width (Select the table,\nGo to Layout (on the right of 'Table Design') -> Distribute Columns)."}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"---ABC-darkest"})," is defined in CSS.  Word does not understand CSS so we will need to define\ncustom colours using the RGB values from CSS in each element"]})}),"\n",(0,t.jsx)(n.p,{children:"We can use Jinja code to display our variable values in the cells.  Your table should look\nsomething like this:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/pdf3.png"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["We are using ",(0,t.jsx)(n.code,{children:"MJFfamily_display"})," in this table for the same reason as we use it in ",(0,t.jsx)(n.code,{children:"final_screen"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"the-relevant-services-table-1",children:"The Relevant Services Table"}),"\n",(0,t.jsxs)(n.p,{children:["We want to use a similar layout to the ",(0,t.jsx)(n.code,{children:"final_screen"})," here as well.  There are two\nissues we need to address:  firstly, we don't know how big our table will be - it will need\nto display only the number of rows it requires to display the services (ie: no blank\nrows or missing rows); secondly, we want to display the service name as a hyperlink to\nthe service's website."]}),"\n",(0,t.jsx)(n.p,{children:"Let's start with a skeleton table first:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/pdf4.png"}),"\n",(0,t.jsx)(n.p,{children:"To this we can add the Jinja code that will generate the required  number of rows in the table."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Attachments and Jinja are covered in ",(0,t.jsx)(o.DisplayChapter,{chapter:"chapter_08"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"Merge the top and bottom rows in the table and insert the code as shown below:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/pdf5.png"}),"\n",(0,t.jsx)(n.p,{children:"We now need to populate each of the cells.  Where a cell's value is a variable name,\nsuch as for Gender, Location and Family, we can enclose the variable name in Jinja\nbraces ie:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"{{a_service['gender']}}"})," for Gender;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"{{a_service['location']}}"})," for Locations; and"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"{{a_service['family']}}"})," for Accommodation Type;"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For the 'Age Range' column we don't need to use ",(0,t.jsx)(n.code,{children:"format()"}),". Instead we can create the string\ndirectly, much like if this was Markdown and Mako ie:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"{{a_service['min_age']}} to {{a_service['max_age']}}\n"})}),"\n",(0,t.jsx)(n.p,{children:"So, for all but the 'Service' column, our table should look like this:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/pdf6.png"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"We will sort the column spacing later."})}),"\n",(0,t.jsx)(n.h3,{id:"making-a-jinja-hyperlink",children:"Making a Jinja hyperlink"}),"\n",(0,t.jsxs)(n.p,{children:["In order to make a hyperlink with Jinja we need to supply the markdown to Jinja and pass it through\na markdown ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/documents.html#markdown%20to%20docx",children:"filter"}),".  In our\ndatabase we have a ",(0,t.jsx)(n.code,{children:"name"})," key and we have a ",(0,t.jsx)(n.code,{children:"website"})," key but we don't have any key with a value\nthat would be Markdown text for a hyperlink (ie: ",(0,t.jsx)(n.code,{children:"[name](https://link.to.website)"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["We could go back to ",(0,t.jsx)(n.code,{children:"MJFservices"})," and manually add a new, say, ",(0,t.jsx)(n.code,{children:"service_link"})," key for every entry\nand with the proper markdown link.  However, that shouldn't be mecessary, as we'd just be duplicating\ninformation we already have."]}),"\n",(0,t.jsxs)(n.p,{children:["Ideally, what we would like would be to create this ",(0,t.jsx)(n.code,{children:"service_link"})," key/value pair dynamically as we\nneed it, much like how we created ",(0,t.jsx)(n.code,{children:"MJFfamily_display"})," just when we needed it."]}),"\n",(0,t.jsx)(n.h4,{id:"using-index-variables",children:"Using index variables"}),"\n",(0,t.jsxs)(n.p,{children:["Docassemble does allow us to do this.  Firstly, we ",(0,t.jsx)(n.a,{href:"/docs/textbook/chapter_05/00-40#adding-items",children:"know how to add"}),"\nnew items to a dictionary.  Secondly, we also know how to ",(0,t.jsx)(n.a,{href:"/docs/textbook/chapter_05/00-20#referencing",children:"reference data in a list"}),".\nDocassemble provides us with ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#index%20variables",children:"index variables"})," that\nallow us to refer to items in a list in question and code block.  If we put all that together, we can construct\na code block like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\ncode: |\n  MJFservices[i]['service_link'] = \"[{}]({})\".format(\n    MJFservices[i]['name'],\n    MJFservices[i]['website']\n  )\n---\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Let's work through this.  Overall, what this code block is doing is setting\nthe value of ",(0,t.jsx)(n.code,{children:"MJFservices[i]['service_link']"}),".  The value it is being set to\nis essentially just a ",(0,t.jsx)(n.code,{children:"format()"})," command, but the command is spread over three\nlines as the two parameters to pass in are rather long.  We could have written\nthe ",(0,t.jsx)(n.code,{children:"format()"})," part like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"  \"[{}]({})\".format( MJFservices[i]['name'], MJFservices[i]['website'] )\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The real fun is in this ",(0,t.jsx)(n.code,{children:"[i]"})," business.  The ",(0,t.jsx)(n.code,{children:"i"})," is an ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#index%20variables",children:"index variable"}),".\nThis is a special variable that is not set in a code, question or object block like the\nother variables we dealt with so far.  An index variable is used to refer to the position,\nor 'index' of a list item.  So, what our code block is doing is\nsetting the value of the i",(0,t.jsx)("sup",{children:"th"})," list item of ",(0,t.jsx)(n.code,{children:"MJFservices"})," to something."]}),"\n",(0,t.jsxs)(n.p,{children:["As we know, ",(0,t.jsx)(n.code,{children:"MJFservices"})," is a list of dictionaries.  So, more specifically, our\ncode block is setting the value of the ",(0,t.jsx)(n.code,{children:"service_link"})," key for the i",(0,t.jsx)("sup",{children:"th"}),"\nlist item in ",(0,t.jsx)(n.code,{children:"MJFservices"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["How does Docassemble know what the i",(0,t.jsx)("sup",{children:"th"})," item is?  This is something that\nit works out internally. As Docassemble iterates over a list it keeps track of the\nindex of each list item.  We don't see this when we write:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"for a_service in MJFservices\n  # do something\n"})}),"\n",(0,t.jsx)(n.p,{children:"But Python is aware of the index nonetheless.  What this means for us is that we can\niterate over a list and use code with index variables for blocks to ask questions\nfor each item or, in our case, code blocks to automatically popluate new items."}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\ncode: |\n  for a_service in MJFservices:\n    a_service['service_link']\n---\ncode: |\n  MJFservices[i]['service_link'] = \"[{}]({})\".format(\n    MJFservices[i]['name'],\n    MJFservices[i]['website']\n  )\n---\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The first code block iterates over ",(0,t.jsx)(n.code,{children:"MJFservices"}),".  The body of the loop asks for\n",(0,t.jsx)(n.code,{children:"a_service['service_link']"})," to be populated.  Docassemble, on seeing this code,\nwill execute the second code block as it is looking to populate the ",(0,t.jsx)(n.code,{children:"service_link"}),"\nkey for a particular element of ",(0,t.jsx)(n.code,{children:"MJFservices"}),". The element is passed in to ",(0,t.jsx)(n.code,{children:"i"}),"\nso the correct list item is populated."]}),"\n",(0,t.jsx)(n.p,{children:"This works in Jinja also.  The first row in our table has this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"{%tr for a_service in MJFrelevant_services %}\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is the beginning of a for loop."}),"\n",(0,t.jsxs)(n.p,{children:["Each cell in the body row of our loop refers to ",(0,t.jsx)(n.code,{children:"a_service"}),", much like we did\nin our decision processing block ",(0,t.jsx)(n.a,{href:"00-50",children:"earlier"}),".  For the 'Service Name' column\nwe can refer to ",(0,t.jsx)(n.code,{children:"a_service['service_link']"}),".  Docassemble will see this and\nprocess our new code block."]}),"\n",(0,t.jsx)(n.h4,{id:"applying-a-markdown-filter",children:"Applying a markdown filter."}),"\n",(0,t.jsx)(n.p,{children:"Now that we have a way of passing our Markdown hyperlink into Jinja we need to tell Jinja to apply\na Markdown filter, otherwise it will be processed as plain text.  This part is much simpler than\nthe index variable!  We apply a Markdown filter like so:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"{{p a_service['service_index'] | markdown}}\n"})}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/pdf7.png"}),"\n",(0,t.jsx)(n.h3,{id:"adding-the-attachment",children:"Adding the attachment"}),"\n",(0,t.jsxs)(n.p,{children:["Finally, we need to connect our template to our app and provide the email capability.\nThankfully, Docassemble's ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/documents.html#attachment",children:(0,t.jsx)(n.code,{children:"attachment"})}),"\nspecifier provides an emailing and Word-to-PDF capability that we can use. All we need to do\nis add this ",(0,t.jsx)(n.code,{children:"attachment"})," to our ",(0,t.jsx)(n.code,{children:"final_screen"})," above our ",(0,t.jsx)(n.code,{children:"buttons"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:'attachment:\n  docx template file: ABCtemplate.docx\n  filename: "ABC Inc Emergency Accommodation Services"\n  valid formats:\n    - pdf\n'})}),"\n",(0,t.jsx)(n.p,{children:"Line 2 tells Docassemble our attachment will be based on our Word template file we have just created."}),"\n",(0,t.jsx)(n.p,{children:"Line 3 will save (or email) the PDF we generate with this filename."}),"\n",(0,t.jsxs)(n.p,{children:["Lines 4 and 5 tell Docassemble to only generate a ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/documents.html#valid%20formats",children:"PDF"}),".\nBy default, both Word and PDF files would be generated."]}),"\n",(0,t.jsx)(n.p,{children:"This attachment block appends this to the bottom of our final screen:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/pdf8.png"}),"\n",(0,t.jsx)(n.p,{children:"Clicking on the PDF will display our PDF, and it can be saved with the filename\nwe speicified:"}),"\n",(0,t.jsx)(o.DisplayImage,{imageURL:"/img/textbook/chapter_06/filter/pdf9.png"}),"\n",(0,t.jsx)(n.h2,{id:"the-end",children:"The End!"}),"\n",(0,t.jsx)(n.p,{children:"That concludes this case study.  Those of you wishing to take this study further could address\nsome issues not covered in this case study:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"What will happen if there are no relevant services for a user?  What is displayed in\nthis situation?  What should be displayed in this situation?"}),"\n",(0,t.jsx)(n.li,{children:"The spinner that is displayed before the final screen is partially hidden under\nthe navbar.  It should be moved downwards."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"And, of course, the app could always look better..."})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},3797:(e,n,s)=>{s.r(n),s.d(n,{F01:()=>a,F02:()=>r,F03:()=>c,F03a:()=>m,F04:()=>f,F05:()=>x,F05a:()=>j,F05b:()=>b,F06:()=>v,F06a:()=>_,F06b:()=>F,F07:()=>A});var t=s(4848),i=s(8453);function o(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    id1(Display a <b>list</b> of emergency<br>accommodation providers<br><b>tailored to</b> the <b>circumstances<br>of</b> each user)"})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}function l(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    id0(Ask user about their circumstances)\n    id0 --\x3e id1(Evaluate user's circumstances against list of services)\n    id1 --\x3e id2(Display list of relevant services)"})}function r(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}function d(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    id0(Ask user their age)\n    id1(Ask user their gender)\n    id2(Ask user for which locations<br>they are looking for services)\n    id3(Ask the user if they are<br>looking for accommodation for<br>themselves or their family)\n    \n    %% Invisible links so the boxes appear vertically\n    id0 ~~~ id1 ~~~ id2 ~~~ id3"})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function h(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    id0(Ask user their age)\n    id1(Ask user their gender)\n    id2(Ask user for which locations<br>they are looking for services)\n    id3(Ask the user if they are<br>looking for accommodation for<br>themselves or their family)\n\n    co0(Name: <code>MJFage</code><br><code>datatype: integer</code>)\n    co1(Name: <code>MJFgender</code><br>Present genders as radio buttons)\n    co2(Name: <code>MJFlocation</code><br>Use checkboxes so<br>user can select<br>multiple locations)\n    co3(Name: <code>MJFfamily</code><br>Use <code>yesnoradio</code> or regular radio buttons)\n\n    \n    %% Invisible links so the boxes appear vertically\n    id0 ~~~ id1 ~~~ id2 ~~~ id3\n\n    co0 --\x3e id0\n    co1 --\x3e id1\n    co2 --\x3e id2\n    co3 --\x3e id3\n\n\n    %% Define styles for flowchart items.  We want to make comments yellow\n    %% and have a larger font size for regular items\n    classDef commentClass fill:#faffd6,text-align:left\n    classDef questionClass fill:#ffe6bc\n    classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n    classDef itemClass font-size:16pt\n    classDef leftListClass text-align:left\n\n    class co0,co1,co2,co3 commentClass\n"})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}function p(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    id0(Define a list of services)\n    id1(Evaluate user circumstances<br>against service criteria)\n\n    %% invisible links to stack vertically\n    id0 ~~~ id1"})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}function u(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  id1(For each service in the list)\n  id1 --\x3e id2{{Does the service meet the user's circumstances?}}\n  id2 -- Yes --\x3e id3(Add the service to the display list)\n  id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}function g(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  subgraph Loop\n    direction TB\n    id1(For each service in the list)\n    subgraph Loop_Body\n        direction TB\n        id2{{Does the service meet the user's circumstances?}}\n        id2 -- Yes --\x3e id3(Add the service to the display list)\n        id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n    end\n    id1 --\x3e Loop_Body\n  end\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function j(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}function w(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  subgraph Loop\n    direction TB\n    id1(<code>for a_service in MJFservices:</code>)\n    subgraph Loop_Body\n        direction TB\n        id2{{Does the service meet the user's circumstances?}}\n        id2 -- Yes --\x3e id3(Add the service to the display list)\n        id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n    end\n    id1 --\x3e Loop_Body\n  end\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function b(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(w,{...e})}):w(e)}function y(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  subgraph Loop_Body\n      direction TB\n      id2{{Does the service meet the user's circumstances?}}\n      id2 -- Yes --\x3e id3(Add the service to the display list)\n      id2 -- No --\x3e id4(Do not add the service<br>to the display list)\n  end\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id2 questionClass"})}function v(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(y,{...e})}):y(e)}function k(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  id1{{Is <code>MJFage</code> between the minimum and maximum age for <code>a_service</code>?}}\n  id2{{Is <code>MJFgender</code> one of the genders listed for <code>a_service</code>?}}\n  id3{{Do any of the locations in <code>MJFlocation</code> match<br>up with the list of locations in <code>a_service</code>?}}\n  id4{{Does <code>MJFfamily</code> match up with any of the<br>family list items in <code>a_service</code>?}}\n\n  id5{{Is the answer 'Yes' to all of the above questions?}}\n  id5 -- Yes --\x3e id6(Add the service to the display list)\n  id5 -- No --\x3e id7(Do not add the service<br>to the display list)\n\n  id1 ~~~ id2 ~~~ id3 ~~~ id4 ~~~ id5\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id1,id2,id3,id4,id5 questionClass"})}function _(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(k,{...e})}):k(e)}function D(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  id1(Ask the age question and store the result in <code>MJFage_ok</code>)\n  id2(Ask the gender question and store the result in <code>MJFgender_ok</code>)\n  id3(Ask the location question and store the result in <code>MJFlocation_ok</code>)\n  id4(Ask the age question and store the result in <code>MJFage_ok</code>)\n\n  id5{{Is each of <code>MJFage_ok</code>, <code>MJFgender_OK</code>, <code>MJFlocation_ok</code> and <code>MJFfamily_ok</code> equal to <code>True</code>?}}\n  id5 -- Yes --\x3e id6(Add the service to the display list)\n  id5 -- No --\x3e id7(Do not add the service<br>to the display list)\n\n  id1 ~~~ id2 ~~~ id3 ~~~ id4 ~~~ id5\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id1,id2,id3,id4,id5 questionClass"})}function F(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(D,{...e})}):D(e)}function C(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,t.jsx)(n.mermaid,{value:"flowchart TD\n  id0(for each location selected by the user)\n  id0 --\x3e id1{{\"Is the location in <code>a_service['location']</code>?\"}}\n  id1 -- Yes --\x3e id2(Set <code>MJFlocation_ok</code> to <code>True</code>)\n  id1 -- No --\x3e id3(Set <code>MJFlocation_ok</code> to <code>False</code><br>but only if it hasn't already been set to <code>True</code>)\n\n  %% Define styles for flowchart items.  We want to make comments yellow\n  %% and have a larger font size for regular items\n  classDef commentClass fill:#faffd6,text-align:left\n  classDef questionClass fill:#ffe6bc\n  classDef boundaryClass fill:#eeeeee,text-fill-color:#fff\n  classDef itemClass font-size:16pt\n  classDef leftListClass text-align:left\n\n  class id1 questionClass"})}function A(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(C,{...e})}):C(e)}},9120:(e,n,s)=>{s.r(n),s.d(n,{MappingTable:()=>r,ServiceTable:()=>a});var t=s(4848),i=s(8453);function o(e){const n={a:"a",...(0,i.R)(),...e.components};return(0,t.jsxs)("table",{className:"complexDataTableExamples",children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Name"}),(0,t.jsx)("th",{children:"Website"}),(0,t.jsx)("th",{children:"Age limits"}),(0,t.jsx)("th",{children:"Genders"}),(0,t.jsx)("th",{children:"Locations"}),(0,t.jsx)("th",{children:"Family or Single"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"ABC Services"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.a,{href:"https://abcsvc.org.au",children:"https://abcsvc.org.au"})}),(0,t.jsx)("td",{children:"18 - 65"}),(0,t.jsx)("td",{children:"Male, Female"}),(0,t.jsx)("td",{children:"North, East"}),(0,t.jsx)("td",{children:"Families, Singles"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"WH Youth"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.a,{href:"https://whyouth.org.au",children:"https://whyouth.org.au"})}),(0,t.jsx)("td",{children:"12 - 17"}),(0,t.jsx)("td",{children:"Male, Female"}),(0,t.jsx)("td",{children:"South"}),(0,t.jsx)("td",{children:"Singles"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"St Mary's Shelter"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.a,{href:"https://stmarys.org.au",children:"https://stmarys.org.au"})}),(0,t.jsx)("td",{children:"12 and over"}),(0,t.jsx)("td",{children:"Female"}),(0,t.jsx)("td",{children:"North"}),(0,t.jsx)("td",{children:"Singles"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"MHI Men's Health"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.a,{href:"https://mhimh.org.au",children:"https://mhimh.org.au"})}),(0,t.jsx)("td",{children:"18 and over"}),(0,t.jsx)("td",{children:"Male"}),(0,t.jsx)("td",{children:"North, West"}),(0,t.jsx)("td",{children:"Singles"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"DE Family Shelter"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.a,{href:"https://defsupport.org.au",children:"https://defsupport.org.au"})}),(0,t.jsx)("td",{children:"18 - 65"}),(0,t.jsx)("td",{children:"Male, Female"}),(0,t.jsx)("td",{children:"North, East, West, South"}),(0,t.jsx)("td",{children:"Families"})]})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}function l(e){const n={p:"p",...(0,i.R)(),...e.components};return(0,t.jsxs)("table",{className:"complexDataTableExamples",children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Column Name"}),(0,t.jsx)("th",{children:"Key Name"}),(0,t.jsx)("th",{children:"Data type"}),(0,t.jsx)("th",{children:"Comments"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Name"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"name"})}),(0,t.jsx)("td",{children:"String"}),(0,t.jsx)("td",{colspan:"2",children:"These first two keys store simple string data types"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Website"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"website"})}),(0,t.jsx)("td",{children:"String"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Age limits"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("code",{children:"min_age"})," and ",(0,t.jsx)("code",{children:"max_age"})]}),(0,t.jsx)("td",{children:"Integer"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"It's easier for us to split out the age limit into minimum and\nmaximum age variables and test that the user's age falls inside\nthe min and max ages. We will need additional code to cope with\nthe 'and over' requirements in some of the data.  We will deal\nwith this when we code the age test."})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Genders"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"gender"})}),(0,t.jsxs)("td",{children:[(0,t.jsx)(n.p,{children:"A list of strings representing genders.  At a minimum we should\nhave"}),(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Female"}),(0,t.jsx)("li",{children:"Male"}),(0,t.jsx)("li",{children:"Other"})]}),(0,t.jsx)(n.p,{children:"This will be driven by the data given to us by ABC."})]}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"A user will only be allowed to select one gender as a response."})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Locations"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"location"})}),(0,t.jsxs)("td",{children:[(0,t.jsx)(n.p,{children:"A list of locations."}),(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"North"}),(0,t.jsx)("li",{children:"South"}),(0,t.jsx)("li",{children:"East"}),(0,t.jsx)("li",{children:"West"})]})]}),(0,t.jsx)("td",{children:"It appears from the ABC data that this is suitable for their purposes"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Family or Single"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"family"})}),(0,t.jsxs)("td",{children:[(0,t.jsx)(n.p,{children:"A list consisting of one or all of"}),(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Family"}),(0,t.jsx)("li",{children:"Single"})]})]}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"Agencies that cater for all clients (ie: those looking for\naccommodation for themselves and those looking for accommodation\nfor themselves and their family) should have both items in their\ndata entry.  Otherwise, the appropriate list item is specified\nie: the data type will be a list containing one item."})})]})]})}function r(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},5162:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/files/ABCInc_logo_white-bc045409d39ed20fa96c622d9ad1af55.png"}}]);