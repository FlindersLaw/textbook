"use strict";(self.webpackChunktextbook_source=self.webpackChunktextbook_source||[]).push([[69],{1448:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=i(4848),s=i(8453),a=i(2487);const r={title:"Dictionaries"},o=void 0,l={id:"textbook/chapter_05/00-40",title:"Dictionaries",description:"Introducing Dictionaries",source:"@site/docs/textbook/chapter_05/00-40.mdx",sourceDirName:"textbook/chapter_05",slug:"/textbook/chapter_05/00-40",permalink:"/textbook/docs/textbook/chapter_05/00-40",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Dictionaries"},sidebar:"textbookSidebar",previous:{title:"Introducing Iteration",permalink:"/textbook/docs/textbook/chapter_05/00-30"},next:{title:"Complex Data and Data Storage",permalink:"/textbook/docs/textbook/chapter_05/00-50"}},d={},c=[{value:"Introducing Dictionaries",id:"introducing-dictionaries",level:2},{value:"A number of things to be mindful of",id:"a-number-of-things-to-be-mindful-of",level:4},{value:"Referencing",id:"referencing",level:2},{value:"Initialising dictionaries",id:"initialising-dictionaries",level:2},{value:"Adding items",id:"adding-items",level:2},{value:"Deleting Items",id:"deleting-items",level:2},{value:"List-like properties of dictionaries",id:"list-like-properties-of-dictionaries",level:2},{value:"Length",id:"length",level:3},{value:"Membership",id:"membership",level:3},{value:"Iteration",id:"iteration",level:3},{value:"An example implementation",id:"an-example-implementation",level:2}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"introducing-dictionaries",children:"Introducing Dictionaries"}),"\n",(0,t.jsx)(n.p,{children:"A dictionary in Python is defined as a data structure that allows you to look up a value by reference\nto a 'key'.  The name 'dictionary' is used because dictionaries as we know them\nwork in a similar way.  In a regular dictionary, the 'key' is the word being looked up, and the 'value'\nis the definition of that word.  Every single definition in a regular dictionary is mapped to one key,\nand every key points to one definition.  It's a one-to-one mapping in that sense."}),"\n",(0,t.jsx)(n.p,{children:"Python dictionaries are the same.  Every item in a dictionary is comprised of a key, which is unique\nin the dictionary, and a value which the key points to."}),"\n",(0,t.jsx)(n.p,{children:"Why is this useful?"}),"\n",(0,t.jsx)(n.p,{children:"We have already seen how Python lists allow us to group ordered lists of data into a single data structure.\nHowever, data is not always ordered sequentially.  We may instead want to access data based on\nwhat the data is.  A good example of this would be accessing personal details for a person."}),"\n",(0,t.jsx)(n.p,{children:"For example, let's say we have this information about me:"}),"\n",(0,t.jsxs)("table",{className:"complexDataTableExamples cdtLeft",children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"First Name"}),(0,t.jsx)("td",{children:"Mark"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Last Name"}),(0,t.jsx)("td",{children:"Ferraretto"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Email"}),(0,t.jsx)("td",{children:(0,t.jsx)(n.a,{href:"mailto:mark@f.com",children:"mark@f.com"})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Phone"}),(0,t.jsx)("td",{children:"08 1234 5678"})]})]}),"\n",(0,t.jsx)(n.p,{children:"Expressing this data in a list eg:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"user_details = [\n    'Mark',\n    'Ferraretto',\n    'mark@f.com',\n    '08 1234 5678'\n]\n"})}),"\n",(0,t.jsx)(n.p,{children:"is not that useful to us.  I can remember that my first name is at\nindex 0 and last name at index 1 and so-on but those indices don't really\nshed any light on the values they store.  What's more, we're not really after\nthe utility of a list here.  That is, this is not the type of data we'd iterate over."}),"\n",(0,t.jsx)(n.p,{children:"What would be more useful to us would be a data structure that, instead of using\nnumerical indices, used a desriptive 'key' to access each value.  For example,\nistead of accessing my last name by typing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"user_details[1]\n"})}),"\n",(0,t.jsx)(n.p,{children:"it would be more descriptive if I could use, say,"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"user_details['Last Name']\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This is exactly what Python dictionaries do.  Each item in a dictionary\nis asigned a unique key which points to a value.  Or, to put it another way,\neach item in a dictionary consists of a ",(0,t.jsx)(n.strong,{children:"key/value pair"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"We can express my user details in a Python dictionary like so:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"user_details = {\n    'first_name' : 'Mark',\n    'last_name'  : 'Ferraretto',\n    'email'      : 'mark@f.com',\n    'phone'      : '08 1234 5678'\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can see the syntax has some simliarities to the list syntax but there\nare significant differnces:"}),"\n",(0,t.jsxs)(n.p,{children:["Firstly, the list's square brackets (",(0,t.jsx)(n.code,{children:"[]"}),") are replaced by ",(0,t.jsx)(n.strong,{children:"braces"})," (",(0,t.jsx)(n.code,{children:"{}"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["Secondly, the items in the dictionary are laid out sequentially, like a list.\nHowever, each item consists of a key/value pair separated by a colon (",(0,t.jsx)(n.code,{children:":"}),")"]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.h4,{id:"a-number-of-things-to-be-mindful-of",children:"A number of things to be mindful of"}),(0,t.jsxs)(n.p,{children:["The most important is not to confuse square brackets and braces.  Doing so\ncan lead to errors or, even worse, unexpected behaviour.  Always be clear that\nlists are surrounded by square brackets (",(0,t.jsx)(n.code,{children:"[...]"}),") and dictionaries are surrounded\nby bracces (",(0,t.jsx)(n.code,{children:"{...}"}),")."]}),(0,t.jsxs)(n.p,{children:["Second, you can see we modified the keys by changing the table text into\nlower case and replacing spaces with underscores (eg: 'First Name' --\x3e ",(0,t.jsx)(n.code,{children:"first_name"}),").\nWhile not required, the custom with Python dictionaries is to have the key\nall in lower case and without spaces.  However, ",(0,t.jsx)(n.code,{children:"First Name"})," is a perfectly\nvalid key."]}),(0,t.jsxs)(n.p,{children:["Third, in our example, we padded out the space between the key and the\ncolon (",(0,t.jsx)(n.code,{children:":"}),") so that all the colons line up one under another.  We've done\nthis for cosmetic reasons only.  The code looks nicer! And it's easier to read."]}),(0,t.jsxs)(n.p,{children:["Fourth, some of you may notice that, apart from being key/value pairs, the\nitems in a dictionary are set out much like a list (ie: in sequence).  Does that\nmean we can iterate over them?  The short answer is yes, but there are caveats.\nWe will cover these caveats ",(0,t.jsx)(n.a,{href:"#iteration",children:"later in this chapter"}),"."]})]}),"\n",(0,t.jsx)(n.h2,{id:"referencing",children:"Referencing"}),"\n",(0,t.jsxs)(n.p,{children:["Referencing works in a similar way to ",(0,t.jsx)(n.a,{href:"00-20#referencing",children:"referencing in lists"}),".\nInstead of a numeric index, we use the the name of the key.  So:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"user_details['first_name']\n"})}),"\n",(0,t.jsxs)(n.p,{children:["will give us the value ",(0,t.jsx)(n.code,{children:"Mark"}),"."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["You cannot reference, say, the first item in the dictionary by typing\n",(0,t.jsx)(n.code,{children:"user_details[0]"}),".  This will yield an error as Python will attempt to look\nfor a key called ",(0,t.jsx)(n.code,{children:"0"})," in your dictionary and the lookup will fail."]}),(0,t.jsx)(n.p,{children:"You can only lookup a value by its keys."})]}),"\n",(0,t.jsx)(n.h2,{id:"initialising-dictionaries",children:"Initialising dictionaries"}),"\n",(0,t.jsx)(n.p,{children:"Much like lists, we can either start with an empty dictionary:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"user_details = {}\n"})}),"\n",(0,t.jsx)(n.p,{children:"or we can initialise a dictionary with variables:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"user_details = {\n    'first_name' : 'Mark',\n    'last_name'  : 'Ferraretto',\n    'email'      : 'mark@f.com',\n    'phone'      : '08 1234 5678'\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note the use of braces (",(0,t.jsx)(n.code,{children:"{}"}),") instead of square brackets."]}),"\n",(0,t.jsx)(n.h2,{id:"adding-items",children:"Adding items"}),"\n",(0,t.jsxs)(n.p,{children:["Once a dictionary is initialised, items can be added to them simply by\nassigning a new value to a new key.  For example, we can add details about\nmy office to ",(0,t.jsx)(n.code,{children:"user_details"})," by specifing what we want the value of the ",(0,t.jsx)(n.code,{children:"office"}),"\nkey to be:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"user_details['office'] = 'LWCM Room 10'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This adds the ",(0,t.jsx)(n.code,{children:"office"})," key to ",(0,t.jsx)(n.code,{children:"user_details"})," and assigns it the value\n",(0,t.jsx)(n.code,{children:"LWCM Room 10"}),".  Our ",(0,t.jsx)(n.code,{children:"user_details"})," dictionary would subsequently look like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"user_details = {\n    'first_name' : 'Mark',\n    'last_name'  : 'Ferraretto',\n    'email'      : 'mark@f.com',\n    'phone'      : '08 1234 5678',\n    'office'     : 'LWCM Room 10'\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"You must initialise a dictionary before you can add items to it"})}),"\n",(0,t.jsx)(n.h2,{id:"deleting-items",children:"Deleting Items"}),"\n",(0,t.jsxs)(n.p,{children:["Deleting key/value pairs works in way very similar to\n",(0,t.jsx)(n.a,{href:"./00-20#deleting",children:"deleting list items"}),", that is by using ",(0,t.jsx)(n.code,{children:"del()"}),".",(0,t.jsx)(n.br,{}),"\n","With dictionaries the name of the key is supplied instead of a numerical index."]}),"\n",(0,t.jsxs)(n.p,{children:["To delete the ",(0,t.jsx)(n.code,{children:"phone"})," key/value pair from ",(0,t.jsx)(n.code,{children:"user_details"})," we would do this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"del(user_details['phone'])\n"})}),"\n",(0,t.jsx)(n.h2,{id:"list-like-properties-of-dictionaries",children:"List-like properties of dictionaries"}),"\n",(0,t.jsx)(n.p,{children:"Although a dictionary is not a list, it does have some list-like properties.\nFor example, you can find the length of a dictionary, you can iterate over its\nkeys and you can check a key exists in a dictionary (but not a value)."}),"\n",(0,t.jsxs)(n.p,{children:["This list-like properties come about because, internally, Python treats\nthe keys as a list in many circumstances.  The most obvious of these is\nthe ",(0,t.jsx)(n.code,{children:"keys()"})," ",(0,t.jsx)(a.DisplayGlossaryItem,{item:"method"})," which returns a list\nof the keys in the dictionary ie this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"user_details.keys()\n"})}),"\n",(0,t.jsx)(n.p,{children:"returns this list:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"['first_name', 'last_name', 'email', 'phone', 'office']\n"})}),"\n",(0,t.jsx)(n.p,{children:"The other list-like functions and methods essentially operate on this\nlist of keys."}),"\n",(0,t.jsx)(n.h3,{id:"length",children:"Length"}),"\n",(0,t.jsxs)(n.p,{children:["Like lists, you can use ",(0,t.jsx)(n.code,{children:"len()"})," to count the number of items in a dictionary.\n",(0,t.jsx)(n.code,{children:"len()"})," actually counts the number of keys, but this is sufficient to return\nthe number of items as each key can only have one value."]}),"\n",(0,t.jsx)(n.p,{children:"This command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"len(user_details)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["would return ",(0,t.jsx)(n.strong,{children:"5"}),", as we have five key/value pairs in ",(0,t.jsx)(n.code,{children:"user_details"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"membership",children:"Membership"}),"\n",(0,t.jsxs)(n.p,{children:["We can use ",(0,t.jsx)(n.code,{children:"in"})," and ",(0,t.jsx)(n.code,{children:"not in"})," with dictionaries in a similiar way as we do\nfor ",(0,t.jsx)(n.a,{href:"00-20#list-membership",children:"lists"}),".  However, ",(0,t.jsx)(n.code,{children:"in"})," and ",(0,t.jsx)(n.code,{children:"not in"})," only work\nwith keys and with values.  So, this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"'first_name' in user_details\n"})}),"\n",(0,t.jsxs)(n.p,{children:["would return ",(0,t.jsx)(n.code,{children:"True"}),", but this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"'Mark' in user_details\n"})}),"\n",(0,t.jsx)(n.p,{children:"would result in an error."}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"in"})," is a good way to find if a key exists in a dictionary.  It's\na good precautionary check to make before getting the value of a key as it\nprevents your program crashing if your key doesn't exist."]})}),"\n",(0,t.jsx)(n.h3,{id:"iteration",children:"Iteration"}),"\n",(0,t.jsxs)(n.p,{children:["We've spoken about iteration ",(0,t.jsx)(n.a,{href:"00-30",children:"already"}),". Iteration and lists are\na potent combination."]}),"\n",(0,t.jsx)(n.p,{children:"We can also iterate over a dictionary or, more specifically, over the keys\nof a dictionary."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"In theory, a dictionary has no order.  That meant that when iterating over\na dictionary you would never know the order in which the key/value pairs\nwould be displayed.  However, Docassemble preserves the order of keys,\nmeaning that when we iterate over a dictionary the key/value pairs will\nalways be presented in the order they are added to the dictionary."})}),"\n",(0,t.jsxs)(n.p,{children:["We will usually use the ",(0,t.jsx)(n.code,{children:"keys()"})," method for iteration.  Here is some\nexample code that displays a Markdown table, uses a Mako ",(0,t.jsx)(n.code,{children:"%for"})," loop\nto iterate over ",(0,t.jsx)(n.code,{children:"user_details"})," (highlighted),\nand prints out the rows of the table:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\nmandatory: True\nquestion: User details table\nsubquestion: |\n\n  Key|Value\n  ---|---\n  # highlight-start\n  %for item in user_details.keys():\n  `${item}`|${user_details[item]}\n  %endfor\n  # highlight-end\n---\ncode: |\n  user_details = {\n    'first_name' : 'Mark',\n    'last_name'  : 'Ferraretto',\n    'email'      : 'mark@f.com',\n    'phone'      : '08 1234 5678',\n    'office'     : 'LWCM Room 10'\n  }\n---\n"})}),"\n",(0,t.jsx)(n.h2,{id:"an-example-implementation",children:"An example implementation"}),"\n",(0,t.jsxs)(n.p,{children:["This example code allows a user to add an extra key/value pair to\n",(0,t.jsx)(n.code,{children:"user_details"})," and displays ",(0,t.jsx)(n.code,{children:"user_details"})," in a table.\nThe code then checks to see if the key added matches a secret key.  If\nit does, then the secret key is displayed, otherwise a message stating\nthat the secret key was not guessed is displayed."]}),"\n",(0,t.jsx)(n.p,{children:"This code provides examples of:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"initialising a dictionary"}),"\n",(0,t.jsx)(n.li,{children:"adding a key/value pair to a dictionary"}),"\n",(0,t.jsx)(n.li,{children:"iterating over a dictionary; and"}),"\n",(0,t.jsx)(n.li,{children:"testing for membership."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The code is well commented (in the author's opinion!) and you are enouraged\nto read through the comments and the code.  You are also encouraged to\ncopy the code into your Playground and experiment with it."}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)(n.p,{children:"Click here to view the code"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:"---\n# We haven't learnt about styles and animations yet.  This 'feature' adds a\n# CSS style to this app.  If you'd like to see what it does then do this:\n# - copy the contents of funky.css just below this code in the textbook\n# - Go to Folders -> Static files in your playground\n# - create a new file called funky.css and paste into that file\n# - guess the secret key!\nfeatures:\n  css: funky.css\n---\n# We should be getting used to this now.  First question block is mandatory.\n# Note the %for loop on lines 21 to 23.  This loop iterates over the keys in the dictionary\n# and creates a new row in the table for each key/value pair.\nmandatory: True\nquestion: User Details\nsubquestion: |\n  Here are the contents of `user_details`\n\n  Key|Value\n  ---|---\n  %for item in user_details.keys():\n  `${item}`|${user_details[item]}\n  %endfor\n\n  Press **Continue** to add an extra key/value pair.\n  \n  Try to guess the secret key!\nbuttons:\n  - Continue: continue\n---\n# Mandatory code block to drive the app\nmandatory: True\ncode: |\n  # Add the new item to user_details\n  # This line will cause the question block below to be asked\n  user_details[new_key] = new_value\n  \n  finish_screen\n---\n# We declare our original user_details dictionary here\ncode: |\n  # Declare our initial list\n  user_details = {\n    'first_name' : 'Mark',\n    'last_name'  : 'Ferraretto',\n    'email'      : 'mark@f.com',\n    'phone'      : '08 1234 5678',\n    'office'     : 'LWCM Room 10'\n  }\n---\nquestion: Extra key/value pair\nsubquestion: |\n  Add a new key/value pair.  If you key matches the secret word you get a prize!\nfields:\n  - Enter new key: new_key\n  - Enter new value: new_value\n---\n# We define the secret key in a code block on its own.  It's good practice\n# to make code blocks as small as you can and to do only one thing.\ncode: |\n  secret_key = 'please'\n---\n# First, note that lines 81 - 85 are a copy of lines 19 to 23.  That's\n# inefficient.  Docassemble does provide a way (called 'templates') to \n# avoid repeating ourselves like this.  We cover templates later in \n# this textbook.\n#\n# Next, note the %if statement on line 87 and the membership test.\n# If the user guessed the secret key, then secret_key will be a member\n# of user_details.  We can then display the value of user_details[secret_key]\n# in the first branch of the %if statement.  If we attempted to display\n# user_details[secret_key] regardless, our program would crash if the user did\n# not guess the secret key.  \n#\n# Try removing the %if statement as an exercise\nevent: finish_screen\nquestion: Updated user details table\nsubquestion: |\n  Here are the contents of `user_details`\n  \n  Key|Value\n  ---|---\n  %for item in user_details.keys():\n  `${item}`|${user_details[item]}\n  %endfor\n  \n  %if secret_key in user_details:\n  <div class=\"funky\">\n  Congratulations, you guessed the secret key!!\n  </div>\n  <p></p>\n  The secret key is **${secret_key}** and you assigned\n  it the value **${user_details[secret_key]}**\n  %else:\n  Sorry, you have not guessed the secret key\n  %endif\n---\n"})})]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)(n.p,{children:"Bonus styling for secret key"})}),(0,t.jsxs)(n.p,{children:["This CSS file (we'll discuss CSS in ",(0,t.jsx)(a.DisplayChapter,{chapter:"chapter_07"}),")\nprovides some funky stuff for when you correctly guess the secret key."]}),(0,t.jsx)(n.p,{children:"To use it do the following:"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"copy the css code below"}),"\n",(0,t.jsx)(n.li,{children:"go to your Playground and select Folders --\x3e Static files"}),"\n",(0,t.jsxs)(n.li,{children:["click on the 'Add' button and create a new file called ",(0,t.jsx)(n.code,{children:"funky.css"})]}),"\n",(0,t.jsx)(n.li,{children:"paste in the CSS code"}),"\n",(0,t.jsxs)(n.li,{children:["press ",(0,t.jsx)(n.strong,{children:"Save"})]}),"\n",(0,t.jsxs)(n.li,{children:["click ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"Back"})})," to go back to your code"]}),"\n",(0,t.jsx)(n.li,{children:"run your code"}),"\n",(0,t.jsx)(n.li,{children:"make sure you guess the secret key!!"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",metastring:'name="funky.css" showLineNumbers',children:"@keyframes funky {\n    0%, 100% { \n        color: blue; \n        transform: scale(1);\n    }\n    25% { \n        color: red; \n        transform: scale(1.2);\n    }\n    50% { \n        color: green; \n        transform: scale(1.4);\n    }\n    75% { \n        color: purple; \n        transform: scale(1.2);\n    }\n}\n\n.funky {\n    text-align: center;\n    animation: funky 2s ease-in-out infinite;\n}\n"})})]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);